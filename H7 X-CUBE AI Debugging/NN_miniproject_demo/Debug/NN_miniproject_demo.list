
NN_miniproject_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000139a8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a78  08013c48  08013c48  00023c48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080146c0  080146c0  00030898  2**0
                  CONTENTS
  4 .ARM          00000008  080146c0  080146c0  000246c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080146c8  080146c8  00030898  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080146c8  080146c8  000246c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080146cc  080146cc  000246cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007d8  24000000  080146d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240007d8  08014ea8  000307d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000838  08014f08  00030838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001284  24000898  08014f68  00030898  2**2
                  ALLOC
 12 ._user_heap_stack 00008004  24001b1c  08014f68  00031b1c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030898  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003e07c  00000000  00000000  000308c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000064e0  00000000  00000000  0006e942  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001b80  00000000  00000000  00074e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001940  00000000  00000000  000769a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003eedc  00000000  00000000  000782e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001e410  00000000  00000000  000b71c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    001799d5  00000000  00000000  000d55d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0024efa9  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000081e0  00000000  00000000  0024f024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000898 	.word	0x24000898
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013c30 	.word	0x08013c30

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400089c 	.word	0x2400089c
 80002dc:	08013c30 	.word	0x08013c30

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000694:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000698:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800069c:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <SCB_EnableICache+0x3c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006a8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <SCB_EnableICache+0x3c>)
 80006ae:	695b      	ldr	r3, [r3, #20]
 80006b0:	4a06      	ldr	r2, [pc, #24]	; (80006cc <SCB_EnableICache+0x3c>)
 80006b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <SCB_EnableDCache+0x7c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006de:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <SCB_EnableDCache+0x7c>)
 80006e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006e8:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	0b5b      	lsrs	r3, r3, #13
 80006ee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006f2:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	08db      	lsrs	r3, r3, #3
 80006f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006fc:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	015a      	lsls	r2, r3, #5
 8000702:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000706:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000708:	68ba      	ldr	r2, [r7, #8]
 800070a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800070c:	490f      	ldr	r1, [pc, #60]	; (800074c <SCB_EnableDCache+0x7c>)
 800070e:	4313      	orrs	r3, r2
 8000710:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	1e5a      	subs	r2, r3, #1
 8000718:	60ba      	str	r2, [r7, #8]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1ef      	bne.n	80006fe <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	60fa      	str	r2, [r7, #12]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1e5      	bne.n	80006f4 <SCB_EnableDCache+0x24>
 8000728:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <SCB_EnableDCache+0x7c>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	4a06      	ldr	r2, [pc, #24]	; (800074c <SCB_EnableDCache+0x7c>)
 8000732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000736:	6153      	str	r3, [r2, #20]
 8000738:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800073c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000740:	bf00      	nop
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000758:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800075c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	2b00      	cmp	r3, #0
 8000766:	d013      	beq.n	8000790 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000768:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800076c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000770:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000774:	2b00      	cmp	r3, #0
 8000776:	d00b      	beq.n	8000790 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000778:	e000      	b.n	800077c <ITM_SendChar+0x2c>
    {
      __NOP();
 800077a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800077c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0f9      	beq.n	800077a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000786:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	b2d2      	uxtb	r2, r2
 800078e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000790:	687b      	ldr	r3, [r7, #4]
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
	...

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	b0d2      	sub	sp, #328	; 0x148
 80007a4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  char buf[50];
  int buf_len = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  ai_i32 nbatch;
  uint32_t timestamp;
  float y_val;

  // Pointer to our model
  ai_handle sine_model = AI_HANDLE_NULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  AI_ALIGNED(4) ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];


  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 80007b2:	4bc9      	ldr	r3, [pc, #804]	; (8000ad8 <main+0x338>)
 80007b4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80007b8:	461d      	mov	r5, r3
 80007ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007c2:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 80007c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ca:	4ac3      	ldr	r2, [pc, #780]	; (8000ad8 <main+0x338>)
 80007cc:	461c      	mov	r4, r3
 80007ce:	4615      	mov	r5, r2
 80007d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007d8:	e884 0003 	stmia.w	r4, {r0, r1}

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {
 80007dc:	463b      	mov	r3, r7
 80007de:	4abf      	ldr	r2, [pc, #764]	; (8000adc <main+0x33c>)
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	463b      	mov	r3, r7
 80007e4:	2201      	movs	r2, #1
 80007e6:	809a      	strh	r2, [r3, #4]
 80007e8:	463b      	mov	r3, r7
 80007ea:	2201      	movs	r2, #1
 80007ec:	80da      	strh	r2, [r3, #6]
 80007ee:	463b      	mov	r3, r7
 80007f0:	2201      	movs	r2, #1
 80007f2:	811a      	strh	r2, [r3, #8]
 80007f4:	463b      	mov	r3, r7
 80007f6:	f240 5204 	movw	r2, #1284	; 0x504
 80007fa:	60da      	str	r2, [r3, #12]
	AI_SINE_MODEL_DATA_WEIGHTS(ai_sine_model_data_weights_get()),
 80007fc:	f00d ff62 	bl	800e6c4 <ai_sine_model_data_weights_get>
 8000800:	4602      	mov	r2, r0
  ai_network_params ai_params = {
 8000802:	463b      	mov	r3, r7
 8000804:	611a      	str	r2, [r3, #16]
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
 800080c:	463b      	mov	r3, r7
 800080e:	4ab4      	ldr	r2, [pc, #720]	; (8000ae0 <main+0x340>)
 8000810:	619a      	str	r2, [r3, #24]
 8000812:	463b      	mov	r3, r7
 8000814:	2201      	movs	r2, #1
 8000816:	839a      	strh	r2, [r3, #28]
 8000818:	463b      	mov	r3, r7
 800081a:	2201      	movs	r2, #1
 800081c:	83da      	strh	r2, [r3, #30]
 800081e:	463b      	mov	r3, r7
 8000820:	2201      	movs	r2, #1
 8000822:	841a      	strh	r2, [r3, #32]
 8000824:	463b      	mov	r3, r7
 8000826:	2280      	movs	r2, #128	; 0x80
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
 800082a:	463b      	mov	r3, r7
 800082c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000830:	629a      	str	r2, [r3, #40]	; 0x28
 8000832:	463b      	mov	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	62da      	str	r2, [r3, #44]	; 0x2c
	AI_SINE_MODEL_DATA_ACTIVATIONS(activations)
  };

  // Set pointers wrapper structs to our data buffers
  ai_input[0].n_batches = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 800083e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000842:	65bb      	str	r3, [r7, #88]	; 0x58
  ai_output[0].n_batches = 1;
 8000844:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000848:	2201      	movs	r2, #1
 800084a:	809a      	strh	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 800084c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000850:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000854:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000856:	f7ff ff1b 	bl	8000690 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800085a:	f7ff ff39 	bl	80006d0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085e:	f000 ff03 	bl	8001668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000862:	f000 f95b 	bl	8000b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000866:	f000 faf9 	bl	8000e5c <MX_GPIO_Init>
  MX_ETH_Init();
 800086a:	f000 fa33 	bl	8000cd4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800086e:	f000 faa9 	bl	8000dc4 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000872:	f008 f863 	bl	800893c <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000876:	f00d fabb 	bl	800ddf0 <MX_USB_HOST_Init>
  MX_CRC_Init();
 800087a:	f000 fa09 	bl	8000c90 <MX_CRC_Init>
  MX_TIM16_Init();
 800087e:	f000 fa7b 	bl	8000d78 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  // Start timer/counter
  HAL_TIM_Base_Start(&htim16);
 8000882:	4898      	ldr	r0, [pc, #608]	; (8000ae4 <main+0x344>)
 8000884:	f005 ffc4 	bl	8006810 <HAL_TIM_Base_Start>

  // Greetings!
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 8000888:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800088c:	4a96      	ldr	r2, [pc, #600]	; (8000ae8 <main+0x348>)
 800088e:	461c      	mov	r4, r3
 8000890:	4615      	mov	r5, r2
 8000892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000896:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800089a:	c403      	stmia	r4!, {r0, r1}
 800089c:	8022      	strh	r2, [r4, #0]
 800089e:	3402      	adds	r4, #2
 80008a0:	0c13      	lsrs	r3, r2, #16
 80008a2:	7023      	strb	r3, [r4, #0]
 80008a4:	231a      	movs	r3, #26
 80008a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  printf(buf);
 80008aa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f010 f80a 	bl	80108c8 <iprintf>

  // Create instance of neural network
  ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 80008b4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f00d fe9c 	bl	800e5f8 <ai_sine_model_create>
 80008c0:	4603      	mov	r3, r0
 80008c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (ai_err.type != AI_ERROR_NONE)
 80008c6:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d016      	beq.n	80008fc <main+0x15c>
  {
    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 80008ce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80008d2:	4a86      	ldr	r2, [pc, #536]	; (8000aec <main+0x34c>)
 80008d4:	461c      	mov	r4, r3
 80008d6:	4615      	mov	r5, r2
 80008d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008e4:	6020      	str	r0, [r4, #0]
 80008e6:	3404      	adds	r4, #4
 80008e8:	8021      	strh	r1, [r4, #0]
 80008ea:	2325      	movs	r3, #37	; 0x25
 80008ec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    printf(buf);
 80008f0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f00f ffe7 	bl	80108c8 <iprintf>
    while(1);
 80008fa:	e7fe      	b.n	80008fa <main+0x15a>
  }

  // Initialize neural network
  if (!ai_sine_model_init(sine_model, &ai_params))
 80008fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000900:	463a      	mov	r2, r7
 8000902:	4611      	mov	r1, r2
 8000904:	4618      	mov	r0, r3
 8000906:	f00d fe8d 	bl	800e624 <ai_sine_model_init>
 800090a:	4603      	mov	r3, r0
 800090c:	f083 0301 	eor.w	r3, r3, #1
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b00      	cmp	r3, #0
 8000914:	d013      	beq.n	800093e <main+0x19e>
  {
    buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8000916:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800091a:	4a75      	ldr	r2, [pc, #468]	; (8000af0 <main+0x350>)
 800091c:	461c      	mov	r4, r3
 800091e:	4615      	mov	r5, r2
 8000920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000928:	682b      	ldr	r3, [r5, #0]
 800092a:	7023      	strb	r3, [r4, #0]
 800092c:	2320      	movs	r3, #32
 800092e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    printf(buf);
 8000932:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000936:	4618      	mov	r0, r3
 8000938:	f00f ffc6 	bl	80108c8 <iprintf>
    while(1);
 800093c:	e7fe      	b.n	800093c <main+0x19c>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int first_while_iter = 1;
 800093e:	2301      	movs	r3, #1
 8000940:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  while (1)
  {
	if (first_while_iter)
 8000944:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000948:	2b00      	cmp	r3, #0
 800094a:	d038      	beq.n	80009be <main+0x21e>
	{
	  sprintf(buf, "Mounting USB...\r\n");
 800094c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000950:	4a68      	ldr	r2, [pc, #416]	; (8000af4 <main+0x354>)
 8000952:	461c      	mov	r4, r3
 8000954:	4615      	mov	r5, r2
 8000956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095a:	682b      	ldr	r3, [r5, #0]
 800095c:	8023      	strh	r3, [r4, #0]
	  printf(buf);
 800095e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000962:	4618      	mov	r0, r3
 8000964:	f00f ffb0 	bl	80108c8 <iprintf>
	  while(1)
	  {
	    MX_USB_HOST_Process();
 8000968:	f00d fa68 	bl	800de3c <MX_USB_HOST_Process>
		sprintf(name,"num5.bmp");
 800096c:	4a62      	ldr	r2, [pc, #392]	; (8000af8 <main+0x358>)
 800096e:	4b63      	ldr	r3, [pc, #396]	; (8000afc <main+0x35c>)
 8000970:	cb03      	ldmia	r3!, {r0, r1}
 8000972:	6010      	str	r0, [r2, #0]
 8000974:	6051      	str	r1, [r2, #4]
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	7213      	strb	r3, [r2, #8]
	    file_ready = 0;
 800097a:	4b61      	ldr	r3, [pc, #388]	; (8000b00 <main+0x360>)
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
	    read_bmp(name);
 8000980:	485d      	ldr	r0, [pc, #372]	; (8000af8 <main+0x358>)
 8000982:	f00d f99f 	bl	800dcc4 <read_bmp>
	    if(file_ready == 1){
 8000986:	4b5e      	ldr	r3, [pc, #376]	; (8000b00 <main+0x360>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d000      	beq.n	8000990 <main+0x1f0>
	  {
 800098e:	e7eb      	b.n	8000968 <main+0x1c8>
//			out_img = ProcessBmp(rtext);
		    break;
 8000990:	bf00      	nop
	    }

	  }
	  sprintf(buf, "USB Mounted Successfully\r\n");
 8000992:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000996:	4a5b      	ldr	r2, [pc, #364]	; (8000b04 <main+0x364>)
 8000998:	461c      	mov	r4, r3
 800099a:	4615      	mov	r5, r2
 800099c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009a4:	c403      	stmia	r4!, {r0, r1}
 80009a6:	8022      	strh	r2, [r4, #0]
 80009a8:	3402      	adds	r4, #2
 80009aa:	0c13      	lsrs	r3, r2, #16
 80009ac:	7023      	strb	r3, [r4, #0]
	  printf(buf);
 80009ae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f00f ff88 	bl	80108c8 <iprintf>
	  first_while_iter = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	}

    sprintf(name,"b1.txt");
 80009be:	4b4e      	ldr	r3, [pc, #312]	; (8000af8 <main+0x358>)
 80009c0:	4a51      	ldr	r2, [pc, #324]	; (8000b08 <main+0x368>)
 80009c2:	6810      	ldr	r0, [r2, #0]
 80009c4:	6018      	str	r0, [r3, #0]
 80009c6:	8891      	ldrh	r1, [r2, #4]
 80009c8:	7992      	ldrb	r2, [r2, #6]
 80009ca:	8099      	strh	r1, [r3, #4]
 80009cc:	719a      	strb	r2, [r3, #6]
    float * b1 = read_txt(name, 2);
 80009ce:	2102      	movs	r1, #2
 80009d0:	4849      	ldr	r0, [pc, #292]	; (8000af8 <main+0x358>)
 80009d2:	f00d f9bb 	bl	800dd4c <read_txt>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    printf("%.2f ", b1[0]);
 80009dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80009e0:	edd3 7a00 	vldr	s15, [r3]
 80009e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009e8:	ec53 2b17 	vmov	r2, r3, d7
 80009ec:	4847      	ldr	r0, [pc, #284]	; (8000b0c <main+0x36c>)
 80009ee:	f00f ff6b 	bl	80108c8 <iprintf>
    printf("%.2f\n", b1[1]);
 80009f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80009f6:	3304      	adds	r3, #4
 80009f8:	edd3 7a00 	vldr	s15, [r3]
 80009fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a00:	ec53 2b17 	vmov	r2, r3, d7
 8000a04:	4842      	ldr	r0, [pc, #264]	; (8000b10 <main+0x370>)
 8000a06:	f00f ff5f 	bl	80108c8 <iprintf>
    free(b1);
 8000a0a:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000a0e:	f00f fa5b 	bl	800fec8 <free>
//    {
//  	  Error_Handler();
//    }

	// Fill input buffer (use test value)
	for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000a18:	e00d      	b.n	8000a36 <main+0x296>
	{
	  ((ai_float *)in_data)[i] = (ai_float)2.0f;
 8000a1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000a24:	4413      	add	r3, r2
 8000a26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a2a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8000a2c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000a30:	3301      	adds	r3, #1
 8000a32:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000a36:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d0ed      	beq.n	8000a1a <main+0x27a>
	}

	// Get current timestamp
	timestamp = htim16.Instance->CNT;
 8000a3e:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <main+0x344>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	// Perform inference
	nbatch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 8000a48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000a4c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000a50:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000a54:	4618      	mov	r0, r3
 8000a56:	f00d fe24 	bl	800e6a2 <ai_sine_model_run>
 8000a5a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
	if (nbatch != 1) {
 8000a5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d012      	beq.n	8000a8c <main+0x2ec>
	  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8000a66:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000a6a:	4a2a      	ldr	r2, [pc, #168]	; (8000b14 <main+0x374>)
 8000a6c:	461c      	mov	r4, r3
 8000a6e:	4615      	mov	r5, r2
 8000a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a78:	682b      	ldr	r3, [r5, #0]
 8000a7a:	7023      	strb	r3, [r4, #0]
 8000a7c:	2320      	movs	r3, #32
 8000a7e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	  printf(buf);
 8000a82:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f00f ff1e 	bl	80108c8 <iprintf>
	}

	// Read output (predicted y) of neural network
	y_val = ((float *)out_data)[0];
 8000a8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

	// Print output of neural network along with inference time (microseconds)
	buf_len = sprintf(buf,
 8000a96:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 8000a9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
					  "Output: %f | Duration: %lu\r\n",
					  y_val,
					  htim16.Instance->CNT - timestamp);
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <main+0x344>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	buf_len = sprintf(buf,
 8000aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	ec53 2b17 	vmov	r2, r3, d7
 8000ab4:	4918      	ldr	r1, [pc, #96]	; (8000b18 <main+0x378>)
 8000ab6:	f00f ff2f 	bl	8010918 <siprintf>
 8000aba:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
	printf(buf);
 8000abe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f00f ff00 	bl	80108c8 <iprintf>

	// Wait before doing it again
	HAL_Delay(1000);
 8000ac8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000acc:	f000 fe5e 	bl	800178c <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000ad0:	f00d f9b4 	bl	800de3c <MX_USB_HOST_Process>
  {
 8000ad4:	e736      	b.n	8000944 <main+0x1a4>
 8000ad6:	bf00      	nop
 8000ad8:	08013d48 	.word	0x08013d48
 8000adc:	40040440 	.word	0x40040440
 8000ae0:	00040440 	.word	0x00040440
 8000ae4:	24000ad0 	.word	0x24000ad0
 8000ae8:	08013c48 	.word	0x08013c48
 8000aec:	08013c64 	.word	0x08013c64
 8000af0:	08013c8c 	.word	0x08013c8c
 8000af4:	08013cb0 	.word	0x08013cb0
 8000af8:	24001848 	.word	0x24001848
 8000afc:	08013cc4 	.word	0x08013cc4
 8000b00:	240008b4 	.word	0x240008b4
 8000b04:	08013cd0 	.word	0x08013cd0
 8000b08:	08013cec 	.word	0x08013cec
 8000b0c:	08013cf4 	.word	0x08013cf4
 8000b10:	08013cfc 	.word	0x08013cfc
 8000b14:	08013d04 	.word	0x08013d04
 8000b18:	08013d28 	.word	0x08013d28

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b0cc      	sub	sp, #304	; 0x130
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b26:	224c      	movs	r2, #76	; 0x4c
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f00f f9df 	bl	800feee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b34:	2220      	movs	r2, #32
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f00f f9d8 	bl	800feee <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	4618      	mov	r0, r3
 8000b44:	23bc      	movs	r3, #188	; 0xbc
 8000b46:	461a      	mov	r2, r3
 8000b48:	2100      	movs	r1, #0
 8000b4a:	f00f f9d0 	bl	800feee <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f003 fb28 	bl	80041a4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	4b4a      	ldr	r3, [pc, #296]	; (8000c84 <SystemClock_Config+0x168>)
 8000b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b5e:	4a49      	ldr	r2, [pc, #292]	; (8000c84 <SystemClock_Config+0x168>)
 8000b60:	f023 0301 	bic.w	r3, r3, #1
 8000b64:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b66:	4b47      	ldr	r3, [pc, #284]	; (8000c84 <SystemClock_Config+0x168>)
 8000b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6a:	f003 0201 	and.w	r2, r3, #1
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	4b45      	ldr	r3, [pc, #276]	; (8000c88 <SystemClock_Config+0x16c>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b7a:	4a43      	ldr	r2, [pc, #268]	; (8000c88 <SystemClock_Config+0x16c>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b80:	6193      	str	r3, [r2, #24]
 8000b82:	4b41      	ldr	r3, [pc, #260]	; (8000c88 <SystemClock_Config+0x16c>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b92:	bf00      	nop
 8000b94:	4b3c      	ldr	r3, [pc, #240]	; (8000c88 <SystemClock_Config+0x16c>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ba0:	d1f8      	bne.n	8000b94 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ba8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000bc2:	2318      	movs	r3, #24
 8000bc4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bda:	230c      	movs	r3, #12
 8000bdc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f003 fb21 	bl	8004238 <HAL_RCC_OscConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000bfc:	f000 fa3c 	bl	8001078 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c00:	233f      	movs	r3, #63	; 0x3f
 8000c02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c06:	2303      	movs	r3, #3
 8000c08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c34:	2101      	movs	r1, #1
 8000c36:	4618      	mov	r0, r3
 8000c38:	f003 ff0e 	bl	8004a58 <HAL_RCC_ClockConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0x12a>
  {
    Error_Handler();
 8000c42:	f000 fa19 	bl	8001078 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	4a10      	ldr	r2, [pc, #64]	; (8000c8c <SystemClock_Config+0x170>)
 8000c4c:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	2200      	movs	r2, #0
 8000c54:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000c56:	f107 0308 	add.w	r3, r7, #8
 8000c5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	4618      	mov	r0, r3
 8000c68:	f004 fa7a 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0x15a>
  {
    Error_Handler();
 8000c72:	f000 fa01 	bl	8001078 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000c76:	f003 facf 	bl	8004218 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000c7a:	bf00      	nop
 8000c7c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	58000400 	.word	0x58000400
 8000c88:	58024800 	.word	0x58024800
 8000c8c:	00040002 	.word	0x00040002

08000c90 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c94:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <MX_CRC_Init+0x40>)
 8000c98:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000cba:	f000 feb9 	bl	8001a30 <HAL_CRC_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000cc4:	f000 f9d8 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	24000a08 	.word	0x24000a08
 8000cd0:	58024c00 	.word	0x58024c00

08000cd4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000cd8:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <MX_ETH_Init+0x90>)
 8000cda:	4a23      	ldr	r2, [pc, #140]	; (8000d68 <MX_ETH_Init+0x94>)
 8000cdc:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000cde:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <MX_ETH_Init+0x90>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <MX_ETH_Init+0x90>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	3301      	adds	r3, #1
 8000cec:	2280      	movs	r2, #128	; 0x80
 8000cee:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000cf0:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <MX_ETH_Init+0x90>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	22e1      	movs	r2, #225	; 0xe1
 8000cf8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <MX_ETH_Init+0x90>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	3303      	adds	r3, #3
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <MX_ETH_Init+0x90>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <MX_ETH_Init+0x90>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	3305      	adds	r3, #5
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_ETH_Init+0x90>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_ETH_Init+0x90>)
 8000d20:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <MX_ETH_Init+0x98>)
 8000d22:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_ETH_Init+0x90>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <MX_ETH_Init+0x9c>)
 8000d28:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_ETH_Init+0x90>)
 8000d2c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d30:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d32:	480c      	ldr	r0, [pc, #48]	; (8000d64 <MX_ETH_Init+0x90>)
 8000d34:	f000 ff66 	bl	8001c04 <HAL_ETH_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000d3e:	f000 f99b 	bl	8001078 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d42:	2234      	movs	r2, #52	; 0x34
 8000d44:	2100      	movs	r1, #0
 8000d46:	480b      	ldr	r0, [pc, #44]	; (8000d74 <MX_ETH_Init+0xa0>)
 8000d48:	f00f f8d1 	bl	800feee <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_ETH_Init+0xa0>)
 8000d4e:	2221      	movs	r2, #33	; 0x21
 8000d50:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <MX_ETH_Init+0xa0>)
 8000d54:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d58:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_ETH_Init+0xa0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	24000a2c 	.word	0x24000a2c
 8000d68:	40028000 	.word	0x40028000
 8000d6c:	24000838 	.word	0x24000838
 8000d70:	240007d8 	.word	0x240007d8
 8000d74:	24000a9c 	.word	0x24000a9c

08000d78 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_TIM16_Init+0x44>)
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <MX_TIM16_Init+0x48>)
 8000d80:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 96-1;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_TIM16_Init+0x44>)
 8000d84:	225f      	movs	r2, #95	; 0x5f
 8000d86:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_TIM16_Init+0x44>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MX_TIM16_Init+0x44>)
 8000d90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d94:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_TIM16_Init+0x44>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <MX_TIM16_Init+0x44>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_TIM16_Init+0x44>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <MX_TIM16_Init+0x44>)
 8000daa:	f005 fcd9 	bl	8006760 <HAL_TIM_Base_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000db4:	f000 f960 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	24000ad0 	.word	0x24000ad0
 8000dc0:	40014400 	.word	0x40014400

08000dc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dc8:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dca:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <MX_USART3_UART_Init+0x94>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dce:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e0c:	4811      	ldr	r0, [pc, #68]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e0e:	f005 fdc7 	bl	80069a0 <HAL_UART_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e18:	f000 f92e 	bl	8001078 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	480d      	ldr	r0, [pc, #52]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e20:	f006 fd61 	bl	80078e6 <HAL_UARTEx_SetTxFifoThreshold>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e2a:	f000 f925 	bl	8001078 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4808      	ldr	r0, [pc, #32]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e32:	f006 fd96 	bl	8007962 <HAL_UARTEx_SetRxFifoThreshold>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e3c:	f000 f91c 	bl	8001078 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e42:	f006 fd17 	bl	8007874 <HAL_UARTEx_DisableFifoMode>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e4c:	f000 f914 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2400097c 	.word	0x2400097c
 8000e58:	40004800 	.word	0x40004800

08000e5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08c      	sub	sp, #48	; 0x30
 8000e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	4b6b      	ldr	r3, [pc, #428]	; (8001020 <MX_GPIO_Init+0x1c4>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e78:	4a69      	ldr	r2, [pc, #420]	; (8001020 <MX_GPIO_Init+0x1c4>)
 8000e7a:	f043 0304 	orr.w	r3, r3, #4
 8000e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e82:	4b67      	ldr	r3, [pc, #412]	; (8001020 <MX_GPIO_Init+0x1c4>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
 8000e8e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e90:	4b63      	ldr	r3, [pc, #396]	; (8001020 <MX_GPIO_Init+0x1c4>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e96:	4a62      	ldr	r2, [pc, #392]	; (8001020 <MX_GPIO_Init+0x1c4>)
 8000e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea0:	4b5f      	ldr	r3, [pc, #380]	; (8001020 <MX_GPIO_Init+0x1c4>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	4b5c      	ldr	r3, [pc, #368]	; (8001020 <MX_GPIO_Init+0x1c4>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb4:	4a5a      	ldr	r2, [pc, #360]	; (8001020 <MX_GPIO_Init+0x1c4>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ebe:	4b58      	ldr	r3, [pc, #352]	; (8001020 <MX_GPIO_Init+0x1c4>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ecc:	4b54      	ldr	r3, [pc, #336]	; (8001020 <MX_GPIO_Init+0x1c4>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed2:	4a53      	ldr	r2, [pc, #332]	; (8001020 <MX_GPIO_Init+0x1c4>)
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000edc:	4b50      	ldr	r3, [pc, #320]	; (8001020 <MX_GPIO_Init+0x1c4>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eea:	4b4d      	ldr	r3, [pc, #308]	; (8001020 <MX_GPIO_Init+0x1c4>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef0:	4a4b      	ldr	r2, [pc, #300]	; (8001020 <MX_GPIO_Init+0x1c4>)
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efa:	4b49      	ldr	r3, [pc, #292]	; (8001020 <MX_GPIO_Init+0x1c4>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f00:	f003 0308 	and.w	r3, r3, #8
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f08:	4b45      	ldr	r3, [pc, #276]	; (8001020 <MX_GPIO_Init+0x1c4>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0e:	4a44      	ldr	r2, [pc, #272]	; (8001020 <MX_GPIO_Init+0x1c4>)
 8000f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f18:	4b41      	ldr	r3, [pc, #260]	; (8001020 <MX_GPIO_Init+0x1c4>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f26:	4b3e      	ldr	r3, [pc, #248]	; (8001020 <MX_GPIO_Init+0x1c4>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2c:	4a3c      	ldr	r2, [pc, #240]	; (8001020 <MX_GPIO_Init+0x1c4>)
 8000f2e:	f043 0310 	orr.w	r3, r3, #16
 8000f32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f36:	4b3a      	ldr	r3, [pc, #232]	; (8001020 <MX_GPIO_Init+0x1c4>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3c:	f003 0310 	and.w	r3, r3, #16
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f244 0101 	movw	r1, #16385	; 0x4001
 8000f4a:	4836      	ldr	r0, [pc, #216]	; (8001024 <MX_GPIO_Init+0x1c8>)
 8000f4c:	f001 fc20 	bl	8002790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f56:	4834      	ldr	r0, [pc, #208]	; (8001028 <MX_GPIO_Init+0x1cc>)
 8000f58:	f001 fc1a 	bl	8002790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2140      	movs	r1, #64	; 0x40
 8000f60:	4832      	ldr	r0, [pc, #200]	; (800102c <MX_GPIO_Init+0x1d0>)
 8000f62:	f001 fc15 	bl	8002790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2102      	movs	r1, #2
 8000f6a:	4831      	ldr	r0, [pc, #196]	; (8001030 <MX_GPIO_Init+0x1d4>)
 8000f6c:	f001 fc10 	bl	8002790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	4619      	mov	r1, r3
 8000f84:	482b      	ldr	r0, [pc, #172]	; (8001034 <MX_GPIO_Init+0x1d8>)
 8000f86:	f001 fa53 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000f8a:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4820      	ldr	r0, [pc, #128]	; (8001024 <MX_GPIO_Init+0x1c8>)
 8000fa4:	f001 fa44 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4819      	ldr	r0, [pc, #100]	; (8001028 <MX_GPIO_Init+0x1cc>)
 8000fc2:	f001 fa35 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fc6:	2340      	movs	r3, #64	; 0x40
 8000fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4813      	ldr	r0, [pc, #76]	; (800102c <MX_GPIO_Init+0x1d0>)
 8000fde:	f001 fa27 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000fe2:	2380      	movs	r3, #128	; 0x80
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_GPIO_Init+0x1dc>)
 8000fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480d      	ldr	r0, [pc, #52]	; (800102c <MX_GPIO_Init+0x1d0>)
 8000ff6:	f001 fa1b 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	4807      	ldr	r0, [pc, #28]	; (8001030 <MX_GPIO_Init+0x1d4>)
 8001012:	f001 fa0d 	bl	8002430 <HAL_GPIO_Init>

}
 8001016:	bf00      	nop
 8001018:	3730      	adds	r7, #48	; 0x30
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	58024400 	.word	0x58024400
 8001024:	58020400 	.word	0x58020400
 8001028:	58020c00 	.word	0x58020c00
 800102c:	58021800 	.word	0x58021800
 8001030:	58021000 	.word	0x58021000
 8001034:	58020800 	.word	0x58020800
 8001038:	11110000 	.word	0x11110000

0800103c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	e009      	b.n	8001066 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	60ba      	str	r2, [r7, #8]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fb78 	bl	8000750 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	3301      	adds	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	429a      	cmp	r2, r3
 800106c:	dbf1      	blt.n	8001052 <_write+0x16>
  return len;
 800106e:	687b      	ldr	r3, [r7, #4]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001082:	4802      	ldr	r0, [pc, #8]	; (800108c <Error_Handler+0x14>)
 8001084:	f001 fb84 	bl	8002790 <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	58020400 	.word	0x58020400

08001090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_MspInit+0x30>)
 8001098:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800109c:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <HAL_MspInit+0x30>)
 800109e:	f043 0302 	orr.w	r3, r3, #2
 80010a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_MspInit+0x30>)
 80010a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	58024400 	.word	0x58024400

080010c4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <HAL_CRC_MspInit+0x3c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d10e      	bne.n	80010f4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_CRC_MspInit+0x40>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010dc:	4a09      	ldr	r2, [pc, #36]	; (8001104 <HAL_CRC_MspInit+0x40>)
 80010de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <HAL_CRC_MspInit+0x40>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	58024c00 	.word	0x58024c00
 8001104:	58024400 	.word	0x58024400

08001108 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08e      	sub	sp, #56	; 0x38
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a59      	ldr	r2, [pc, #356]	; (800128c <HAL_ETH_MspInit+0x184>)
 8001126:	4293      	cmp	r3, r2
 8001128:	f040 80ab 	bne.w	8001282 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800112c:	4b58      	ldr	r3, [pc, #352]	; (8001290 <HAL_ETH_MspInit+0x188>)
 800112e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001132:	4a57      	ldr	r2, [pc, #348]	; (8001290 <HAL_ETH_MspInit+0x188>)
 8001134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001138:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800113c:	4b54      	ldr	r3, [pc, #336]	; (8001290 <HAL_ETH_MspInit+0x188>)
 800113e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001146:	623b      	str	r3, [r7, #32]
 8001148:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800114a:	4b51      	ldr	r3, [pc, #324]	; (8001290 <HAL_ETH_MspInit+0x188>)
 800114c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001150:	4a4f      	ldr	r2, [pc, #316]	; (8001290 <HAL_ETH_MspInit+0x188>)
 8001152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001156:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800115a:	4b4d      	ldr	r3, [pc, #308]	; (8001290 <HAL_ETH_MspInit+0x188>)
 800115c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001164:	61fb      	str	r3, [r7, #28]
 8001166:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001168:	4b49      	ldr	r3, [pc, #292]	; (8001290 <HAL_ETH_MspInit+0x188>)
 800116a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800116e:	4a48      	ldr	r2, [pc, #288]	; (8001290 <HAL_ETH_MspInit+0x188>)
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001178:	4b45      	ldr	r3, [pc, #276]	; (8001290 <HAL_ETH_MspInit+0x188>)
 800117a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	61bb      	str	r3, [r7, #24]
 8001184:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	4b42      	ldr	r3, [pc, #264]	; (8001290 <HAL_ETH_MspInit+0x188>)
 8001188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118c:	4a40      	ldr	r2, [pc, #256]	; (8001290 <HAL_ETH_MspInit+0x188>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001196:	4b3e      	ldr	r3, [pc, #248]	; (8001290 <HAL_ETH_MspInit+0x188>)
 8001198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	4b3a      	ldr	r3, [pc, #232]	; (8001290 <HAL_ETH_MspInit+0x188>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011aa:	4a39      	ldr	r2, [pc, #228]	; (8001290 <HAL_ETH_MspInit+0x188>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b4:	4b36      	ldr	r3, [pc, #216]	; (8001290 <HAL_ETH_MspInit+0x188>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	4b33      	ldr	r3, [pc, #204]	; (8001290 <HAL_ETH_MspInit+0x188>)
 80011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c8:	4a31      	ldr	r2, [pc, #196]	; (8001290 <HAL_ETH_MspInit+0x188>)
 80011ca:	f043 0302 	orr.w	r3, r3, #2
 80011ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d2:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <HAL_ETH_MspInit+0x188>)
 80011d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011e0:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <HAL_ETH_MspInit+0x188>)
 80011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e6:	4a2a      	ldr	r2, [pc, #168]	; (8001290 <HAL_ETH_MspInit+0x188>)
 80011e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f0:	4b27      	ldr	r3, [pc, #156]	; (8001290 <HAL_ETH_MspInit+0x188>)
 80011f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80011fe:	2332      	movs	r3, #50	; 0x32
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800120e:	230b      	movs	r3, #11
 8001210:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001216:	4619      	mov	r1, r3
 8001218:	481e      	ldr	r0, [pc, #120]	; (8001294 <HAL_ETH_MspInit+0x18c>)
 800121a:	f001 f909 	bl	8002430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800121e:	2386      	movs	r3, #134	; 0x86
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800122e:	230b      	movs	r3, #11
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001236:	4619      	mov	r1, r3
 8001238:	4817      	ldr	r0, [pc, #92]	; (8001298 <HAL_ETH_MspInit+0x190>)
 800123a:	f001 f8f9 	bl	8002430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800123e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001250:	230b      	movs	r3, #11
 8001252:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001258:	4619      	mov	r1, r3
 800125a:	4810      	ldr	r0, [pc, #64]	; (800129c <HAL_ETH_MspInit+0x194>)
 800125c:	f001 f8e8 	bl	8002430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001260:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001272:	230b      	movs	r3, #11
 8001274:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127a:	4619      	mov	r1, r3
 800127c:	4808      	ldr	r0, [pc, #32]	; (80012a0 <HAL_ETH_MspInit+0x198>)
 800127e:	f001 f8d7 	bl	8002430 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3738      	adds	r7, #56	; 0x38
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40028000 	.word	0x40028000
 8001290:	58024400 	.word	0x58024400
 8001294:	58020800 	.word	0x58020800
 8001298:	58020000 	.word	0x58020000
 800129c:	58020400 	.word	0x58020400
 80012a0:	58021800 	.word	0x58021800

080012a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <HAL_TIM_Base_MspInit+0x3c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d10e      	bne.n	80012d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_TIM_Base_MspInit+0x40>)
 80012b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012bc:	4a09      	ldr	r2, [pc, #36]	; (80012e4 <HAL_TIM_Base_MspInit+0x40>)
 80012be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <HAL_TIM_Base_MspInit+0x40>)
 80012c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	40014400 	.word	0x40014400
 80012e4:	58024400 	.word	0x58024400

080012e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a1a      	ldr	r2, [pc, #104]	; (8001370 <HAL_UART_MspInit+0x88>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d12e      	bne.n	8001368 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <HAL_UART_MspInit+0x8c>)
 800130c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001310:	4a18      	ldr	r2, [pc, #96]	; (8001374 <HAL_UART_MspInit+0x8c>)
 8001312:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001316:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_UART_MspInit+0x8c>)
 800131c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_UART_MspInit+0x8c>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132e:	4a11      	ldr	r2, [pc, #68]	; (8001374 <HAL_UART_MspInit+0x8c>)
 8001330:	f043 0308 	orr.w	r3, r3, #8
 8001334:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001338:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <HAL_UART_MspInit+0x8c>)
 800133a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001346:	f44f 7340 	mov.w	r3, #768	; 0x300
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001358:	2307      	movs	r3, #7
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <HAL_UART_MspInit+0x90>)
 8001364:	f001 f864 	bl	8002430 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	; 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40004800 	.word	0x40004800
 8001374:	58024400 	.word	0x58024400
 8001378:	58020c00 	.word	0x58020c00

0800137c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <MemManage_Handler+0x4>

08001396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d0:	f000 f9bc 	bl	800174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <OTG_FS_IRQHandler+0x10>)
 80013de:	f001 fc7f 	bl	8002ce0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	24001854 	.word	0x24001854

080013ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	e00a      	b.n	8001414 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013fe:	f3af 8000 	nop.w
 8001402:	4601      	mov	r1, r0
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	60ba      	str	r2, [r7, #8]
 800140a:	b2ca      	uxtb	r2, r1
 800140c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3301      	adds	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	dbf0      	blt.n	80013fe <_read+0x12>
	}

return len;
 800141c:	687b      	ldr	r3, [r7, #4]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
	return -1;
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800144e:	605a      	str	r2, [r3, #4]
	return 0;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <_isatty>:

int _isatty(int file)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
	return 1;
 8001466:	2301      	movs	r3, #1
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
	return 0;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001498:	4a14      	ldr	r2, [pc, #80]	; (80014ec <_sbrk+0x5c>)
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <_sbrk+0x60>)
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d102      	bne.n	80014b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <_sbrk+0x64>)
 80014ae:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <_sbrk+0x68>)
 80014b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <_sbrk+0x64>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d207      	bcs.n	80014d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c0:	f00e fcd0 	bl	800fe64 <__errno>
 80014c4:	4602      	mov	r2, r0
 80014c6:	230c      	movs	r3, #12
 80014c8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
 80014ce:	e009      	b.n	80014e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <_sbrk+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <_sbrk+0x64>)
 80014e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014e2:	68fb      	ldr	r3, [r7, #12]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	24080000 	.word	0x24080000
 80014f0:	00004000 	.word	0x00004000
 80014f4:	240008b8 	.word	0x240008b8
 80014f8:	24001b20 	.word	0x24001b20

080014fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001500:	4b39      	ldr	r3, [pc, #228]	; (80015e8 <SystemInit+0xec>)
 8001502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001506:	4a38      	ldr	r2, [pc, #224]	; (80015e8 <SystemInit+0xec>)
 8001508:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800150c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001510:	4b36      	ldr	r3, [pc, #216]	; (80015ec <SystemInit+0xf0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 030f 	and.w	r3, r3, #15
 8001518:	2b06      	cmp	r3, #6
 800151a:	d807      	bhi.n	800152c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800151c:	4b33      	ldr	r3, [pc, #204]	; (80015ec <SystemInit+0xf0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f023 030f 	bic.w	r3, r3, #15
 8001524:	4a31      	ldr	r2, [pc, #196]	; (80015ec <SystemInit+0xf0>)
 8001526:	f043 0307 	orr.w	r3, r3, #7
 800152a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800152c:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <SystemInit+0xf4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a2f      	ldr	r2, [pc, #188]	; (80015f0 <SystemInit+0xf4>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001538:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <SystemInit+0xf4>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800153e:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <SystemInit+0xf4>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	492b      	ldr	r1, [pc, #172]	; (80015f0 <SystemInit+0xf4>)
 8001544:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <SystemInit+0xf8>)
 8001546:	4013      	ands	r3, r2
 8001548:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800154a:	4b28      	ldr	r3, [pc, #160]	; (80015ec <SystemInit+0xf0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	2b07      	cmp	r3, #7
 8001554:	d907      	bls.n	8001566 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001556:	4b25      	ldr	r3, [pc, #148]	; (80015ec <SystemInit+0xf0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 030f 	bic.w	r3, r3, #15
 800155e:	4a23      	ldr	r2, [pc, #140]	; (80015ec <SystemInit+0xf0>)
 8001560:	f043 0307 	orr.w	r3, r3, #7
 8001564:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <SystemInit+0xf4>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800156c:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <SystemInit+0xf4>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001572:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <SystemInit+0xf4>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <SystemInit+0xf4>)
 800157a:	4a1f      	ldr	r2, [pc, #124]	; (80015f8 <SystemInit+0xfc>)
 800157c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <SystemInit+0xf4>)
 8001580:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <SystemInit+0x100>)
 8001582:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001584:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <SystemInit+0xf4>)
 8001586:	4a1e      	ldr	r2, [pc, #120]	; (8001600 <SystemInit+0x104>)
 8001588:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <SystemInit+0xf4>)
 800158c:	2200      	movs	r2, #0
 800158e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001590:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <SystemInit+0xf4>)
 8001592:	4a1b      	ldr	r2, [pc, #108]	; (8001600 <SystemInit+0x104>)
 8001594:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <SystemInit+0xf4>)
 8001598:	2200      	movs	r2, #0
 800159a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <SystemInit+0xf4>)
 800159e:	4a18      	ldr	r2, [pc, #96]	; (8001600 <SystemInit+0x104>)
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <SystemInit+0xf4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <SystemInit+0xf4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <SystemInit+0xf4>)
 80015ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <SystemInit+0xf4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <SystemInit+0x108>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <SystemInit+0x10c>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015c6:	d202      	bcs.n	80015ce <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015c8:	4b10      	ldr	r3, [pc, #64]	; (800160c <SystemInit+0x110>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <SystemInit+0x114>)
 80015d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015d4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <SystemInit+0xec>)
 80015d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015dc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00
 80015ec:	52002000 	.word	0x52002000
 80015f0:	58024400 	.word	0x58024400
 80015f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80015f8:	02020200 	.word	0x02020200
 80015fc:	01ff0000 	.word	0x01ff0000
 8001600:	01010280 	.word	0x01010280
 8001604:	5c001000 	.word	0x5c001000
 8001608:	ffff0000 	.word	0xffff0000
 800160c:	51008108 	.word	0x51008108
 8001610:	52004000 	.word	0x52004000

08001614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800164c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001618:	f7ff ff70 	bl	80014fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800161c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800161e:	e003      	b.n	8001628 <LoopCopyDataInit>

08001620 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001622:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001624:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001626:	3104      	adds	r1, #4

08001628 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001628:	480a      	ldr	r0, [pc, #40]	; (8001654 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800162c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800162e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001630:	d3f6      	bcc.n	8001620 <CopyDataInit>
  ldr  r2, =_sbss
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001634:	e002      	b.n	800163c <LoopFillZerobss>

08001636 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001636:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001638:	f842 3b04 	str.w	r3, [r2], #4

0800163c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800163e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001640:	d3f9      	bcc.n	8001636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001642:	f00e fc15 	bl	800fe70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001646:	f7ff f8ab 	bl	80007a0 <main>
  bx  lr    
 800164a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800164c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001650:	080146d0 	.word	0x080146d0
  ldr  r0, =_sdata
 8001654:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001658:	240007d8 	.word	0x240007d8
  ldr  r2, =_sbss
 800165c:	24000898 	.word	0x24000898
  ldr  r3, = _ebss
 8001660:	24001b1c 	.word	0x24001b1c

08001664 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC3_IRQHandler>
	...

08001668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166e:	2003      	movs	r0, #3
 8001670:	f000 f99e 	bl	80019b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001674:	f003 fba6 	bl	8004dc4 <HAL_RCC_GetSysClockFreq>
 8001678:	4601      	mov	r1, r0
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_Init+0x68>)
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	0a1b      	lsrs	r3, r3, #8
 8001680:	f003 030f 	and.w	r3, r3, #15
 8001684:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <HAL_Init+0x6c>)
 8001686:	5cd3      	ldrb	r3, [r2, r3]
 8001688:	f003 031f 	and.w	r3, r3, #31
 800168c:	fa21 f303 	lsr.w	r3, r1, r3
 8001690:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_Init+0x68>)
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_Init+0x6c>)
 800169c:	5cd3      	ldrb	r3, [r2, r3]
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	fa22 f303 	lsr.w	r3, r2, r3
 80016a8:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <HAL_Init+0x70>)
 80016aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016ac:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <HAL_Init+0x74>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016b2:	2000      	movs	r0, #0
 80016b4:	f000 f814 	bl	80016e0 <HAL_InitTick>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e002      	b.n	80016c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016c2:	f7ff fce5 	bl	8001090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	58024400 	.word	0x58024400
 80016d4:	08013dbc 	.word	0x08013dbc
 80016d8:	24000004 	.word	0x24000004
 80016dc:	24000000 	.word	0x24000000

080016e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_InitTick+0x60>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e021      	b.n	8001738 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <HAL_InitTick+0x64>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_InitTick+0x60>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f983 	bl	8001a16 <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e00e      	b.n	8001738 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d80a      	bhi.n	8001736 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f000 f94d 	bl	80019c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800172c:	4a06      	ldr	r2, [pc, #24]	; (8001748 <HAL_InitTick+0x68>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2400000c 	.word	0x2400000c
 8001744:	24000000 	.word	0x24000000
 8001748:	24000008 	.word	0x24000008

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	2400000c 	.word	0x2400000c
 8001770:	24000b1c 	.word	0x24000b1c

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	24000b1c 	.word	0x24000b1c

0800178c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff ffee 	bl	8001774 <HAL_GetTick>
 8001798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a4:	d005      	beq.n	80017b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_Delay+0x40>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017b2:	bf00      	nop
 80017b4:	f7ff ffde 	bl	8001774 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d8f7      	bhi.n	80017b4 <HAL_Delay+0x28>
  {
  }
}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	2400000c 	.word	0x2400000c

080017d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <HAL_GetREVID+0x14>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	0c1b      	lsrs	r3, r3, #16
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	5c001000 	.word	0x5c001000

080017e8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80017f8:	4904      	ldr	r1, [pc, #16]	; (800180c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	58000400 	.word	0x58000400

08001810 <__NVIC_SetPriorityGrouping>:
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <__NVIC_SetPriorityGrouping+0x40>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800182c:	4013      	ands	r3, r2
 800182e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 800183a:	4313      	orrs	r3, r2
 800183c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183e:	4a04      	ldr	r2, [pc, #16]	; (8001850 <__NVIC_SetPriorityGrouping+0x40>)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	60d3      	str	r3, [r2, #12]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00
 8001854:	05fa0000 	.word	0x05fa0000

08001858 <__NVIC_GetPriorityGrouping>:
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <__NVIC_GetPriorityGrouping+0x18>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	f003 0307 	and.w	r3, r3, #7
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_EnableIRQ>:
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800187e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001882:	2b00      	cmp	r3, #0
 8001884:	db0b      	blt.n	800189e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	f003 021f 	and.w	r2, r3, #31
 800188c:	4907      	ldr	r1, [pc, #28]	; (80018ac <__NVIC_EnableIRQ+0x38>)
 800188e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	2001      	movs	r0, #1
 8001896:	fa00 f202 	lsl.w	r2, r0, r2
 800189a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000e100 	.word	0xe000e100

080018b0 <__NVIC_SetPriority>:
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	6039      	str	r1, [r7, #0]
 80018ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	db0a      	blt.n	80018da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	490c      	ldr	r1, [pc, #48]	; (80018fc <__NVIC_SetPriority+0x4c>)
 80018ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ce:	0112      	lsls	r2, r2, #4
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	440b      	add	r3, r1
 80018d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018d8:	e00a      	b.n	80018f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4908      	ldr	r1, [pc, #32]	; (8001900 <__NVIC_SetPriority+0x50>)
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	3b04      	subs	r3, #4
 80018e8:	0112      	lsls	r2, r2, #4
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	440b      	add	r3, r1
 80018ee:	761a      	strb	r2, [r3, #24]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000e100 	.word	0xe000e100
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <NVIC_EncodePriority>:
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	; 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f1c3 0307 	rsb	r3, r3, #7
 800191e:	2b04      	cmp	r3, #4
 8001920:	bf28      	it	cs
 8001922:	2304      	movcs	r3, #4
 8001924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3304      	adds	r3, #4
 800192a:	2b06      	cmp	r3, #6
 800192c:	d902      	bls.n	8001934 <NVIC_EncodePriority+0x30>
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3b03      	subs	r3, #3
 8001932:	e000      	b.n	8001936 <NVIC_EncodePriority+0x32>
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	f04f 32ff 	mov.w	r2, #4294967295
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43da      	mvns	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	401a      	ands	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800194c:	f04f 31ff 	mov.w	r1, #4294967295
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	43d9      	mvns	r1, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	4313      	orrs	r3, r2
}
 800195e:	4618      	mov	r0, r3
 8001960:	3724      	adds	r7, #36	; 0x24
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <SysTick_Config>:
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800197c:	d301      	bcc.n	8001982 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800197e:	2301      	movs	r3, #1
 8001980:	e00f      	b.n	80019a2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <SysTick_Config+0x40>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198a:	210f      	movs	r1, #15
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f7ff ff8e 	bl	80018b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <SysTick_Config+0x40>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199a:	4b04      	ldr	r3, [pc, #16]	; (80019ac <SysTick_Config+0x40>)
 800199c:	2207      	movs	r2, #7
 800199e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	e000e010 	.word	0xe000e010

080019b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff ff29 	bl	8001810 <__NVIC_SetPriorityGrouping>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019d4:	f7ff ff40 	bl	8001858 <__NVIC_GetPriorityGrouping>
 80019d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	6978      	ldr	r0, [r7, #20]
 80019e0:	f7ff ff90 	bl	8001904 <NVIC_EncodePriority>
 80019e4:	4602      	mov	r2, r0
 80019e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff5f 	bl	80018b0 <__NVIC_SetPriority>
}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff33 	bl	8001874 <__NVIC_EnableIRQ>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ffa4 	bl	800196c <SysTick_Config>
 8001a24:	4603      	mov	r3, r0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e054      	b.n	8001aec <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7f5b      	ldrb	r3, [r3, #29]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d105      	bne.n	8001a58 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff fb36 	bl	80010c4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	791b      	ldrb	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10c      	bne.n	8001a80 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a22      	ldr	r2, [pc, #136]	; (8001af4 <HAL_CRC_Init+0xc4>)
 8001a6c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0218 	bic.w	r2, r2, #24
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	e00c      	b.n	8001a9a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6899      	ldr	r1, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f834 	bl	8001af8 <HAL_CRCEx_Polynomial_Set>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e028      	b.n	8001aec <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	795b      	ldrb	r3, [r3, #5]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d105      	bne.n	8001aae <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aaa:	611a      	str	r2, [r3, #16]
 8001aac:	e004      	b.n	8001ab8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6912      	ldr	r2, [r2, #16]
 8001ab6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699a      	ldr	r2, [r3, #24]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	04c11db7 	.word	0x04c11db7

08001af8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001b08:	231f      	movs	r3, #31
 8001b0a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001b0c:	bf00      	nop
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1e5a      	subs	r2, r3, #1
 8001b12:	613a      	str	r2, [r7, #16]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d009      	beq.n	8001b2c <HAL_CRCEx_Polynomial_Set+0x34>
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	f003 031f 	and.w	r3, r3, #31
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b18      	cmp	r3, #24
 8001b30:	d846      	bhi.n	8001bc0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001b32:	a201      	add	r2, pc, #4	; (adr r2, 8001b38 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b38:	08001bc7 	.word	0x08001bc7
 8001b3c:	08001bc1 	.word	0x08001bc1
 8001b40:	08001bc1 	.word	0x08001bc1
 8001b44:	08001bc1 	.word	0x08001bc1
 8001b48:	08001bc1 	.word	0x08001bc1
 8001b4c:	08001bc1 	.word	0x08001bc1
 8001b50:	08001bc1 	.word	0x08001bc1
 8001b54:	08001bc1 	.word	0x08001bc1
 8001b58:	08001bb5 	.word	0x08001bb5
 8001b5c:	08001bc1 	.word	0x08001bc1
 8001b60:	08001bc1 	.word	0x08001bc1
 8001b64:	08001bc1 	.word	0x08001bc1
 8001b68:	08001bc1 	.word	0x08001bc1
 8001b6c:	08001bc1 	.word	0x08001bc1
 8001b70:	08001bc1 	.word	0x08001bc1
 8001b74:	08001bc1 	.word	0x08001bc1
 8001b78:	08001ba9 	.word	0x08001ba9
 8001b7c:	08001bc1 	.word	0x08001bc1
 8001b80:	08001bc1 	.word	0x08001bc1
 8001b84:	08001bc1 	.word	0x08001bc1
 8001b88:	08001bc1 	.word	0x08001bc1
 8001b8c:	08001bc1 	.word	0x08001bc1
 8001b90:	08001bc1 	.word	0x08001bc1
 8001b94:	08001bc1 	.word	0x08001bc1
 8001b98:	08001b9d 	.word	0x08001b9d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	2b06      	cmp	r3, #6
 8001ba0:	d913      	bls.n	8001bca <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001ba6:	e010      	b.n	8001bca <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2b07      	cmp	r3, #7
 8001bac:	d90f      	bls.n	8001bce <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001bb2:	e00c      	b.n	8001bce <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	2b0f      	cmp	r3, #15
 8001bb8:	d90b      	bls.n	8001bd2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001bbe:	e008      	b.n	8001bd2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8001bc4:	e006      	b.n	8001bd4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001bc6:	bf00      	nop
 8001bc8:	e004      	b.n	8001bd4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001bca:	bf00      	nop
 8001bcc:	e002      	b.n	8001bd4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001bce:	bf00      	nop
 8001bd0:	e000      	b.n	8001bd4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001bd2:	bf00      	nop
  }
  if (status == HAL_OK)
 8001bd4:	7dfb      	ldrb	r3, [r7, #23]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10d      	bne.n	8001bf6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f023 0118 	bic.w	r1, r3, #24
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	371c      	adds	r7, #28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e0c6      	b.n	8001da4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d102      	bne.n	8001c24 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fa72 	bl	8001108 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2223      	movs	r2, #35	; 0x23
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2a:	4b60      	ldr	r3, [pc, #384]	; (8001dac <HAL_ETH_Init+0x1a8>)
 8001c2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c30:	4a5e      	ldr	r2, [pc, #376]	; (8001dac <HAL_ETH_Init+0x1a8>)
 8001c32:	f043 0302 	orr.w	r3, r3, #2
 8001c36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c3a:	4b5c      	ldr	r3, [pc, #368]	; (8001dac <HAL_ETH_Init+0x1a8>)
 8001c3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	7a1b      	ldrb	r3, [r3, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d103      	bne.n	8001c58 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001c50:	2000      	movs	r0, #0
 8001c52:	f7ff fdc9 	bl	80017e8 <HAL_SYSCFG_ETHInterfaceSelect>
 8001c56:	e003      	b.n	8001c60 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001c58:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001c5c:	f7ff fdc4 	bl	80017e8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c78:	f7ff fd7c 	bl	8001774 <HAL_GetTick>
 8001c7c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001c7e:	e00f      	b.n	8001ca0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001c80:	f7ff fd78 	bl	8001774 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c8e:	d907      	bls.n	8001ca0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2204      	movs	r2, #4
 8001c94:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	22e0      	movs	r2, #224	; 0xe0
 8001c9a:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e081      	b.n	8001da4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1e6      	bne.n	8001c80 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 fac0 	bl	8002238 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001cb8:	f003 f9f6 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	4b3c      	ldr	r3, [pc, #240]	; (8001db0 <HAL_ETH_Init+0x1ac>)
 8001cc0:	fba3 2302 	umull	r2, r3, r3, r2
 8001cc4:	0c9a      	lsrs	r2, r3, #18
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	3a01      	subs	r2, #1
 8001ccc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 fa13 	bl	80020fc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001cec:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001cf0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	22e0      	movs	r2, #224	; 0xe0
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e04a      	b.n	8001da4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d16:	4413      	add	r3, r2
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <HAL_ETH_Init+0x1b0>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6952      	ldr	r2, [r2, #20]
 8001d22:	0052      	lsls	r2, r2, #1
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	6809      	ldr	r1, [r1, #0]
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d2e:	440b      	add	r3, r1
 8001d30:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fad8 	bl	80022e8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 fb1c 	bl	8002376 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	3305      	adds	r3, #5
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	021a      	lsls	r2, r3, #8
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	3303      	adds	r3, #3
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	061a      	lsls	r2, r3, #24
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	041b      	lsls	r3, r3, #16
 8001d70:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	3301      	adds	r3, #1
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d7c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d8a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d8c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2210      	movs	r2, #16
 8001d9a:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2210      	movs	r2, #16
 8001da0:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	58024400 	.word	0x58024400
 8001db0:	431bde83 	.word	0x431bde83
 8001db4:	ffff8001 	.word	0xffff8001

08001db8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001dca:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	791b      	ldrb	r3, [r3, #4]
 8001dd0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001dd2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	7b1b      	ldrb	r3, [r3, #12]
 8001dd8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001dda:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	7b5b      	ldrb	r3, [r3, #13]
 8001de0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001de2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	7b9b      	ldrb	r3, [r3, #14]
 8001de8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001dea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	7bdb      	ldrb	r3, [r3, #15]
 8001df0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001df2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	7c12      	ldrb	r2, [r2, #16]
 8001df8:	2a00      	cmp	r2, #0
 8001dfa:	d102      	bne.n	8001e02 <ETH_SetMACConfig+0x4a>
 8001dfc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e00:	e000      	b.n	8001e04 <ETH_SetMACConfig+0x4c>
 8001e02:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001e04:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	7c52      	ldrb	r2, [r2, #17]
 8001e0a:	2a00      	cmp	r2, #0
 8001e0c:	d102      	bne.n	8001e14 <ETH_SetMACConfig+0x5c>
 8001e0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e12:	e000      	b.n	8001e16 <ETH_SetMACConfig+0x5e>
 8001e14:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001e16:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	7c9b      	ldrb	r3, [r3, #18]
 8001e1c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001e1e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001e24:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001e2a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	7f1b      	ldrb	r3, [r3, #28]
 8001e30:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001e32:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	7f5b      	ldrb	r3, [r3, #29]
 8001e38:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001e3a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	7f92      	ldrb	r2, [r2, #30]
 8001e40:	2a00      	cmp	r2, #0
 8001e42:	d102      	bne.n	8001e4a <ETH_SetMACConfig+0x92>
 8001e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e48:	e000      	b.n	8001e4c <ETH_SetMACConfig+0x94>
 8001e4a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001e4c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	7fdb      	ldrb	r3, [r3, #31]
 8001e52:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001e54:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001e5c:	2a00      	cmp	r2, #0
 8001e5e:	d102      	bne.n	8001e66 <ETH_SetMACConfig+0xae>
 8001e60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e64:	e000      	b.n	8001e68 <ETH_SetMACConfig+0xb0>
 8001e66:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001e68:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001e6e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e76:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001e78:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b56      	ldr	r3, [pc, #344]	; (8001fe4 <ETH_SetMACConfig+0x22c>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	68f9      	ldr	r1, [r7, #12]
 8001e92:	430b      	orrs	r3, r1
 8001e94:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ea2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001ea4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001eac:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001eae:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001eb6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001eb8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001ec0:	2a00      	cmp	r2, #0
 8001ec2:	d102      	bne.n	8001eca <ETH_SetMACConfig+0x112>
 8001ec4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ec8:	e000      	b.n	8001ecc <ETH_SetMACConfig+0x114>
 8001eca:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001ecc:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	4b42      	ldr	r3, [pc, #264]	; (8001fe8 <ETH_SetMACConfig+0x230>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	68f9      	ldr	r1, [r7, #12]
 8001ee6:	430b      	orrs	r3, r1
 8001ee8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ef0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	4b3a      	ldr	r3, [pc, #232]	; (8001fec <ETH_SetMACConfig+0x234>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	68f9      	ldr	r1, [r7, #12]
 8001f0a:	430b      	orrs	r3, r1
 8001f0c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f14:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001f1a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001f22:	2a00      	cmp	r2, #0
 8001f24:	d101      	bne.n	8001f2a <ETH_SetMACConfig+0x172>
 8001f26:	2280      	movs	r2, #128	; 0x80
 8001f28:	e000      	b.n	8001f2c <ETH_SetMACConfig+0x174>
 8001f2a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001f2c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f32:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001f34:	4313      	orrs	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f3e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001f42:	4013      	ands	r3, r2
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	68f9      	ldr	r1, [r7, #12]
 8001f4a:	430b      	orrs	r3, r1
 8001f4c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001f54:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001f5c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6a:	f023 0103 	bic.w	r1, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001f82:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001f9e:	2a00      	cmp	r2, #0
 8001fa0:	d101      	bne.n	8001fa6 <ETH_SetMACConfig+0x1ee>
 8001fa2:	2240      	movs	r2, #64	; 0x40
 8001fa4:	e000      	b.n	8001fa8 <ETH_SetMACConfig+0x1f0>
 8001fa6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001fa8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001fb0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001fb2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001fba:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001fc8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	00048083 	.word	0x00048083
 8001fe8:	c0f88000 	.word	0xc0f88000
 8001fec:	fffffef0 	.word	0xfffffef0

08001ff0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b38      	ldr	r3, [pc, #224]	; (80020e8 <ETH_SetDMAConfig+0xf8>)
 8002006:	4013      	ands	r3, r2
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	6809      	ldr	r1, [r1, #0]
 8002010:	431a      	orrs	r2, r3
 8002012:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002016:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	791b      	ldrb	r3, [r3, #4]
 800201c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002022:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	7b1b      	ldrb	r3, [r3, #12]
 8002028:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	f241 0304 	movw	r3, #4100	; 0x1004
 8002036:	4413      	add	r3, r2
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4b2c      	ldr	r3, [pc, #176]	; (80020ec <ETH_SetDMAConfig+0xfc>)
 800203c:	4013      	ands	r3, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6811      	ldr	r1, [r2, #0]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	431a      	orrs	r2, r3
 8002046:	f241 0304 	movw	r3, #4100	; 0x1004
 800204a:	440b      	add	r3, r1
 800204c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	7b5b      	ldrb	r3, [r3, #13]
 8002052:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002058:	4313      	orrs	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4b22      	ldr	r3, [pc, #136]	; (80020f0 <ETH_SetDMAConfig+0x100>)
 8002068:	4013      	ands	r3, r2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6811      	ldr	r1, [r2, #0]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	431a      	orrs	r2, r3
 8002072:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002076:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	7d1b      	ldrb	r3, [r3, #20]
 8002080:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002082:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	7f5b      	ldrb	r3, [r3, #29]
 8002088:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	f241 1304 	movw	r3, #4356	; 0x1104
 8002096:	4413      	add	r3, r2
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <ETH_SetDMAConfig+0x104>)
 800209c:	4013      	ands	r3, r2
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6811      	ldr	r1, [r2, #0]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	431a      	orrs	r2, r3
 80020a6:	f241 1304 	movw	r3, #4356	; 0x1104
 80020aa:	440b      	add	r3, r1
 80020ac:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	7f1b      	ldrb	r3, [r3, #28]
 80020b2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	f241 1308 	movw	r3, #4360	; 0x1108
 80020c4:	4413      	add	r3, r2
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <ETH_SetDMAConfig+0x108>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6811      	ldr	r1, [r2, #0]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	f241 1308 	movw	r3, #4360	; 0x1108
 80020d8:	440b      	add	r3, r1
 80020da:	601a      	str	r2, [r3, #0]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	ffff87fd 	.word	0xffff87fd
 80020ec:	ffff2ffe 	.word	0xffff2ffe
 80020f0:	fffec000 	.word	0xfffec000
 80020f4:	ffc0efef 	.word	0xffc0efef
 80020f8:	7fc0ffff 	.word	0x7fc0ffff

080020fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b0a4      	sub	sp, #144	; 0x90
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002104:	2301      	movs	r3, #1
 8002106:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800210a:	2300      	movs	r3, #0
 800210c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800211a:	2301      	movs	r3, #1
 800211c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002120:	2301      	movs	r3, #1
 8002122:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002126:	2301      	movs	r3, #1
 8002128:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002132:	2301      	movs	r3, #1
 8002134:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002138:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800213c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002144:	2300      	movs	r3, #0
 8002146:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002154:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002158:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002160:	2300      	movs	r3, #0
 8002162:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002164:	2301      	movs	r3, #1
 8002166:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002176:	2300      	movs	r3, #0
 8002178:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800217a:	2300      	movs	r3, #0
 800217c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800217e:	2300      	movs	r3, #0
 8002180:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800218e:	2301      	movs	r3, #1
 8002190:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002194:	2320      	movs	r3, #32
 8002196:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800219a:	2301      	movs	r3, #1
 800219c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80021a6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80021ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021b0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80021b8:	2302      	movs	r3, #2
 80021ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80021be:	2300      	movs	r3, #0
 80021c0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80021d0:	2301      	movs	r3, #1
 80021d2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80021d6:	2300      	movs	r3, #0
 80021d8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80021da:	2301      	movs	r3, #1
 80021dc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80021e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021e4:	4619      	mov	r1, r3
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff fde6 	bl	8001db8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021ec:	2301      	movs	r3, #1
 80021ee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80021f0:	2301      	movs	r3, #1
 80021f2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80021fe:	2300      	movs	r3, #0
 8002200:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002202:	2300      	movs	r3, #0
 8002204:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002206:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800220a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002210:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002214:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002216:	2300      	movs	r3, #0
 8002218:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800221c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002222:	f107 0308 	add.w	r3, r7, #8
 8002226:	4619      	mov	r1, r3
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff fee1 	bl	8001ff0 <ETH_SetDMAConfig>
}
 800222e:	bf00      	nop
 8002230:	3790      	adds	r7, #144	; 0x90
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002248:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002250:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002252:	f002 ff29 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 8002256:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	4a1e      	ldr	r2, [pc, #120]	; (80022d4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d908      	bls.n	8002272 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d804      	bhi.n	8002272 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	e027      	b.n	80022c2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d908      	bls.n	800228c <ETH_MAC_MDIO_ClkConfig+0x54>
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	4a17      	ldr	r2, [pc, #92]	; (80022dc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d804      	bhi.n	800228c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	e01a      	b.n	80022c2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	4a13      	ldr	r2, [pc, #76]	; (80022dc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d903      	bls.n	800229c <ETH_MAC_MDIO_ClkConfig+0x64>
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d911      	bls.n	80022c0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4a10      	ldr	r2, [pc, #64]	; (80022e0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d908      	bls.n	80022b6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4a0f      	ldr	r2, [pc, #60]	; (80022e4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d804      	bhi.n	80022b6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	e005      	b.n	80022c2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	e000      	b.n	80022c2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80022c0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80022cc:	bf00      	nop
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	01312cff 	.word	0x01312cff
 80022d8:	02160ebf 	.word	0x02160ebf
 80022dc:	039386ff 	.word	0x039386ff
 80022e0:	05f5e0ff 	.word	0x05f5e0ff
 80022e4:	08f0d17f 	.word	0x08f0d17f

080022e8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e01d      	b.n	8002332 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68d9      	ldr	r1, [r3, #12]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4613      	mov	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	440b      	add	r3, r1
 8002306:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2200      	movs	r2, #0
 8002312:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2200      	movs	r2, #0
 800231e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	3206      	adds	r2, #6
 8002328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	3301      	adds	r3, #1
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b03      	cmp	r3, #3
 8002336:	d9de      	bls.n	80022f6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	f241 132c 	movw	r3, #4396	; 0x112c
 8002346:	4413      	add	r3, r2
 8002348:	2203      	movs	r2, #3
 800234a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68d9      	ldr	r1, [r3, #12]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	f241 1314 	movw	r3, #4372	; 0x1114
 8002358:	4413      	add	r3, r2
 800235a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002368:	601a      	str	r2, [r3, #0]
}
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002376:	b480      	push	{r7}
 8002378:	b085      	sub	sp, #20
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	e024      	b.n	80023ce <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6919      	ldr	r1, [r3, #16]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4613      	mov	r3, r2
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	440b      	add	r3, r1
 8002394:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2200      	movs	r2, #0
 80023a0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2200      	movs	r2, #0
 80023ac:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2200      	movs	r2, #0
 80023b8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	330a      	adds	r3, #10
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	3301      	adds	r3, #1
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d9d7      	bls.n	8002384 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	f241 1330 	movw	r3, #4400	; 0x1130
 80023fa:	4413      	add	r3, r2
 80023fc:	2203      	movs	r2, #3
 80023fe:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6919      	ldr	r1, [r3, #16]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	f241 131c 	movw	r3, #4380	; 0x111c
 800240c:	4413      	add	r3, r2
 800240e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	f241 1328 	movw	r3, #4392	; 0x1128
 8002420:	4413      	add	r3, r2
 8002422:	6019      	str	r1, [r3, #0]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800243e:	4b89      	ldr	r3, [pc, #548]	; (8002664 <HAL_GPIO_Init+0x234>)
 8002440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002442:	e194      	b.n	800276e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	2101      	movs	r1, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa01 f303 	lsl.w	r3, r1, r3
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 8186 	beq.w	8002768 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d00b      	beq.n	800247c <HAL_GPIO_Init+0x4c>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d007      	beq.n	800247c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002470:	2b11      	cmp	r3, #17
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b12      	cmp	r3, #18
 800247a:	d130      	bne.n	80024de <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	2203      	movs	r2, #3
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024b2:	2201      	movs	r2, #1
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	091b      	lsrs	r3, r3, #4
 80024c8:	f003 0201 	and.w	r2, r3, #1
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	2203      	movs	r2, #3
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d003      	beq.n	800251e <HAL_GPIO_Init+0xee>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b12      	cmp	r3, #18
 800251c:	d123      	bne.n	8002566 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	08da      	lsrs	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3208      	adds	r2, #8
 8002526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	220f      	movs	r2, #15
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	08da      	lsrs	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3208      	adds	r2, #8
 8002560:	69b9      	ldr	r1, [r7, #24]
 8002562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	2203      	movs	r2, #3
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0203 	and.w	r2, r3, #3
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 80e0 	beq.w	8002768 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a8:	4b2f      	ldr	r3, [pc, #188]	; (8002668 <HAL_GPIO_Init+0x238>)
 80025aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025ae:	4a2e      	ldr	r2, [pc, #184]	; (8002668 <HAL_GPIO_Init+0x238>)
 80025b0:	f043 0302 	orr.w	r3, r3, #2
 80025b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80025b8:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <HAL_GPIO_Init+0x238>)
 80025ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025c6:	4a29      	ldr	r2, [pc, #164]	; (800266c <HAL_GPIO_Init+0x23c>)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	089b      	lsrs	r3, r3, #2
 80025cc:	3302      	adds	r3, #2
 80025ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	220f      	movs	r2, #15
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a20      	ldr	r2, [pc, #128]	; (8002670 <HAL_GPIO_Init+0x240>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d052      	beq.n	8002698 <HAL_GPIO_Init+0x268>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a1f      	ldr	r2, [pc, #124]	; (8002674 <HAL_GPIO_Init+0x244>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d031      	beq.n	800265e <HAL_GPIO_Init+0x22e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a1e      	ldr	r2, [pc, #120]	; (8002678 <HAL_GPIO_Init+0x248>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d02b      	beq.n	800265a <HAL_GPIO_Init+0x22a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a1d      	ldr	r2, [pc, #116]	; (800267c <HAL_GPIO_Init+0x24c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d025      	beq.n	8002656 <HAL_GPIO_Init+0x226>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a1c      	ldr	r2, [pc, #112]	; (8002680 <HAL_GPIO_Init+0x250>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d01f      	beq.n	8002652 <HAL_GPIO_Init+0x222>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a1b      	ldr	r2, [pc, #108]	; (8002684 <HAL_GPIO_Init+0x254>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d019      	beq.n	800264e <HAL_GPIO_Init+0x21e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a1a      	ldr	r2, [pc, #104]	; (8002688 <HAL_GPIO_Init+0x258>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d013      	beq.n	800264a <HAL_GPIO_Init+0x21a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a19      	ldr	r2, [pc, #100]	; (800268c <HAL_GPIO_Init+0x25c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00d      	beq.n	8002646 <HAL_GPIO_Init+0x216>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a18      	ldr	r2, [pc, #96]	; (8002690 <HAL_GPIO_Init+0x260>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d007      	beq.n	8002642 <HAL_GPIO_Init+0x212>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a17      	ldr	r2, [pc, #92]	; (8002694 <HAL_GPIO_Init+0x264>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d101      	bne.n	800263e <HAL_GPIO_Init+0x20e>
 800263a:	2309      	movs	r3, #9
 800263c:	e02d      	b.n	800269a <HAL_GPIO_Init+0x26a>
 800263e:	230a      	movs	r3, #10
 8002640:	e02b      	b.n	800269a <HAL_GPIO_Init+0x26a>
 8002642:	2308      	movs	r3, #8
 8002644:	e029      	b.n	800269a <HAL_GPIO_Init+0x26a>
 8002646:	2307      	movs	r3, #7
 8002648:	e027      	b.n	800269a <HAL_GPIO_Init+0x26a>
 800264a:	2306      	movs	r3, #6
 800264c:	e025      	b.n	800269a <HAL_GPIO_Init+0x26a>
 800264e:	2305      	movs	r3, #5
 8002650:	e023      	b.n	800269a <HAL_GPIO_Init+0x26a>
 8002652:	2304      	movs	r3, #4
 8002654:	e021      	b.n	800269a <HAL_GPIO_Init+0x26a>
 8002656:	2303      	movs	r3, #3
 8002658:	e01f      	b.n	800269a <HAL_GPIO_Init+0x26a>
 800265a:	2302      	movs	r3, #2
 800265c:	e01d      	b.n	800269a <HAL_GPIO_Init+0x26a>
 800265e:	2301      	movs	r3, #1
 8002660:	e01b      	b.n	800269a <HAL_GPIO_Init+0x26a>
 8002662:	bf00      	nop
 8002664:	58000080 	.word	0x58000080
 8002668:	58024400 	.word	0x58024400
 800266c:	58000400 	.word	0x58000400
 8002670:	58020000 	.word	0x58020000
 8002674:	58020400 	.word	0x58020400
 8002678:	58020800 	.word	0x58020800
 800267c:	58020c00 	.word	0x58020c00
 8002680:	58021000 	.word	0x58021000
 8002684:	58021400 	.word	0x58021400
 8002688:	58021800 	.word	0x58021800
 800268c:	58021c00 	.word	0x58021c00
 8002690:	58022000 	.word	0x58022000
 8002694:	58022400 	.word	0x58022400
 8002698:	2300      	movs	r3, #0
 800269a:	69fa      	ldr	r2, [r7, #28]
 800269c:	f002 0203 	and.w	r2, r2, #3
 80026a0:	0092      	lsls	r2, r2, #2
 80026a2:	4093      	lsls	r3, r2
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026aa:	4938      	ldr	r1, [pc, #224]	; (800278c <HAL_GPIO_Init+0x35c>)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	3302      	adds	r3, #2
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800270c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800273a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	3301      	adds	r3, #1
 800276c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	fa22 f303 	lsr.w	r3, r2, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	f47f ae63 	bne.w	8002444 <HAL_GPIO_Init+0x14>
  }
}
 800277e:	bf00      	nop
 8002780:	3724      	adds	r7, #36	; 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	58000400 	.word	0x58000400

08002790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	807b      	strh	r3, [r7, #2]
 800279c:	4613      	mov	r3, r2
 800279e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027a0:	787b      	ldrb	r3, [r7, #1]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027a6:	887a      	ldrh	r2, [r7, #2]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80027ac:	e003      	b.n	80027b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80027ae:	887b      	ldrh	r3, [r7, #2]
 80027b0:	041a      	lsls	r2, r3, #16
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	619a      	str	r2, [r3, #24]
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80027c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027c4:	b08f      	sub	sp, #60	; 0x3c
 80027c6:	af0a      	add	r7, sp, #40	; 0x28
 80027c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e054      	b.n	800287e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f00b fb6a 	bl	800dec8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2203      	movs	r2, #3
 80027f8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f005 f9bf 	bl	8007b96 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	603b      	str	r3, [r7, #0]
 800281e:	687e      	ldr	r6, [r7, #4]
 8002820:	466d      	mov	r5, sp
 8002822:	f106 0410 	add.w	r4, r6, #16
 8002826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800282a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800282c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800282e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002832:	e885 0003 	stmia.w	r5, {r0, r1}
 8002836:	1d33      	adds	r3, r6, #4
 8002838:	cb0e      	ldmia	r3, {r1, r2, r3}
 800283a:	6838      	ldr	r0, [r7, #0]
 800283c:	f005 f938 	bl	8007ab0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2101      	movs	r1, #1
 8002846:	4618      	mov	r0, r3
 8002848:	f005 f9b6 	bl	8007bb8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	603b      	str	r3, [r7, #0]
 8002852:	687e      	ldr	r6, [r7, #4]
 8002854:	466d      	mov	r5, sp
 8002856:	f106 0410 	add.w	r4, r6, #16
 800285a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800285c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800285e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002862:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002866:	e885 0003 	stmia.w	r5, {r0, r1}
 800286a:	1d33      	adds	r3, r6, #4
 800286c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800286e:	6838      	ldr	r0, [r7, #0]
 8002870:	f005 fac8 	bl	8007e04 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002886 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002886:	b590      	push	{r4, r7, lr}
 8002888:	b089      	sub	sp, #36	; 0x24
 800288a:	af04      	add	r7, sp, #16
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	4608      	mov	r0, r1
 8002890:	4611      	mov	r1, r2
 8002892:	461a      	mov	r2, r3
 8002894:	4603      	mov	r3, r0
 8002896:	70fb      	strb	r3, [r7, #3]
 8002898:	460b      	mov	r3, r1
 800289a:	70bb      	strb	r3, [r7, #2]
 800289c:	4613      	mov	r3, r2
 800289e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_HCD_HC_Init+0x28>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e07f      	b.n	80029ae <HAL_HCD_HC_Init+0x128>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	440b      	add	r3, r1
 80028c4:	333d      	adds	r3, #61	; 0x3d
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	440b      	add	r3, r1
 80028d8:	3338      	adds	r3, #56	; 0x38
 80028da:	787a      	ldrb	r2, [r7, #1]
 80028dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80028de:	78fa      	ldrb	r2, [r7, #3]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	440b      	add	r3, r1
 80028ec:	3340      	adds	r3, #64	; 0x40
 80028ee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80028f0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	440b      	add	r3, r1
 8002900:	3339      	adds	r3, #57	; 0x39
 8002902:	78fa      	ldrb	r2, [r7, #3]
 8002904:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	440b      	add	r3, r1
 8002914:	333f      	adds	r3, #63	; 0x3f
 8002916:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800291a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	78bb      	ldrb	r3, [r7, #2]
 8002920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002924:	b2d8      	uxtb	r0, r3
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	440b      	add	r3, r1
 8002932:	333a      	adds	r3, #58	; 0x3a
 8002934:	4602      	mov	r2, r0
 8002936:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002938:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800293c:	2b00      	cmp	r3, #0
 800293e:	da0a      	bge.n	8002956 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	333b      	adds	r3, #59	; 0x3b
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
 8002954:	e009      	b.n	800296a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	440b      	add	r3, r1
 8002964:	333b      	adds	r3, #59	; 0x3b
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	440b      	add	r3, r1
 8002978:	333c      	adds	r3, #60	; 0x3c
 800297a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800297e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	787c      	ldrb	r4, [r7, #1]
 8002986:	78ba      	ldrb	r2, [r7, #2]
 8002988:	78f9      	ldrb	r1, [r7, #3]
 800298a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800298c:	9302      	str	r3, [sp, #8]
 800298e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002992:	9301      	str	r3, [sp, #4]
 8002994:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	4623      	mov	r3, r4
 800299c:	f005 fbae 	bl	80080fc <USB_HC_Init>
 80029a0:	4603      	mov	r3, r0
 80029a2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd90      	pop	{r4, r7, pc}

080029b6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_HCD_HC_Halt+0x1e>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e00f      	b.n	80029f4 <HAL_HCD_HC_Halt+0x3e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	78fa      	ldrb	r2, [r7, #3]
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f005 fde8 	bl	80085ba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	4608      	mov	r0, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	70fb      	strb	r3, [r7, #3]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	70bb      	strb	r3, [r7, #2]
 8002a12:	4613      	mov	r3, r2
 8002a14:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	440b      	add	r3, r1
 8002a24:	333b      	adds	r3, #59	; 0x3b
 8002a26:	78ba      	ldrb	r2, [r7, #2]
 8002a28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	440b      	add	r3, r1
 8002a38:	333f      	adds	r3, #63	; 0x3f
 8002a3a:	787a      	ldrb	r2, [r7, #1]
 8002a3c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002a3e:	7c3b      	ldrb	r3, [r7, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d114      	bne.n	8002a6e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	440b      	add	r3, r1
 8002a52:	3342      	adds	r3, #66	; 0x42
 8002a54:	2203      	movs	r2, #3
 8002a56:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002a58:	78fa      	ldrb	r2, [r7, #3]
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	440b      	add	r3, r1
 8002a66:	333d      	adds	r3, #61	; 0x3d
 8002a68:	7f3a      	ldrb	r2, [r7, #28]
 8002a6a:	701a      	strb	r2, [r3, #0]
 8002a6c:	e009      	b.n	8002a82 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a6e:	78fa      	ldrb	r2, [r7, #3]
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	440b      	add	r3, r1
 8002a7c:	3342      	adds	r3, #66	; 0x42
 8002a7e:	2202      	movs	r2, #2
 8002a80:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002a82:	787b      	ldrb	r3, [r7, #1]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	f200 80d6 	bhi.w	8002c36 <HAL_HCD_HC_SubmitRequest+0x23a>
 8002a8a:	a201      	add	r2, pc, #4	; (adr r2, 8002a90 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a90:	08002aa1 	.word	0x08002aa1
 8002a94:	08002c21 	.word	0x08002c21
 8002a98:	08002b0d 	.word	0x08002b0d
 8002a9c:	08002b97 	.word	0x08002b97
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002aa0:	7c3b      	ldrb	r3, [r7, #16]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	f040 80c9 	bne.w	8002c3a <HAL_HCD_HC_SubmitRequest+0x23e>
 8002aa8:	78bb      	ldrb	r3, [r7, #2]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f040 80c5 	bne.w	8002c3a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002ab0:	8b3b      	ldrh	r3, [r7, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d109      	bne.n	8002aca <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	440b      	add	r3, r1
 8002ac4:	3351      	adds	r3, #81	; 0x51
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3351      	adds	r3, #81	; 0x51
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10a      	bne.n	8002af6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	3342      	adds	r3, #66	; 0x42
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002af4:	e0a1      	b.n	8002c3a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002af6:	78fa      	ldrb	r2, [r7, #3]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	3342      	adds	r3, #66	; 0x42
 8002b06:	2202      	movs	r2, #2
 8002b08:	701a      	strb	r2, [r3, #0]
      break;
 8002b0a:	e096      	b.n	8002c3a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002b0c:	78bb      	ldrb	r3, [r7, #2]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d120      	bne.n	8002b54 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b12:	78fa      	ldrb	r2, [r7, #3]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	440b      	add	r3, r1
 8002b20:	3351      	adds	r3, #81	; 0x51
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10a      	bne.n	8002b3e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	440b      	add	r3, r1
 8002b36:	3342      	adds	r3, #66	; 0x42
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002b3c:	e07e      	b.n	8002c3c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b3e:	78fa      	ldrb	r2, [r7, #3]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	440b      	add	r3, r1
 8002b4c:	3342      	adds	r3, #66	; 0x42
 8002b4e:	2202      	movs	r2, #2
 8002b50:	701a      	strb	r2, [r3, #0]
      break;
 8002b52:	e073      	b.n	8002c3c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	440b      	add	r3, r1
 8002b62:	3350      	adds	r3, #80	; 0x50
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10a      	bne.n	8002b80 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	440b      	add	r3, r1
 8002b78:	3342      	adds	r3, #66	; 0x42
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
      break;
 8002b7e:	e05d      	b.n	8002c3c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	3342      	adds	r3, #66	; 0x42
 8002b90:	2202      	movs	r2, #2
 8002b92:	701a      	strb	r2, [r3, #0]
      break;
 8002b94:	e052      	b.n	8002c3c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002b96:	78bb      	ldrb	r3, [r7, #2]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d120      	bne.n	8002bde <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b9c:	78fa      	ldrb	r2, [r7, #3]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	440b      	add	r3, r1
 8002baa:	3351      	adds	r3, #81	; 0x51
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10a      	bne.n	8002bc8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bb2:	78fa      	ldrb	r2, [r7, #3]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3342      	adds	r3, #66	; 0x42
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002bc6:	e039      	b.n	8002c3c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3342      	adds	r3, #66	; 0x42
 8002bd8:	2202      	movs	r2, #2
 8002bda:	701a      	strb	r2, [r3, #0]
      break;
 8002bdc:	e02e      	b.n	8002c3c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002bde:	78fa      	ldrb	r2, [r7, #3]
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	440b      	add	r3, r1
 8002bec:	3350      	adds	r3, #80	; 0x50
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10a      	bne.n	8002c0a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	3342      	adds	r3, #66	; 0x42
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]
      break;
 8002c08:	e018      	b.n	8002c3c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	440b      	add	r3, r1
 8002c18:	3342      	adds	r3, #66	; 0x42
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	701a      	strb	r2, [r3, #0]
      break;
 8002c1e:	e00d      	b.n	8002c3c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	3342      	adds	r3, #66	; 0x42
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]
      break;
 8002c34:	e002      	b.n	8002c3c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002c36:	bf00      	nop
 8002c38:	e000      	b.n	8002c3c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002c3a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	440b      	add	r3, r1
 8002c4a:	3344      	adds	r3, #68	; 0x44
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002c50:	78fa      	ldrb	r2, [r7, #3]
 8002c52:	8b39      	ldrh	r1, [r7, #24]
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4403      	add	r3, r0
 8002c60:	3348      	adds	r3, #72	; 0x48
 8002c62:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	440b      	add	r3, r1
 8002c72:	335c      	adds	r3, #92	; 0x5c
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	440b      	add	r3, r1
 8002c86:	334c      	adds	r3, #76	; 0x4c
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c8c:	78fa      	ldrb	r2, [r7, #3]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	440b      	add	r3, r1
 8002c9a:	3339      	adds	r3, #57	; 0x39
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002ca0:	78fa      	ldrb	r2, [r7, #3]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	440b      	add	r3, r1
 8002cae:	335d      	adds	r3, #93	; 0x5d
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6818      	ldr	r0, [r3, #0]
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	3338      	adds	r3, #56	; 0x38
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	18d1      	adds	r1, r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f005 fb1e 	bl	8008310 <USB_HC_StartXfer>
 8002cd4:	4603      	mov	r3, r0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop

08002ce0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f005 f841 	bl	8007d7e <USB_GetMode>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	f040 80ef 	bne.w	8002ee2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f005 f825 	bl	8007d58 <USB_ReadInterrupts>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80e5 	beq.w	8002ee0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f005 f81c 	bl	8007d58 <USB_ReadInterrupts>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d2a:	d104      	bne.n	8002d36 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002d34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f005 f80c 	bl	8007d58 <USB_ReadInterrupts>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d4a:	d104      	bne.n	8002d56 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f004 fffc 	bl	8007d58 <USB_ReadInterrupts>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d6a:	d104      	bne.n	8002d76 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f004 ffec 	bl	8007d58 <USB_ReadInterrupts>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d103      	bne.n	8002d92 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f004 ffde 	bl	8007d58 <USB_ReadInterrupts>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002da2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002da6:	d115      	bne.n	8002dd4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002db0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d108      	bne.n	8002dd4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f00b f900 	bl	800dfc8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2101      	movs	r1, #1
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f005 f8ce 	bl	8007f70 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f004 ffbd 	bl	8007d58 <USB_ReadInterrupts>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002de8:	d102      	bne.n	8002df0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f001 f966 	bl	80040bc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f004 ffaf 	bl	8007d58 <USB_ReadInterrupts>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d106      	bne.n	8002e12 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f00b f8c3 	bl	800df90 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2208      	movs	r2, #8
 8002e10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f004 ff9e 	bl	8007d58 <USB_ReadInterrupts>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e26:	d138      	bne.n	8002e9a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f005 fbb3 	bl	8008598 <USB_HC_ReadInterrupt>
 8002e32:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	e025      	b.n	8002e86 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	fa22 f303 	lsr.w	r3, r2, r3
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d018      	beq.n	8002e80 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e64:	d106      	bne.n	8002e74 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f8cf 	bl	8003010 <HCD_HC_IN_IRQHandler>
 8002e72:	e005      	b.n	8002e80 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	4619      	mov	r1, r3
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fcfd 	bl	800387a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	3301      	adds	r3, #1
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d3d4      	bcc.n	8002e3a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f004 ff5a 	bl	8007d58 <USB_ReadInterrupts>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	2b10      	cmp	r3, #16
 8002eac:	d101      	bne.n	8002eb2 <HAL_HCD_IRQHandler+0x1d2>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <HAL_HCD_IRQHandler+0x1d4>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d014      	beq.n	8002ee2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699a      	ldr	r2, [r3, #24]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0210 	bic.w	r2, r2, #16
 8002ec6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f001 f84b 	bl	8003f64 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699a      	ldr	r2, [r3, #24]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0210 	orr.w	r2, r2, #16
 8002edc:	619a      	str	r2, [r3, #24]
 8002ede:	e000      	b.n	8002ee2 <HAL_HCD_IRQHandler+0x202>
      return;
 8002ee0:	bf00      	nop
    }
  }
}
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_HCD_Start+0x16>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e013      	b.n	8002f26 <HAL_HCD_Start+0x3e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f004 fe32 	bl	8007b74 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2101      	movs	r1, #1
 8002f16:	4618      	mov	r0, r3
 8002f18:	f005 f88e 	bl	8008038 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_HCD_Stop+0x16>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e00d      	b.n	8002f60 <HAL_HCD_Stop+0x32>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f005 fc6d 	bl	8008830 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f005 f835 	bl	8007fe4 <USB_ResetPort>
 8002f7a:	4603      	mov	r3, r0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	440b      	add	r3, r1
 8002f9e:	335c      	adds	r3, #92	; 0x5c
 8002fa0:	781b      	ldrb	r3, [r3, #0]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	440b      	add	r3, r1
 8002fc8:	334c      	adds	r3, #76	; 0x4c
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f005 f877 	bl	80080d8 <USB_GetCurrentFrame>
 8002fea:	4603      	mov	r3, r0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f005 f852 	bl	80080aa <USB_GetHostSpeed>
 8003006:	4603      	mov	r3, r0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4413      	add	r3, r2
 8003032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b04      	cmp	r3, #4
 800303e:	d119      	bne.n	8003074 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304c:	461a      	mov	r2, r3
 800304e:	2304      	movs	r3, #4
 8003050:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4413      	add	r3, r2
 800305a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	0151      	lsls	r1, r2, #5
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	440a      	add	r2, r1
 8003068:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800306c:	f043 0302 	orr.w	r3, r3, #2
 8003070:	60d3      	str	r3, [r2, #12]
 8003072:	e0ce      	b.n	8003212 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4413      	add	r3, r2
 800307c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800308a:	d12c      	bne.n	80030e6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4413      	add	r3, r2
 8003094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003098:	461a      	mov	r2, r3
 800309a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800309e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	440b      	add	r3, r1
 80030ae:	335d      	adds	r3, #93	; 0x5d
 80030b0:	2207      	movs	r2, #7
 80030b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	0151      	lsls	r1, r2, #5
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	440a      	add	r2, r1
 80030ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030ce:	f043 0302 	orr.w	r3, r3, #2
 80030d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	4611      	mov	r1, r2
 80030de:	4618      	mov	r0, r3
 80030e0:	f005 fa6b 	bl	80085ba <USB_HC_Halt>
 80030e4:	e095      	b.n	8003212 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d109      	bne.n	8003110 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4413      	add	r3, r2
 8003104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003108:	461a      	mov	r2, r3
 800310a:	2320      	movs	r3, #32
 800310c:	6093      	str	r3, [r2, #8]
 800310e:	e080      	b.n	8003212 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b08      	cmp	r3, #8
 8003124:	d134      	bne.n	8003190 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4413      	add	r3, r2
 800312e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	0151      	lsls	r1, r2, #5
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	440a      	add	r2, r1
 800313c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003140:	f043 0302 	orr.w	r3, r3, #2
 8003144:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	440b      	add	r3, r1
 8003154:	335d      	adds	r3, #93	; 0x5d
 8003156:	2205      	movs	r2, #5
 8003158:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4413      	add	r3, r2
 8003162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003166:	461a      	mov	r2, r3
 8003168:	2310      	movs	r3, #16
 800316a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4413      	add	r3, r2
 8003174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003178:	461a      	mov	r2, r3
 800317a:	2308      	movs	r3, #8
 800317c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f005 fa16 	bl	80085ba <USB_HC_Halt>
 800318e:	e040      	b.n	8003212 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4413      	add	r3, r2
 8003198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a6:	d134      	bne.n	8003212 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	0151      	lsls	r1, r2, #5
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	440a      	add	r2, r1
 80031be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031c2:	f043 0302 	orr.w	r3, r3, #2
 80031c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	4611      	mov	r1, r2
 80031d2:	4618      	mov	r0, r3
 80031d4:	f005 f9f1 	bl	80085ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e4:	461a      	mov	r2, r3
 80031e6:	2310      	movs	r3, #16
 80031e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	440b      	add	r3, r1
 80031f8:	335d      	adds	r3, #93	; 0x5d
 80031fa:	2208      	movs	r2, #8
 80031fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4413      	add	r3, r2
 8003206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320a:	461a      	mov	r2, r3
 800320c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003210:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003228:	d122      	bne.n	8003270 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4413      	add	r3, r2
 8003232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	0151      	lsls	r1, r2, #5
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	440a      	add	r2, r1
 8003240:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003244:	f043 0302 	orr.w	r3, r3, #2
 8003248:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f005 f9b0 	bl	80085ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4413      	add	r3, r2
 8003262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003266:	461a      	mov	r2, r3
 8003268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800326c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800326e:	e300      	b.n	8003872 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4413      	add	r3, r2
 8003278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b01      	cmp	r3, #1
 8003284:	f040 80fd 	bne.w	8003482 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01b      	beq.n	80032c8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	440b      	add	r3, r1
 800329e:	3348      	adds	r3, #72	; 0x48
 80032a0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	0159      	lsls	r1, r3, #5
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	440b      	add	r3, r1
 80032aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80032b4:	1ad1      	subs	r1, r2, r3
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4403      	add	r3, r0
 80032c4:	334c      	adds	r3, #76	; 0x4c
 80032c6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	440b      	add	r3, r1
 80032d6:	335d      	adds	r3, #93	; 0x5d
 80032d8:	2201      	movs	r2, #1
 80032da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	440b      	add	r3, r1
 80032ea:	3358      	adds	r3, #88	; 0x58
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fc:	461a      	mov	r2, r3
 80032fe:	2301      	movs	r3, #1
 8003300:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	440b      	add	r3, r1
 8003310:	333f      	adds	r3, #63	; 0x3f
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	440b      	add	r3, r1
 8003326:	333f      	adds	r3, #63	; 0x3f
 8003328:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800332a:	2b02      	cmp	r3, #2
 800332c:	d121      	bne.n	8003372 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	0151      	lsls	r1, r2, #5
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	440a      	add	r2, r1
 8003344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003348:	f043 0302 	orr.w	r3, r3, #2
 800334c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	4611      	mov	r1, r2
 8003358:	4618      	mov	r0, r3
 800335a:	f005 f92e 	bl	80085ba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	4413      	add	r3, r2
 8003366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336a:	461a      	mov	r2, r3
 800336c:	2310      	movs	r3, #16
 800336e:	6093      	str	r3, [r2, #8]
 8003370:	e070      	b.n	8003454 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	440b      	add	r3, r1
 8003380:	333f      	adds	r3, #63	; 0x3f
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b03      	cmp	r3, #3
 8003386:	d12a      	bne.n	80033de <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4413      	add	r3, r2
 8003390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	0151      	lsls	r1, r2, #5
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	440a      	add	r2, r1
 800339e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80033a6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	440b      	add	r3, r1
 80033b6:	335c      	adds	r3, #92	; 0x5c
 80033b8:	2201      	movs	r2, #1
 80033ba:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	b2d8      	uxtb	r0, r3
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	440b      	add	r3, r1
 80033ce:	335c      	adds	r3, #92	; 0x5c
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	4601      	mov	r1, r0
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f00a fe04 	bl	800dfe4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80033dc:	e03a      	b.n	8003454 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	440b      	add	r3, r1
 80033ec:	333f      	adds	r3, #63	; 0x3f
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d12f      	bne.n	8003454 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	440b      	add	r3, r1
 8003402:	335c      	adds	r3, #92	; 0x5c
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	440b      	add	r3, r1
 8003416:	3350      	adds	r3, #80	; 0x50
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	f083 0301 	eor.w	r3, r3, #1
 800341e:	b2d8      	uxtb	r0, r3
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	440b      	add	r3, r1
 800342e:	3350      	adds	r3, #80	; 0x50
 8003430:	4602      	mov	r2, r0
 8003432:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	b2d8      	uxtb	r0, r3
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	440b      	add	r3, r1
 8003446:	335c      	adds	r3, #92	; 0x5c
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	4601      	mov	r1, r0
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f00a fdc8 	bl	800dfe4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	440b      	add	r3, r1
 8003462:	3350      	adds	r3, #80	; 0x50
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	f083 0301 	eor.w	r3, r3, #1
 800346a:	b2d8      	uxtb	r0, r3
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	440b      	add	r3, r1
 800347a:	3350      	adds	r3, #80	; 0x50
 800347c:	4602      	mov	r2, r0
 800347e:	701a      	strb	r2, [r3, #0]
}
 8003480:	e1f7      	b.n	8003872 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4413      	add	r3, r2
 800348a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b02      	cmp	r3, #2
 8003496:	f040 811a 	bne.w	80036ce <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	0151      	lsls	r1, r2, #5
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	440a      	add	r2, r1
 80034b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034b4:	f023 0302 	bic.w	r3, r3, #2
 80034b8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	440b      	add	r3, r1
 80034c8:	335d      	adds	r3, #93	; 0x5d
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d10a      	bne.n	80034e6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	440b      	add	r3, r1
 80034de:	335c      	adds	r3, #92	; 0x5c
 80034e0:	2201      	movs	r2, #1
 80034e2:	701a      	strb	r2, [r3, #0]
 80034e4:	e0d9      	b.n	800369a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	440b      	add	r3, r1
 80034f4:	335d      	adds	r3, #93	; 0x5d
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	d10a      	bne.n	8003512 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	440b      	add	r3, r1
 800350a:	335c      	adds	r3, #92	; 0x5c
 800350c:	2205      	movs	r2, #5
 800350e:	701a      	strb	r2, [r3, #0]
 8003510:	e0c3      	b.n	800369a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	440b      	add	r3, r1
 8003520:	335d      	adds	r3, #93	; 0x5d
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b06      	cmp	r3, #6
 8003526:	d00a      	beq.n	800353e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	440b      	add	r3, r1
 8003536:	335d      	adds	r3, #93	; 0x5d
 8003538:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800353a:	2b08      	cmp	r3, #8
 800353c:	d156      	bne.n	80035ec <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	440b      	add	r3, r1
 800354c:	3358      	adds	r3, #88	; 0x58
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	1c59      	adds	r1, r3, #1
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	4403      	add	r3, r0
 8003560:	3358      	adds	r3, #88	; 0x58
 8003562:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	440b      	add	r3, r1
 8003572:	3358      	adds	r3, #88	; 0x58
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b03      	cmp	r3, #3
 8003578:	d914      	bls.n	80035a4 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	440b      	add	r3, r1
 8003588:	3358      	adds	r3, #88	; 0x58
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	440b      	add	r3, r1
 800359c:	335c      	adds	r3, #92	; 0x5c
 800359e:	2204      	movs	r2, #4
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	e009      	b.n	80035b8 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	440b      	add	r3, r1
 80035b2:	335c      	adds	r3, #92	; 0x5c
 80035b4:	2202      	movs	r2, #2
 80035b6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035ce:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035d6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e4:	461a      	mov	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e056      	b.n	800369a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	440b      	add	r3, r1
 80035fa:	335d      	adds	r3, #93	; 0x5d
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d123      	bne.n	800364a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	440b      	add	r3, r1
 8003610:	335c      	adds	r3, #92	; 0x5c
 8003612:	2202      	movs	r2, #2
 8003614:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4413      	add	r3, r2
 800361e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800362c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003634:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4413      	add	r3, r2
 800363e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003642:	461a      	mov	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	e027      	b.n	800369a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	440b      	add	r3, r1
 8003658:	335d      	adds	r3, #93	; 0x5d
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b07      	cmp	r3, #7
 800365e:	d11c      	bne.n	800369a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	440b      	add	r3, r1
 800366e:	3358      	adds	r3, #88	; 0x58
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	1c59      	adds	r1, r3, #1
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4403      	add	r3, r0
 8003682:	3358      	adds	r3, #88	; 0x58
 8003684:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	440b      	add	r3, r1
 8003694:	335c      	adds	r3, #92	; 0x5c
 8003696:	2204      	movs	r2, #4
 8003698:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a6:	461a      	mov	r2, r3
 80036a8:	2302      	movs	r3, #2
 80036aa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	b2d8      	uxtb	r0, r3
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	440b      	add	r3, r1
 80036be:	335c      	adds	r3, #92	; 0x5c
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	4601      	mov	r1, r0
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f00a fc8c 	bl	800dfe4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80036cc:	e0d1      	b.n	8003872 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e0:	2b80      	cmp	r3, #128	; 0x80
 80036e2:	d13e      	bne.n	8003762 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	0151      	lsls	r1, r2, #5
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	440a      	add	r2, r1
 80036fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036fe:	f043 0302 	orr.w	r3, r3, #2
 8003702:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	440b      	add	r3, r1
 8003712:	3358      	adds	r3, #88	; 0x58
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	1c59      	adds	r1, r3, #1
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4403      	add	r3, r0
 8003726:	3358      	adds	r3, #88	; 0x58
 8003728:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	440b      	add	r3, r1
 8003738:	335d      	adds	r3, #93	; 0x5d
 800373a:	2206      	movs	r2, #6
 800373c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	4611      	mov	r1, r2
 8003748:	4618      	mov	r0, r3
 800374a:	f004 ff36 	bl	80085ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4413      	add	r3, r2
 8003756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375a:	461a      	mov	r2, r3
 800375c:	2380      	movs	r3, #128	; 0x80
 800375e:	6093      	str	r3, [r2, #8]
}
 8003760:	e087      	b.n	8003872 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4413      	add	r3, r2
 800376a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b10      	cmp	r3, #16
 8003776:	d17c      	bne.n	8003872 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	440b      	add	r3, r1
 8003786:	333f      	adds	r3, #63	; 0x3f
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b03      	cmp	r3, #3
 800378c:	d122      	bne.n	80037d4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	440b      	add	r3, r1
 800379c:	3358      	adds	r3, #88	; 0x58
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	0151      	lsls	r1, r2, #5
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	440a      	add	r2, r1
 80037b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037bc:	f043 0302 	orr.w	r3, r3, #2
 80037c0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f004 fef4 	bl	80085ba <USB_HC_Halt>
 80037d2:	e045      	b.n	8003860 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	440b      	add	r3, r1
 80037e2:	333f      	adds	r3, #63	; 0x3f
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4613      	mov	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	440b      	add	r3, r1
 80037f8:	333f      	adds	r3, #63	; 0x3f
 80037fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d12f      	bne.n	8003860 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	440b      	add	r3, r1
 800380e:	3358      	adds	r3, #88	; 0x58
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d121      	bne.n	8003860 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4613      	mov	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	440b      	add	r3, r1
 800382a:	335d      	adds	r3, #93	; 0x5d
 800382c:	2203      	movs	r2, #3
 800382e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4413      	add	r3, r2
 8003838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	0151      	lsls	r1, r2, #5
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	440a      	add	r2, r1
 8003846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800384a:	f043 0302 	orr.w	r3, r3, #2
 800384e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	4611      	mov	r1, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f004 fead 	bl	80085ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4413      	add	r3, r2
 8003868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800386c:	461a      	mov	r2, r3
 800386e:	2310      	movs	r3, #16
 8003870:	6093      	str	r3, [r2, #8]
}
 8003872:	bf00      	nop
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b086      	sub	sp, #24
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	460b      	mov	r3, r1
 8003884:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	4413      	add	r3, r2
 800389c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d119      	bne.n	80038de <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b6:	461a      	mov	r2, r3
 80038b8:	2304      	movs	r3, #4
 80038ba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	0151      	lsls	r1, r2, #5
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	440a      	add	r2, r1
 80038d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038d6:	f043 0302 	orr.w	r3, r3, #2
 80038da:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80038dc:	e33e      	b.n	8003f5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d141      	bne.n	8003978 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003900:	461a      	mov	r2, r3
 8003902:	2320      	movs	r3, #32
 8003904:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4613      	mov	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	440b      	add	r3, r1
 8003914:	333d      	adds	r3, #61	; 0x3d
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b01      	cmp	r3, #1
 800391a:	f040 831f 	bne.w	8003f5c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	440b      	add	r3, r1
 800392c:	333d      	adds	r3, #61	; 0x3d
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	440b      	add	r3, r1
 8003940:	335c      	adds	r3, #92	; 0x5c
 8003942:	2202      	movs	r2, #2
 8003944:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4413      	add	r3, r2
 800394e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	0151      	lsls	r1, r2, #5
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	440a      	add	r2, r1
 800395c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003960:	f043 0302 	orr.w	r3, r3, #2
 8003964:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	4611      	mov	r1, r2
 8003970:	4618      	mov	r0, r3
 8003972:	f004 fe22 	bl	80085ba <USB_HC_Halt>
}
 8003976:	e2f1      	b.n	8003f5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4413      	add	r3, r2
 8003980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398a:	2b40      	cmp	r3, #64	; 0x40
 800398c:	d13f      	bne.n	8003a0e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	440b      	add	r3, r1
 800399c:	335d      	adds	r3, #93	; 0x5d
 800399e:	2204      	movs	r2, #4
 80039a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	440b      	add	r3, r1
 80039b0:	333d      	adds	r3, #61	; 0x3d
 80039b2:	2201      	movs	r2, #1
 80039b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	440b      	add	r3, r1
 80039c4:	3358      	adds	r3, #88	; 0x58
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	0151      	lsls	r1, r2, #5
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	440a      	add	r2, r1
 80039e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039e4:	f043 0302 	orr.w	r3, r3, #2
 80039e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	4611      	mov	r1, r2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f004 fde0 	bl	80085ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a06:	461a      	mov	r2, r3
 8003a08:	2340      	movs	r3, #64	; 0x40
 8003a0a:	6093      	str	r3, [r2, #8]
}
 8003a0c:	e2a6      	b.n	8003f5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a24:	d122      	bne.n	8003a6c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	0151      	lsls	r1, r2, #5
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	440a      	add	r2, r1
 8003a3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a40:	f043 0302 	orr.w	r3, r3, #2
 8003a44:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f004 fdb2 	bl	80085ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a62:	461a      	mov	r2, r3
 8003a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a68:	6093      	str	r3, [r2, #8]
}
 8003a6a:	e277      	b.n	8003f5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d135      	bne.n	8003aee <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	440b      	add	r3, r1
 8003a90:	3358      	adds	r3, #88	; 0x58
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	0151      	lsls	r1, r2, #5
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	440a      	add	r2, r1
 8003aac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ab0:	f043 0302 	orr.w	r3, r3, #2
 8003ab4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f004 fd7a 	bl	80085ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	440b      	add	r3, r1
 8003ae6:	335d      	adds	r3, #93	; 0x5d
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]
}
 8003aec:	e236      	b.n	8003f5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	015a      	lsls	r2, r3, #5
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d12b      	bne.n	8003b5c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b10:	461a      	mov	r2, r3
 8003b12:	2308      	movs	r3, #8
 8003b14:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	0151      	lsls	r1, r2, #5
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	440a      	add	r2, r1
 8003b2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b30:	f043 0302 	orr.w	r3, r3, #2
 8003b34:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	4611      	mov	r1, r2
 8003b40:	4618      	mov	r0, r3
 8003b42:	f004 fd3a 	bl	80085ba <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	440b      	add	r3, r1
 8003b54:	335d      	adds	r3, #93	; 0x5d
 8003b56:	2205      	movs	r2, #5
 8003b58:	701a      	strb	r2, [r3, #0]
}
 8003b5a:	e1ff      	b.n	8003f5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	2b10      	cmp	r3, #16
 8003b70:	d155      	bne.n	8003c1e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	440b      	add	r3, r1
 8003b80:	3358      	adds	r3, #88	; 0x58
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	440b      	add	r3, r1
 8003b94:	335d      	adds	r3, #93	; 0x5d
 8003b96:	2203      	movs	r2, #3
 8003b98:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	440b      	add	r3, r1
 8003ba8:	333d      	adds	r3, #61	; 0x3d
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d114      	bne.n	8003bda <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	440b      	add	r3, r1
 8003bbe:	333c      	adds	r3, #60	; 0x3c
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d109      	bne.n	8003bda <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	440b      	add	r3, r1
 8003bd4:	333d      	adds	r3, #61	; 0x3d
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	0151      	lsls	r1, r2, #5
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	440a      	add	r2, r1
 8003bf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bf4:	f043 0302 	orr.w	r3, r3, #2
 8003bf8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	4611      	mov	r1, r2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f004 fcd8 	bl	80085ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c16:	461a      	mov	r2, r3
 8003c18:	2310      	movs	r3, #16
 8003c1a:	6093      	str	r3, [r2, #8]
}
 8003c1c:	e19e      	b.n	8003f5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c30:	2b80      	cmp	r3, #128	; 0x80
 8003c32:	d12b      	bne.n	8003c8c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	0151      	lsls	r1, r2, #5
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	440a      	add	r2, r1
 8003c4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c4e:	f043 0302 	orr.w	r3, r3, #2
 8003c52:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f004 fcab 	bl	80085ba <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	440b      	add	r3, r1
 8003c72:	335d      	adds	r3, #93	; 0x5d
 8003c74:	2206      	movs	r2, #6
 8003c76:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c84:	461a      	mov	r2, r3
 8003c86:	2380      	movs	r3, #128	; 0x80
 8003c88:	6093      	str	r3, [r2, #8]
}
 8003c8a:	e167      	b.n	8003f5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca2:	d135      	bne.n	8003d10 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	0151      	lsls	r1, r2, #5
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	440a      	add	r2, r1
 8003cba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cbe:	f043 0302 	orr.w	r3, r3, #2
 8003cc2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	4611      	mov	r1, r2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f004 fc73 	bl	80085ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2310      	movs	r3, #16
 8003ce4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cf8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	440b      	add	r3, r1
 8003d08:	335d      	adds	r3, #93	; 0x5d
 8003d0a:	2208      	movs	r2, #8
 8003d0c:	701a      	strb	r2, [r3, #0]
}
 8003d0e:	e125      	b.n	8003f5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	f040 811a 	bne.w	8003f5c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	0151      	lsls	r1, r2, #5
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	440a      	add	r2, r1
 8003d3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d42:	f023 0302 	bic.w	r3, r3, #2
 8003d46:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	440b      	add	r3, r1
 8003d56:	335d      	adds	r3, #93	; 0x5d
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d137      	bne.n	8003dce <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4613      	mov	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	440b      	add	r3, r1
 8003d6c:	335c      	adds	r3, #92	; 0x5c
 8003d6e:	2201      	movs	r2, #1
 8003d70:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4613      	mov	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	440b      	add	r3, r1
 8003d80:	333f      	adds	r3, #63	; 0x3f
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d00b      	beq.n	8003da0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	440b      	add	r3, r1
 8003d96:	333f      	adds	r3, #63	; 0x3f
 8003d98:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	f040 80c5 	bne.w	8003f2a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	440b      	add	r3, r1
 8003dae:	3351      	adds	r3, #81	; 0x51
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	f083 0301 	eor.w	r3, r3, #1
 8003db6:	b2d8      	uxtb	r0, r3
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	440b      	add	r3, r1
 8003dc6:	3351      	adds	r3, #81	; 0x51
 8003dc8:	4602      	mov	r2, r0
 8003dca:	701a      	strb	r2, [r3, #0]
 8003dcc:	e0ad      	b.n	8003f2a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	440b      	add	r3, r1
 8003ddc:	335d      	adds	r3, #93	; 0x5d
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d10a      	bne.n	8003dfa <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	440b      	add	r3, r1
 8003df2:	335c      	adds	r3, #92	; 0x5c
 8003df4:	2202      	movs	r2, #2
 8003df6:	701a      	strb	r2, [r3, #0]
 8003df8:	e097      	b.n	8003f2a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	440b      	add	r3, r1
 8003e08:	335d      	adds	r3, #93	; 0x5d
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d10a      	bne.n	8003e26 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	440b      	add	r3, r1
 8003e1e:	335c      	adds	r3, #92	; 0x5c
 8003e20:	2202      	movs	r2, #2
 8003e22:	701a      	strb	r2, [r3, #0]
 8003e24:	e081      	b.n	8003f2a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	440b      	add	r3, r1
 8003e34:	335d      	adds	r3, #93	; 0x5d
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b05      	cmp	r3, #5
 8003e3a:	d10a      	bne.n	8003e52 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	440b      	add	r3, r1
 8003e4a:	335c      	adds	r3, #92	; 0x5c
 8003e4c:	2205      	movs	r2, #5
 8003e4e:	701a      	strb	r2, [r3, #0]
 8003e50:	e06b      	b.n	8003f2a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	440b      	add	r3, r1
 8003e60:	335d      	adds	r3, #93	; 0x5d
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b06      	cmp	r3, #6
 8003e66:	d00a      	beq.n	8003e7e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	440b      	add	r3, r1
 8003e76:	335d      	adds	r3, #93	; 0x5d
 8003e78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d155      	bne.n	8003f2a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4613      	mov	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	440b      	add	r3, r1
 8003e8c:	3358      	adds	r3, #88	; 0x58
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	1c59      	adds	r1, r3, #1
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4403      	add	r3, r0
 8003ea0:	3358      	adds	r3, #88	; 0x58
 8003ea2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	440b      	add	r3, r1
 8003eb2:	3358      	adds	r3, #88	; 0x58
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b03      	cmp	r3, #3
 8003eb8:	d914      	bls.n	8003ee4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	440b      	add	r3, r1
 8003ec8:	3358      	adds	r3, #88	; 0x58
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	440b      	add	r3, r1
 8003edc:	335c      	adds	r3, #92	; 0x5c
 8003ede:	2204      	movs	r2, #4
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	e009      	b.n	8003ef8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	440b      	add	r3, r1
 8003ef2:	335c      	adds	r3, #92	; 0x5c
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f0e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f16:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f24:	461a      	mov	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f36:	461a      	mov	r2, r3
 8003f38:	2302      	movs	r3, #2
 8003f3a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	b2d8      	uxtb	r0, r3
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	440b      	add	r3, r1
 8003f4e:	335c      	adds	r3, #92	; 0x5c
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	4601      	mov	r1, r0
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f00a f844 	bl	800dfe4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003f5c:	bf00      	nop
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08a      	sub	sp, #40	; 0x28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	0c5b      	lsrs	r3, r3, #17
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	091b      	lsrs	r3, r3, #4
 8003f94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f98:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d003      	beq.n	8003fa8 <HCD_RXQLVL_IRQHandler+0x44>
 8003fa0:	2b05      	cmp	r3, #5
 8003fa2:	f000 8082 	beq.w	80040aa <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003fa6:	e083      	b.n	80040b0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d07f      	beq.n	80040ae <HCD_RXQLVL_IRQHandler+0x14a>
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	440b      	add	r3, r1
 8003fbc:	3344      	adds	r3, #68	; 0x44
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d074      	beq.n	80040ae <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6818      	ldr	r0, [r3, #0]
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	440b      	add	r3, r1
 8003fd6:	3344      	adds	r3, #68	; 0x44
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	b292      	uxth	r2, r2
 8003fde:	4619      	mov	r1, r3
 8003fe0:	f003 fe91 	bl	8007d06 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	440b      	add	r3, r1
 8003ff2:	3344      	adds	r3, #68	; 0x44
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	18d1      	adds	r1, r2, r3
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4613      	mov	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4403      	add	r3, r0
 8004008:	3344      	adds	r3, #68	; 0x44
 800400a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	440b      	add	r3, r1
 800401a:	334c      	adds	r3, #76	; 0x4c
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	18d1      	adds	r1, r2, r3
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4403      	add	r3, r0
 8004030:	334c      	adds	r3, #76	; 0x4c
 8004032:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	4413      	add	r3, r2
 800403c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <HCD_RXQLVL_IRQHandler+0x154>)
 8004044:	4013      	ands	r3, r2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d031      	beq.n	80040ae <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	4413      	add	r3, r2
 8004052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004060:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004068:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	4413      	add	r3, r2
 8004072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004076:	461a      	mov	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	440b      	add	r3, r1
 800408a:	3350      	adds	r3, #80	; 0x50
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	f083 0301 	eor.w	r3, r3, #1
 8004092:	b2d8      	uxtb	r0, r3
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	440b      	add	r3, r1
 80040a2:	3350      	adds	r3, #80	; 0x50
 80040a4:	4602      	mov	r2, r0
 80040a6:	701a      	strb	r2, [r3, #0]
      break;
 80040a8:	e001      	b.n	80040ae <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80040aa:	bf00      	nop
 80040ac:	e000      	b.n	80040b0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80040ae:	bf00      	nop
  }
}
 80040b0:	bf00      	nop
 80040b2:	3728      	adds	r7, #40	; 0x28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	1ff80000 	.word	0x1ff80000

080040bc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80040e8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d10b      	bne.n	800410c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d102      	bne.n	8004104 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f009 ff54 	bl	800dfac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	f043 0302 	orr.w	r3, r3, #2
 800410a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b08      	cmp	r3, #8
 8004114:	d132      	bne.n	800417c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f043 0308 	orr.w	r3, r3, #8
 800411c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b04      	cmp	r3, #4
 8004126:	d126      	bne.n	8004176 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	2b02      	cmp	r3, #2
 800412e:	d113      	bne.n	8004158 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004136:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800413a:	d106      	bne.n	800414a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2102      	movs	r1, #2
 8004142:	4618      	mov	r0, r3
 8004144:	f003 ff14 	bl	8007f70 <USB_InitFSLSPClkSel>
 8004148:	e011      	b.n	800416e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2101      	movs	r1, #1
 8004150:	4618      	mov	r0, r3
 8004152:	f003 ff0d 	bl	8007f70 <USB_InitFSLSPClkSel>
 8004156:	e00a      	b.n	800416e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d106      	bne.n	800416e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004166:	461a      	mov	r2, r3
 8004168:	f64e 2360 	movw	r3, #60000	; 0xea60
 800416c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f009 ff46 	bl	800e000 <HAL_HCD_PortEnabled_Callback>
 8004174:	e002      	b.n	800417c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f009 ff50 	bl	800e01c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	2b20      	cmp	r3, #32
 8004184:	d103      	bne.n	800418e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f043 0320 	orr.w	r3, r3, #32
 800418c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004194:	461a      	mov	r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	6013      	str	r3, [r2, #0]
}
 800419a:	bf00      	nop
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80041ac:	4b19      	ldr	r3, [pc, #100]	; (8004214 <HAL_PWREx_ConfigSupply+0x70>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d00a      	beq.n	80041ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80041b8:	4b16      	ldr	r3, [pc, #88]	; (8004214 <HAL_PWREx_ConfigSupply+0x70>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d001      	beq.n	80041ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e01f      	b.n	800420a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e01d      	b.n	800420a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80041ce:	4b11      	ldr	r3, [pc, #68]	; (8004214 <HAL_PWREx_ConfigSupply+0x70>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f023 0207 	bic.w	r2, r3, #7
 80041d6:	490f      	ldr	r1, [pc, #60]	; (8004214 <HAL_PWREx_ConfigSupply+0x70>)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80041de:	f7fd fac9 	bl	8001774 <HAL_GetTick>
 80041e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80041e4:	e009      	b.n	80041fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80041e6:	f7fd fac5 	bl	8001774 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041f4:	d901      	bls.n	80041fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e007      	b.n	800420a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80041fa:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_PWREx_ConfigSupply+0x70>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004206:	d1ee      	bne.n	80041e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	58024800 	.word	0x58024800

08004218 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800421c:	4b05      	ldr	r3, [pc, #20]	; (8004234 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4a04      	ldr	r2, [pc, #16]	; (8004234 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004226:	60d3      	str	r3, [r2, #12]
}
 8004228:	bf00      	nop
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	58024800 	.word	0x58024800

08004238 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08c      	sub	sp, #48	; 0x30
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e3ff      	b.n	8004a4a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 8087 	beq.w	8004366 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004258:	4b99      	ldr	r3, [pc, #612]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004260:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004262:	4b97      	ldr	r3, [pc, #604]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426a:	2b10      	cmp	r3, #16
 800426c:	d007      	beq.n	800427e <HAL_RCC_OscConfig+0x46>
 800426e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004270:	2b18      	cmp	r3, #24
 8004272:	d110      	bne.n	8004296 <HAL_RCC_OscConfig+0x5e>
 8004274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d10b      	bne.n	8004296 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800427e:	4b90      	ldr	r3, [pc, #576]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d06c      	beq.n	8004364 <HAL_RCC_OscConfig+0x12c>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d168      	bne.n	8004364 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e3d9      	b.n	8004a4a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429e:	d106      	bne.n	80042ae <HAL_RCC_OscConfig+0x76>
 80042a0:	4b87      	ldr	r3, [pc, #540]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a86      	ldr	r2, [pc, #536]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 80042a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	e02e      	b.n	800430c <HAL_RCC_OscConfig+0xd4>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x98>
 80042b6:	4b82      	ldr	r3, [pc, #520]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a81      	ldr	r2, [pc, #516]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 80042bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	4b7f      	ldr	r3, [pc, #508]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a7e      	ldr	r2, [pc, #504]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 80042c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e01d      	b.n	800430c <HAL_RCC_OscConfig+0xd4>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042d8:	d10c      	bne.n	80042f4 <HAL_RCC_OscConfig+0xbc>
 80042da:	4b79      	ldr	r3, [pc, #484]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a78      	ldr	r2, [pc, #480]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 80042e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	4b76      	ldr	r3, [pc, #472]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a75      	ldr	r2, [pc, #468]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e00b      	b.n	800430c <HAL_RCC_OscConfig+0xd4>
 80042f4:	4b72      	ldr	r3, [pc, #456]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a71      	ldr	r2, [pc, #452]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 80042fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b6f      	ldr	r3, [pc, #444]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a6e      	ldr	r2, [pc, #440]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 8004306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800430a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d013      	beq.n	800433c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fd fa2e 	bl	8001774 <HAL_GetTick>
 8004318:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800431c:	f7fd fa2a 	bl	8001774 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	; 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e38d      	b.n	8004a4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800432e:	4b64      	ldr	r3, [pc, #400]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0xe4>
 800433a:	e014      	b.n	8004366 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fd fa1a 	bl	8001774 <HAL_GetTick>
 8004340:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004344:	f7fd fa16 	bl	8001774 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b64      	cmp	r3, #100	; 0x64
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e379      	b.n	8004a4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004356:	4b5a      	ldr	r3, [pc, #360]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x10c>
 8004362:	e000      	b.n	8004366 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 80ae 	beq.w	80044d0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004374:	4b52      	ldr	r3, [pc, #328]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800437c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800437e:	4b50      	ldr	r3, [pc, #320]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d007      	beq.n	800439a <HAL_RCC_OscConfig+0x162>
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	2b18      	cmp	r3, #24
 800438e:	d13a      	bne.n	8004406 <HAL_RCC_OscConfig+0x1ce>
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d135      	bne.n	8004406 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800439a:	4b49      	ldr	r3, [pc, #292]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <HAL_RCC_OscConfig+0x17a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e34b      	b.n	8004a4a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b2:	f7fd fa0d 	bl	80017d0 <HAL_GetREVID>
 80043b6:	4602      	mov	r2, r0
 80043b8:	f241 0303 	movw	r3, #4099	; 0x1003
 80043bc:	429a      	cmp	r2, r3
 80043be:	d817      	bhi.n	80043f0 <HAL_RCC_OscConfig+0x1b8>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	2b40      	cmp	r3, #64	; 0x40
 80043c6:	d108      	bne.n	80043da <HAL_RCC_OscConfig+0x1a2>
 80043c8:	4b3d      	ldr	r3, [pc, #244]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80043d0:	4a3b      	ldr	r2, [pc, #236]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 80043d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043d8:	e07a      	b.n	80044d0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043da:	4b39      	ldr	r3, [pc, #228]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	031b      	lsls	r3, r3, #12
 80043e8:	4935      	ldr	r1, [pc, #212]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043ee:	e06f      	b.n	80044d0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f0:	4b33      	ldr	r3, [pc, #204]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	061b      	lsls	r3, r3, #24
 80043fe:	4930      	ldr	r1, [pc, #192]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 8004400:	4313      	orrs	r3, r2
 8004402:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004404:	e064      	b.n	80044d0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d045      	beq.n	800449a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800440e:	4b2c      	ldr	r3, [pc, #176]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 0219 	bic.w	r2, r3, #25
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	4929      	ldr	r1, [pc, #164]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 800441c:	4313      	orrs	r3, r2
 800441e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fd f9a8 	bl	8001774 <HAL_GetTick>
 8004424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004428:	f7fd f9a4 	bl	8001774 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e307      	b.n	8004a4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800443a:	4b21      	ldr	r3, [pc, #132]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f0      	beq.n	8004428 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004446:	f7fd f9c3 	bl	80017d0 <HAL_GetREVID>
 800444a:	4602      	mov	r2, r0
 800444c:	f241 0303 	movw	r3, #4099	; 0x1003
 8004450:	429a      	cmp	r2, r3
 8004452:	d817      	bhi.n	8004484 <HAL_RCC_OscConfig+0x24c>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	2b40      	cmp	r3, #64	; 0x40
 800445a:	d108      	bne.n	800446e <HAL_RCC_OscConfig+0x236>
 800445c:	4b18      	ldr	r3, [pc, #96]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004464:	4a16      	ldr	r2, [pc, #88]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 8004466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800446a:	6053      	str	r3, [r2, #4]
 800446c:	e030      	b.n	80044d0 <HAL_RCC_OscConfig+0x298>
 800446e:	4b14      	ldr	r3, [pc, #80]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	031b      	lsls	r3, r3, #12
 800447c:	4910      	ldr	r1, [pc, #64]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 800447e:	4313      	orrs	r3, r2
 8004480:	604b      	str	r3, [r1, #4]
 8004482:	e025      	b.n	80044d0 <HAL_RCC_OscConfig+0x298>
 8004484:	4b0e      	ldr	r3, [pc, #56]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	061b      	lsls	r3, r3, #24
 8004492:	490b      	ldr	r1, [pc, #44]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 8004494:	4313      	orrs	r3, r2
 8004496:	604b      	str	r3, [r1, #4]
 8004498:	e01a      	b.n	80044d0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800449a:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a08      	ldr	r2, [pc, #32]	; (80044c0 <HAL_RCC_OscConfig+0x288>)
 80044a0:	f023 0301 	bic.w	r3, r3, #1
 80044a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a6:	f7fd f965 	bl	8001774 <HAL_GetTick>
 80044aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044ac:	e00a      	b.n	80044c4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ae:	f7fd f961 	bl	8001774 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d903      	bls.n	80044c4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e2c4      	b.n	8004a4a <HAL_RCC_OscConfig+0x812>
 80044c0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044c4:	4ba4      	ldr	r3, [pc, #656]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1ee      	bne.n	80044ae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0310 	and.w	r3, r3, #16
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80a9 	beq.w	8004630 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044de:	4b9e      	ldr	r3, [pc, #632]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044e8:	4b9b      	ldr	r3, [pc, #620]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 80044ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d007      	beq.n	8004504 <HAL_RCC_OscConfig+0x2cc>
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	2b18      	cmp	r3, #24
 80044f8:	d13a      	bne.n	8004570 <HAL_RCC_OscConfig+0x338>
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	2b01      	cmp	r3, #1
 8004502:	d135      	bne.n	8004570 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004504:	4b94      	ldr	r3, [pc, #592]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <HAL_RCC_OscConfig+0x2e4>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	2b80      	cmp	r3, #128	; 0x80
 8004516:	d001      	beq.n	800451c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e296      	b.n	8004a4a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800451c:	f7fd f958 	bl	80017d0 <HAL_GetREVID>
 8004520:	4602      	mov	r2, r0
 8004522:	f241 0303 	movw	r3, #4099	; 0x1003
 8004526:	429a      	cmp	r2, r3
 8004528:	d817      	bhi.n	800455a <HAL_RCC_OscConfig+0x322>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	2b20      	cmp	r3, #32
 8004530:	d108      	bne.n	8004544 <HAL_RCC_OscConfig+0x30c>
 8004532:	4b89      	ldr	r3, [pc, #548]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800453a:	4a87      	ldr	r2, [pc, #540]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 800453c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004540:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004542:	e075      	b.n	8004630 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004544:	4b84      	ldr	r3, [pc, #528]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	069b      	lsls	r3, r3, #26
 8004552:	4981      	ldr	r1, [pc, #516]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 8004554:	4313      	orrs	r3, r2
 8004556:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004558:	e06a      	b.n	8004630 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800455a:	4b7f      	ldr	r3, [pc, #508]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	061b      	lsls	r3, r3, #24
 8004568:	497b      	ldr	r1, [pc, #492]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 800456a:	4313      	orrs	r3, r2
 800456c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800456e:	e05f      	b.n	8004630 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d042      	beq.n	80045fe <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004578:	4b77      	ldr	r3, [pc, #476]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a76      	ldr	r2, [pc, #472]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 800457e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fd f8f6 	bl	8001774 <HAL_GetTick>
 8004588:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800458c:	f7fd f8f2 	bl	8001774 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e255      	b.n	8004a4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800459e:	4b6e      	ldr	r3, [pc, #440]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0f0      	beq.n	800458c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045aa:	f7fd f911 	bl	80017d0 <HAL_GetREVID>
 80045ae:	4602      	mov	r2, r0
 80045b0:	f241 0303 	movw	r3, #4099	; 0x1003
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d817      	bhi.n	80045e8 <HAL_RCC_OscConfig+0x3b0>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	2b20      	cmp	r3, #32
 80045be:	d108      	bne.n	80045d2 <HAL_RCC_OscConfig+0x39a>
 80045c0:	4b65      	ldr	r3, [pc, #404]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80045c8:	4a63      	ldr	r2, [pc, #396]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 80045ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045ce:	6053      	str	r3, [r2, #4]
 80045d0:	e02e      	b.n	8004630 <HAL_RCC_OscConfig+0x3f8>
 80045d2:	4b61      	ldr	r3, [pc, #388]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	069b      	lsls	r3, r3, #26
 80045e0:	495d      	ldr	r1, [pc, #372]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	604b      	str	r3, [r1, #4]
 80045e6:	e023      	b.n	8004630 <HAL_RCC_OscConfig+0x3f8>
 80045e8:	4b5b      	ldr	r3, [pc, #364]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	061b      	lsls	r3, r3, #24
 80045f6:	4958      	ldr	r1, [pc, #352]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60cb      	str	r3, [r1, #12]
 80045fc:	e018      	b.n	8004630 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80045fe:	4b56      	ldr	r3, [pc, #344]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a55      	ldr	r2, [pc, #340]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 8004604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460a:	f7fd f8b3 	bl	8001774 <HAL_GetTick>
 800460e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004612:	f7fd f8af 	bl	8001774 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e212      	b.n	8004a4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004624:	4b4c      	ldr	r3, [pc, #304]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1f0      	bne.n	8004612 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d036      	beq.n	80046aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d019      	beq.n	8004678 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004644:	4b44      	ldr	r3, [pc, #272]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 8004646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004648:	4a43      	ldr	r2, [pc, #268]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004650:	f7fd f890 	bl	8001774 <HAL_GetTick>
 8004654:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004658:	f7fd f88c 	bl	8001774 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e1ef      	b.n	8004a4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800466a:	4b3b      	ldr	r3, [pc, #236]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 800466c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0x420>
 8004676:	e018      	b.n	80046aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004678:	4b37      	ldr	r3, [pc, #220]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 800467a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800467c:	4a36      	ldr	r2, [pc, #216]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 800467e:	f023 0301 	bic.w	r3, r3, #1
 8004682:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004684:	f7fd f876 	bl	8001774 <HAL_GetTick>
 8004688:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800468c:	f7fd f872 	bl	8001774 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e1d5      	b.n	8004a4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800469e:	4b2e      	ldr	r3, [pc, #184]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 80046a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d036      	beq.n	8004724 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d019      	beq.n	80046f2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046be:	4b26      	ldr	r3, [pc, #152]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a25      	ldr	r2, [pc, #148]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 80046c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80046ca:	f7fd f853 	bl	8001774 <HAL_GetTick>
 80046ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80046d2:	f7fd f84f 	bl	8001774 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e1b2      	b.n	8004a4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046e4:	4b1c      	ldr	r3, [pc, #112]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x49a>
 80046f0:	e018      	b.n	8004724 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046f2:	4b19      	ldr	r3, [pc, #100]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a18      	ldr	r2, [pc, #96]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 80046f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80046fe:	f7fd f839 	bl	8001774 <HAL_GetTick>
 8004702:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004706:	f7fd f835 	bl	8001774 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e198      	b.n	8004a4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004718:	4b0f      	ldr	r3, [pc, #60]	; (8004758 <HAL_RCC_OscConfig+0x520>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1f0      	bne.n	8004706 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8085 	beq.w	800483c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004732:	4b0a      	ldr	r3, [pc, #40]	; (800475c <HAL_RCC_OscConfig+0x524>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a09      	ldr	r2, [pc, #36]	; (800475c <HAL_RCC_OscConfig+0x524>)
 8004738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800473c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800473e:	f7fd f819 	bl	8001774 <HAL_GetTick>
 8004742:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004744:	e00c      	b.n	8004760 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004746:	f7fd f815 	bl	8001774 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b64      	cmp	r3, #100	; 0x64
 8004752:	d905      	bls.n	8004760 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e178      	b.n	8004a4a <HAL_RCC_OscConfig+0x812>
 8004758:	58024400 	.word	0x58024400
 800475c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004760:	4b96      	ldr	r3, [pc, #600]	; (80049bc <HAL_RCC_OscConfig+0x784>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0ec      	beq.n	8004746 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d106      	bne.n	8004782 <HAL_RCC_OscConfig+0x54a>
 8004774:	4b92      	ldr	r3, [pc, #584]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 8004776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004778:	4a91      	ldr	r2, [pc, #580]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 800477a:	f043 0301 	orr.w	r3, r3, #1
 800477e:	6713      	str	r3, [r2, #112]	; 0x70
 8004780:	e02d      	b.n	80047de <HAL_RCC_OscConfig+0x5a6>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10c      	bne.n	80047a4 <HAL_RCC_OscConfig+0x56c>
 800478a:	4b8d      	ldr	r3, [pc, #564]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 800478c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478e:	4a8c      	ldr	r2, [pc, #560]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 8004790:	f023 0301 	bic.w	r3, r3, #1
 8004794:	6713      	str	r3, [r2, #112]	; 0x70
 8004796:	4b8a      	ldr	r3, [pc, #552]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	4a89      	ldr	r2, [pc, #548]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 800479c:	f023 0304 	bic.w	r3, r3, #4
 80047a0:	6713      	str	r3, [r2, #112]	; 0x70
 80047a2:	e01c      	b.n	80047de <HAL_RCC_OscConfig+0x5a6>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b05      	cmp	r3, #5
 80047aa:	d10c      	bne.n	80047c6 <HAL_RCC_OscConfig+0x58e>
 80047ac:	4b84      	ldr	r3, [pc, #528]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 80047ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b0:	4a83      	ldr	r2, [pc, #524]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 80047b2:	f043 0304 	orr.w	r3, r3, #4
 80047b6:	6713      	str	r3, [r2, #112]	; 0x70
 80047b8:	4b81      	ldr	r3, [pc, #516]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047bc:	4a80      	ldr	r2, [pc, #512]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 80047be:	f043 0301 	orr.w	r3, r3, #1
 80047c2:	6713      	str	r3, [r2, #112]	; 0x70
 80047c4:	e00b      	b.n	80047de <HAL_RCC_OscConfig+0x5a6>
 80047c6:	4b7e      	ldr	r3, [pc, #504]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	4a7d      	ldr	r2, [pc, #500]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 80047cc:	f023 0301 	bic.w	r3, r3, #1
 80047d0:	6713      	str	r3, [r2, #112]	; 0x70
 80047d2:	4b7b      	ldr	r3, [pc, #492]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d6:	4a7a      	ldr	r2, [pc, #488]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 80047d8:	f023 0304 	bic.w	r3, r3, #4
 80047dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d015      	beq.n	8004812 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e6:	f7fc ffc5 	bl	8001774 <HAL_GetTick>
 80047ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047ec:	e00a      	b.n	8004804 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047ee:	f7fc ffc1 	bl	8001774 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e122      	b.n	8004a4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004804:	4b6e      	ldr	r3, [pc, #440]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0ee      	beq.n	80047ee <HAL_RCC_OscConfig+0x5b6>
 8004810:	e014      	b.n	800483c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004812:	f7fc ffaf 	bl	8001774 <HAL_GetTick>
 8004816:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004818:	e00a      	b.n	8004830 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800481a:	f7fc ffab 	bl	8001774 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	f241 3288 	movw	r2, #5000	; 0x1388
 8004828:	4293      	cmp	r3, r2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e10c      	b.n	8004a4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004830:	4b63      	ldr	r3, [pc, #396]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 8004832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1ee      	bne.n	800481a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 8101 	beq.w	8004a48 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004846:	4b5e      	ldr	r3, [pc, #376]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800484e:	2b18      	cmp	r3, #24
 8004850:	f000 80bc 	beq.w	80049cc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	2b02      	cmp	r3, #2
 800485a:	f040 8095 	bne.w	8004988 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800485e:	4b58      	ldr	r3, [pc, #352]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a57      	ldr	r2, [pc, #348]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 8004864:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486a:	f7fc ff83 	bl	8001774 <HAL_GetTick>
 800486e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004872:	f7fc ff7f 	bl	8001774 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e0e2      	b.n	8004a4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004884:	4b4e      	ldr	r3, [pc, #312]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1f0      	bne.n	8004872 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004890:	4b4b      	ldr	r3, [pc, #300]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 8004892:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004894:	4b4b      	ldr	r3, [pc, #300]	; (80049c4 <HAL_RCC_OscConfig+0x78c>)
 8004896:	4013      	ands	r3, r2
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80048a0:	0112      	lsls	r2, r2, #4
 80048a2:	430a      	orrs	r2, r1
 80048a4:	4946      	ldr	r1, [pc, #280]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	628b      	str	r3, [r1, #40]	; 0x28
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	3b01      	subs	r3, #1
 80048b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b8:	3b01      	subs	r3, #1
 80048ba:	025b      	lsls	r3, r3, #9
 80048bc:	b29b      	uxth	r3, r3
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c4:	3b01      	subs	r3, #1
 80048c6:	041b      	lsls	r3, r3, #16
 80048c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d2:	3b01      	subs	r3, #1
 80048d4:	061b      	lsls	r3, r3, #24
 80048d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048da:	4939      	ldr	r1, [pc, #228]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80048e0:	4b37      	ldr	r3, [pc, #220]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	4a36      	ldr	r2, [pc, #216]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 80048e6:	f023 0301 	bic.w	r3, r3, #1
 80048ea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80048ec:	4b34      	ldr	r3, [pc, #208]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 80048ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048f0:	4b35      	ldr	r3, [pc, #212]	; (80049c8 <HAL_RCC_OscConfig+0x790>)
 80048f2:	4013      	ands	r3, r2
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80048f8:	00d2      	lsls	r2, r2, #3
 80048fa:	4931      	ldr	r1, [pc, #196]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004900:	4b2f      	ldr	r3, [pc, #188]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	f023 020c 	bic.w	r2, r3, #12
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	492c      	ldr	r1, [pc, #176]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 800490e:	4313      	orrs	r3, r2
 8004910:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004912:	4b2b      	ldr	r3, [pc, #172]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	f023 0202 	bic.w	r2, r3, #2
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491e:	4928      	ldr	r1, [pc, #160]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 8004920:	4313      	orrs	r3, r2
 8004922:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004924:	4b26      	ldr	r3, [pc, #152]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	4a25      	ldr	r2, [pc, #148]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 800492a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004930:	4b23      	ldr	r3, [pc, #140]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 8004932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004934:	4a22      	ldr	r2, [pc, #136]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 8004936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800493a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800493c:	4b20      	ldr	r3, [pc, #128]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 800493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004940:	4a1f      	ldr	r2, [pc, #124]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 8004942:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004946:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004948:	4b1d      	ldr	r3, [pc, #116]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	4a1c      	ldr	r2, [pc, #112]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004954:	4b1a      	ldr	r3, [pc, #104]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a19      	ldr	r2, [pc, #100]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 800495a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800495e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004960:	f7fc ff08 	bl	8001774 <HAL_GetTick>
 8004964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004968:	f7fc ff04 	bl	8001774 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e067      	b.n	8004a4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800497a:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f0      	beq.n	8004968 <HAL_RCC_OscConfig+0x730>
 8004986:	e05f      	b.n	8004a48 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004988:	4b0d      	ldr	r3, [pc, #52]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a0c      	ldr	r2, [pc, #48]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 800498e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004994:	f7fc feee 	bl	8001774 <HAL_GetTick>
 8004998:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800499c:	f7fc feea 	bl	8001774 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e04d      	b.n	8004a4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049ae:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <HAL_RCC_OscConfig+0x788>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0x764>
 80049ba:	e045      	b.n	8004a48 <HAL_RCC_OscConfig+0x810>
 80049bc:	58024800 	.word	0x58024800
 80049c0:	58024400 	.word	0x58024400
 80049c4:	fffffc0c 	.word	0xfffffc0c
 80049c8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80049cc:	4b21      	ldr	r3, [pc, #132]	; (8004a54 <HAL_RCC_OscConfig+0x81c>)
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80049d2:	4b20      	ldr	r3, [pc, #128]	; (8004a54 <HAL_RCC_OscConfig+0x81c>)
 80049d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d031      	beq.n	8004a44 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f003 0203 	and.w	r2, r3, #3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d12a      	bne.n	8004a44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	091b      	lsrs	r3, r3, #4
 80049f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d122      	bne.n	8004a44 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d11a      	bne.n	8004a44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	0a5b      	lsrs	r3, r3, #9
 8004a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d111      	bne.n	8004a44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	0c1b      	lsrs	r3, r3, #16
 8004a24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d108      	bne.n	8004a44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	0e1b      	lsrs	r3, r3, #24
 8004a36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d001      	beq.n	8004a48 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3730      	adds	r7, #48	; 0x30
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	58024400 	.word	0x58024400

08004a58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e19c      	b.n	8004da6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a6c:	4b8a      	ldr	r3, [pc, #552]	; (8004c98 <HAL_RCC_ClockConfig+0x240>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 030f 	and.w	r3, r3, #15
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d910      	bls.n	8004a9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7a:	4b87      	ldr	r3, [pc, #540]	; (8004c98 <HAL_RCC_ClockConfig+0x240>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f023 020f 	bic.w	r2, r3, #15
 8004a82:	4985      	ldr	r1, [pc, #532]	; (8004c98 <HAL_RCC_ClockConfig+0x240>)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8a:	4b83      	ldr	r3, [pc, #524]	; (8004c98 <HAL_RCC_ClockConfig+0x240>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d001      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e184      	b.n	8004da6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d010      	beq.n	8004aca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	4b7b      	ldr	r3, [pc, #492]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d908      	bls.n	8004aca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ab8:	4b78      	ldr	r3, [pc, #480]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	4975      	ldr	r1, [pc, #468]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d010      	beq.n	8004af8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	695a      	ldr	r2, [r3, #20]
 8004ada:	4b70      	ldr	r3, [pc, #448]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d908      	bls.n	8004af8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ae6:	4b6d      	ldr	r3, [pc, #436]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	496a      	ldr	r1, [pc, #424]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d010      	beq.n	8004b26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699a      	ldr	r2, [r3, #24]
 8004b08:	4b64      	ldr	r3, [pc, #400]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d908      	bls.n	8004b26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b14:	4b61      	ldr	r3, [pc, #388]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	495e      	ldr	r1, [pc, #376]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0320 	and.w	r3, r3, #32
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d010      	beq.n	8004b54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69da      	ldr	r2, [r3, #28]
 8004b36:	4b59      	ldr	r3, [pc, #356]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d908      	bls.n	8004b54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004b42:	4b56      	ldr	r3, [pc, #344]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	4953      	ldr	r1, [pc, #332]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d010      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	4b4d      	ldr	r3, [pc, #308]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	f003 030f 	and.w	r3, r3, #15
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d908      	bls.n	8004b82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b70:	4b4a      	ldr	r3, [pc, #296]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	f023 020f 	bic.w	r2, r3, #15
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	4947      	ldr	r1, [pc, #284]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d055      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004b8e:	4b43      	ldr	r3, [pc, #268]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	4940      	ldr	r1, [pc, #256]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d107      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ba8:	4b3c      	ldr	r3, [pc, #240]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d121      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0f6      	b.n	8004da6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d107      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bc0:	4b36      	ldr	r3, [pc, #216]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d115      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0ea      	b.n	8004da6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d107      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bd8:	4b30      	ldr	r3, [pc, #192]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d109      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0de      	b.n	8004da6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004be8:	4b2c      	ldr	r3, [pc, #176]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0d6      	b.n	8004da6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bf8:	4b28      	ldr	r3, [pc, #160]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	f023 0207 	bic.w	r2, r3, #7
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	4925      	ldr	r1, [pc, #148]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0a:	f7fc fdb3 	bl	8001774 <HAL_GetTick>
 8004c0e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c10:	e00a      	b.n	8004c28 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c12:	f7fc fdaf 	bl	8001774 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e0be      	b.n	8004da6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c28:	4b1c      	ldr	r3, [pc, #112]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d1eb      	bne.n	8004c12 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d010      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	4b14      	ldr	r3, [pc, #80]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d208      	bcs.n	8004c68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c56:	4b11      	ldr	r3, [pc, #68]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	f023 020f 	bic.w	r2, r3, #15
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	490e      	ldr	r1, [pc, #56]	; (8004c9c <HAL_RCC_ClockConfig+0x244>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c68:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <HAL_RCC_ClockConfig+0x240>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 030f 	and.w	r3, r3, #15
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d214      	bcs.n	8004ca0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c76:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <HAL_RCC_ClockConfig+0x240>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f023 020f 	bic.w	r2, r3, #15
 8004c7e:	4906      	ldr	r1, [pc, #24]	; (8004c98 <HAL_RCC_ClockConfig+0x240>)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c86:	4b04      	ldr	r3, [pc, #16]	; (8004c98 <HAL_RCC_ClockConfig+0x240>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d005      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e086      	b.n	8004da6 <HAL_RCC_ClockConfig+0x34e>
 8004c98:	52002000 	.word	0x52002000
 8004c9c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d010      	beq.n	8004cce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	4b3f      	ldr	r3, [pc, #252]	; (8004db0 <HAL_RCC_ClockConfig+0x358>)
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d208      	bcs.n	8004cce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004cbc:	4b3c      	ldr	r3, [pc, #240]	; (8004db0 <HAL_RCC_ClockConfig+0x358>)
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	4939      	ldr	r1, [pc, #228]	; (8004db0 <HAL_RCC_ClockConfig+0x358>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d010      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695a      	ldr	r2, [r3, #20]
 8004cde:	4b34      	ldr	r3, [pc, #208]	; (8004db0 <HAL_RCC_ClockConfig+0x358>)
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d208      	bcs.n	8004cfc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004cea:	4b31      	ldr	r3, [pc, #196]	; (8004db0 <HAL_RCC_ClockConfig+0x358>)
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	492e      	ldr	r1, [pc, #184]	; (8004db0 <HAL_RCC_ClockConfig+0x358>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d010      	beq.n	8004d2a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699a      	ldr	r2, [r3, #24]
 8004d0c:	4b28      	ldr	r3, [pc, #160]	; (8004db0 <HAL_RCC_ClockConfig+0x358>)
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d208      	bcs.n	8004d2a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d18:	4b25      	ldr	r3, [pc, #148]	; (8004db0 <HAL_RCC_ClockConfig+0x358>)
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	4922      	ldr	r1, [pc, #136]	; (8004db0 <HAL_RCC_ClockConfig+0x358>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d010      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69da      	ldr	r2, [r3, #28]
 8004d3a:	4b1d      	ldr	r3, [pc, #116]	; (8004db0 <HAL_RCC_ClockConfig+0x358>)
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d208      	bcs.n	8004d58 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004d46:	4b1a      	ldr	r3, [pc, #104]	; (8004db0 <HAL_RCC_ClockConfig+0x358>)
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	4917      	ldr	r1, [pc, #92]	; (8004db0 <HAL_RCC_ClockConfig+0x358>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d58:	f000 f834 	bl	8004dc4 <HAL_RCC_GetSysClockFreq>
 8004d5c:	4601      	mov	r1, r0
 8004d5e:	4b14      	ldr	r3, [pc, #80]	; (8004db0 <HAL_RCC_ClockConfig+0x358>)
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	0a1b      	lsrs	r3, r3, #8
 8004d64:	f003 030f 	and.w	r3, r3, #15
 8004d68:	4a12      	ldr	r2, [pc, #72]	; (8004db4 <HAL_RCC_ClockConfig+0x35c>)
 8004d6a:	5cd3      	ldrb	r3, [r2, r3]
 8004d6c:	f003 031f 	and.w	r3, r3, #31
 8004d70:	fa21 f303 	lsr.w	r3, r1, r3
 8004d74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d76:	4b0e      	ldr	r3, [pc, #56]	; (8004db0 <HAL_RCC_ClockConfig+0x358>)
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	4a0d      	ldr	r2, [pc, #52]	; (8004db4 <HAL_RCC_ClockConfig+0x35c>)
 8004d80:	5cd3      	ldrb	r3, [r2, r3]
 8004d82:	f003 031f 	and.w	r3, r3, #31
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8c:	4a0a      	ldr	r2, [pc, #40]	; (8004db8 <HAL_RCC_ClockConfig+0x360>)
 8004d8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d90:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <HAL_RCC_ClockConfig+0x364>)
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004d96:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <HAL_RCC_ClockConfig+0x368>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fc fca0 	bl	80016e0 <HAL_InitTick>
 8004da0:	4603      	mov	r3, r0
 8004da2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	58024400 	.word	0x58024400
 8004db4:	08013dbc 	.word	0x08013dbc
 8004db8:	24000004 	.word	0x24000004
 8004dbc:	24000000 	.word	0x24000000
 8004dc0:	24000008 	.word	0x24000008

08004dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b089      	sub	sp, #36	; 0x24
 8004dc8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dca:	4baf      	ldr	r3, [pc, #700]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dd2:	2b18      	cmp	r3, #24
 8004dd4:	f200 814e 	bhi.w	8005074 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004dd8:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dde:	bf00      	nop
 8004de0:	08004e45 	.word	0x08004e45
 8004de4:	08005075 	.word	0x08005075
 8004de8:	08005075 	.word	0x08005075
 8004dec:	08005075 	.word	0x08005075
 8004df0:	08005075 	.word	0x08005075
 8004df4:	08005075 	.word	0x08005075
 8004df8:	08005075 	.word	0x08005075
 8004dfc:	08005075 	.word	0x08005075
 8004e00:	08004e6b 	.word	0x08004e6b
 8004e04:	08005075 	.word	0x08005075
 8004e08:	08005075 	.word	0x08005075
 8004e0c:	08005075 	.word	0x08005075
 8004e10:	08005075 	.word	0x08005075
 8004e14:	08005075 	.word	0x08005075
 8004e18:	08005075 	.word	0x08005075
 8004e1c:	08005075 	.word	0x08005075
 8004e20:	08004e71 	.word	0x08004e71
 8004e24:	08005075 	.word	0x08005075
 8004e28:	08005075 	.word	0x08005075
 8004e2c:	08005075 	.word	0x08005075
 8004e30:	08005075 	.word	0x08005075
 8004e34:	08005075 	.word	0x08005075
 8004e38:	08005075 	.word	0x08005075
 8004e3c:	08005075 	.word	0x08005075
 8004e40:	08004e77 	.word	0x08004e77
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e44:	4b90      	ldr	r3, [pc, #576]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0320 	and.w	r3, r3, #32
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d009      	beq.n	8004e64 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e50:	4b8d      	ldr	r3, [pc, #564]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	08db      	lsrs	r3, r3, #3
 8004e56:	f003 0303 	and.w	r3, r3, #3
 8004e5a:	4a8c      	ldr	r2, [pc, #560]	; (800508c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e60:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004e62:	e10a      	b.n	800507a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004e64:	4b89      	ldr	r3, [pc, #548]	; (800508c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004e66:	61bb      	str	r3, [r7, #24]
    break;
 8004e68:	e107      	b.n	800507a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004e6a:	4b89      	ldr	r3, [pc, #548]	; (8005090 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004e6c:	61bb      	str	r3, [r7, #24]
    break;
 8004e6e:	e104      	b.n	800507a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004e70:	4b88      	ldr	r3, [pc, #544]	; (8005094 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004e72:	61bb      	str	r3, [r7, #24]
    break;
 8004e74:	e101      	b.n	800507a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e76:	4b84      	ldr	r3, [pc, #528]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004e80:	4b81      	ldr	r3, [pc, #516]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	091b      	lsrs	r3, r3, #4
 8004e86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e8a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004e8c:	4b7e      	ldr	r3, [pc, #504]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004e96:	4b7c      	ldr	r3, [pc, #496]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9a:	08db      	lsrs	r3, r3, #3
 8004e9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	fb02 f303 	mul.w	r3, r2, r3
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 80da 	beq.w	800506e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d05a      	beq.n	8004f76 <HAL_RCC_GetSysClockFreq+0x1b2>
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d302      	bcc.n	8004eca <HAL_RCC_GetSysClockFreq+0x106>
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d078      	beq.n	8004fba <HAL_RCC_GetSysClockFreq+0x1f6>
 8004ec8:	e099      	b.n	8004ffe <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eca:	4b6f      	ldr	r3, [pc, #444]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d02d      	beq.n	8004f32 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ed6:	4b6c      	ldr	r3, [pc, #432]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	08db      	lsrs	r3, r3, #3
 8004edc:	f003 0303 	and.w	r3, r3, #3
 8004ee0:	4a6a      	ldr	r2, [pc, #424]	; (800508c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	ee07 3a90 	vmov	s15, r3
 8004ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f00:	4b61      	ldr	r3, [pc, #388]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f08:	ee07 3a90 	vmov	s15, r3
 8004f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f10:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f14:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005098 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004f18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004f30:	e087      	b.n	8005042 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	ee07 3a90 	vmov	s15, r3
 8004f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3c:	eddf 6a57 	vldr	s13, [pc, #348]	; 800509c <HAL_RCC_GetSysClockFreq+0x2d8>
 8004f40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f44:	4b50      	ldr	r3, [pc, #320]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4c:	ee07 3a90 	vmov	s15, r3
 8004f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f54:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f58:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005098 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004f5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f74:	e065      	b.n	8005042 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	ee07 3a90 	vmov	s15, r3
 8004f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f80:	eddf 6a47 	vldr	s13, [pc, #284]	; 80050a0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004f84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f88:	4b3f      	ldr	r3, [pc, #252]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f90:	ee07 3a90 	vmov	s15, r3
 8004f94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f98:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f9c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005098 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004fa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fb8:	e043      	b.n	8005042 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	ee07 3a90 	vmov	s15, r3
 8004fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80050a4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004fc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fcc:	4b2e      	ldr	r3, [pc, #184]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd4:	ee07 3a90 	vmov	s15, r3
 8004fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fdc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fe0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005098 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004fe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ff0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ffc:	e021      	b.n	8005042 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	ee07 3a90 	vmov	s15, r3
 8005004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005008:	eddf 6a25 	vldr	s13, [pc, #148]	; 80050a0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800500c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005010:	4b1d      	ldr	r3, [pc, #116]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005018:	ee07 3a90 	vmov	s15, r3
 800501c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005020:	ed97 6a02 	vldr	s12, [r7, #8]
 8005024:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005098 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005028:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800502c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005030:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005034:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800503c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005040:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005042:	4b11      	ldr	r3, [pc, #68]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	0a5b      	lsrs	r3, r3, #9
 8005048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800504c:	3301      	adds	r3, #1
 800504e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800505a:	edd7 6a07 	vldr	s13, [r7, #28]
 800505e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005066:	ee17 3a90 	vmov	r3, s15
 800506a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800506c:	e005      	b.n	800507a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	61bb      	str	r3, [r7, #24]
    break;
 8005072:	e002      	b.n	800507a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005074:	4b06      	ldr	r3, [pc, #24]	; (8005090 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005076:	61bb      	str	r3, [r7, #24]
    break;
 8005078:	bf00      	nop
  }

  return sysclockfreq;
 800507a:	69bb      	ldr	r3, [r7, #24]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3724      	adds	r7, #36	; 0x24
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	58024400 	.word	0x58024400
 800508c:	03d09000 	.word	0x03d09000
 8005090:	003d0900 	.word	0x003d0900
 8005094:	007a1200 	.word	0x007a1200
 8005098:	46000000 	.word	0x46000000
 800509c:	4c742400 	.word	0x4c742400
 80050a0:	4a742400 	.word	0x4a742400
 80050a4:	4af42400 	.word	0x4af42400

080050a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80050ae:	f7ff fe89 	bl	8004dc4 <HAL_RCC_GetSysClockFreq>
 80050b2:	4601      	mov	r1, r0
 80050b4:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	0a1b      	lsrs	r3, r3, #8
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	4a0f      	ldr	r2, [pc, #60]	; (80050fc <HAL_RCC_GetHCLKFreq+0x54>)
 80050c0:	5cd3      	ldrb	r3, [r2, r3]
 80050c2:	f003 031f 	and.w	r3, r3, #31
 80050c6:	fa21 f303 	lsr.w	r3, r1, r3
 80050ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050cc:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	4a09      	ldr	r2, [pc, #36]	; (80050fc <HAL_RCC_GetHCLKFreq+0x54>)
 80050d6:	5cd3      	ldrb	r3, [r2, r3]
 80050d8:	f003 031f 	and.w	r3, r3, #31
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	fa22 f303 	lsr.w	r3, r2, r3
 80050e2:	4a07      	ldr	r2, [pc, #28]	; (8005100 <HAL_RCC_GetHCLKFreq+0x58>)
 80050e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050e6:	4a07      	ldr	r2, [pc, #28]	; (8005104 <HAL_RCC_GetHCLKFreq+0x5c>)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80050ec:	4b04      	ldr	r3, [pc, #16]	; (8005100 <HAL_RCC_GetHCLKFreq+0x58>)
 80050ee:	681b      	ldr	r3, [r3, #0]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	58024400 	.word	0x58024400
 80050fc:	08013dbc 	.word	0x08013dbc
 8005100:	24000004 	.word	0x24000004
 8005104:	24000000 	.word	0x24000000

08005108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800510c:	f7ff ffcc 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 8005110:	4601      	mov	r1, r0
 8005112:	4b06      	ldr	r3, [pc, #24]	; (800512c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	091b      	lsrs	r3, r3, #4
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	4a04      	ldr	r2, [pc, #16]	; (8005130 <HAL_RCC_GetPCLK1Freq+0x28>)
 800511e:	5cd3      	ldrb	r3, [r2, r3]
 8005120:	f003 031f 	and.w	r3, r3, #31
 8005124:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005128:	4618      	mov	r0, r3
 800512a:	bd80      	pop	{r7, pc}
 800512c:	58024400 	.word	0x58024400
 8005130:	08013dbc 	.word	0x08013dbc

08005134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005138:	f7ff ffb6 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 800513c:	4601      	mov	r1, r0
 800513e:	4b06      	ldr	r3, [pc, #24]	; (8005158 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	0a1b      	lsrs	r3, r3, #8
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	4a04      	ldr	r2, [pc, #16]	; (800515c <HAL_RCC_GetPCLK2Freq+0x28>)
 800514a:	5cd3      	ldrb	r3, [r2, r3]
 800514c:	f003 031f 	and.w	r3, r3, #31
 8005150:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005154:	4618      	mov	r0, r3
 8005156:	bd80      	pop	{r7, pc}
 8005158:	58024400 	.word	0x58024400
 800515c:	08013dbc 	.word	0x08013dbc

08005160 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005168:	2300      	movs	r3, #0
 800516a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800516c:	2300      	movs	r3, #0
 800516e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d03d      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005180:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005184:	d013      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800518a:	d802      	bhi.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800518c:	2b00      	cmp	r3, #0
 800518e:	d007      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005190:	e01f      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005192:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005196:	d013      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005198:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800519c:	d01c      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800519e:	e018      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051a0:	4baf      	ldr	r3, [pc, #700]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	4aae      	ldr	r2, [pc, #696]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80051ac:	e015      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3304      	adds	r3, #4
 80051b2:	2102      	movs	r1, #2
 80051b4:	4618      	mov	r0, r3
 80051b6:	f001 f96f 	bl	8006498 <RCCEx_PLL2_Config>
 80051ba:	4603      	mov	r3, r0
 80051bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80051be:	e00c      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3324      	adds	r3, #36	; 0x24
 80051c4:	2102      	movs	r1, #2
 80051c6:	4618      	mov	r0, r3
 80051c8:	f001 fa18 	bl	80065fc <RCCEx_PLL3_Config>
 80051cc:	4603      	mov	r3, r0
 80051ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80051d0:	e003      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	75fb      	strb	r3, [r7, #23]
      break;
 80051d6:	e000      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80051d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051da:	7dfb      	ldrb	r3, [r7, #23]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d109      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80051e0:	4b9f      	ldr	r3, [pc, #636]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051ec:	499c      	ldr	r1, [pc, #624]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	650b      	str	r3, [r1, #80]	; 0x50
 80051f2:	e001      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
 80051f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005200:	2b00      	cmp	r3, #0
 8005202:	d03d      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005208:	2b04      	cmp	r3, #4
 800520a:	d826      	bhi.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800520c:	a201      	add	r2, pc, #4	; (adr r2, 8005214 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800520e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005212:	bf00      	nop
 8005214:	08005229 	.word	0x08005229
 8005218:	08005237 	.word	0x08005237
 800521c:	08005249 	.word	0x08005249
 8005220:	08005261 	.word	0x08005261
 8005224:	08005261 	.word	0x08005261
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005228:	4b8d      	ldr	r3, [pc, #564]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	4a8c      	ldr	r2, [pc, #560]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800522e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005232:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005234:	e015      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3304      	adds	r3, #4
 800523a:	2100      	movs	r1, #0
 800523c:	4618      	mov	r0, r3
 800523e:	f001 f92b 	bl	8006498 <RCCEx_PLL2_Config>
 8005242:	4603      	mov	r3, r0
 8005244:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005246:	e00c      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3324      	adds	r3, #36	; 0x24
 800524c:	2100      	movs	r1, #0
 800524e:	4618      	mov	r0, r3
 8005250:	f001 f9d4 	bl	80065fc <RCCEx_PLL3_Config>
 8005254:	4603      	mov	r3, r0
 8005256:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005258:	e003      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	75fb      	strb	r3, [r7, #23]
      break;
 800525e:	e000      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8005260:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005262:	7dfb      	ldrb	r3, [r7, #23]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d109      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005268:	4b7d      	ldr	r3, [pc, #500]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800526a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526c:	f023 0207 	bic.w	r2, r3, #7
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005274:	497a      	ldr	r1, [pc, #488]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005276:	4313      	orrs	r3, r2
 8005278:	650b      	str	r3, [r1, #80]	; 0x50
 800527a:	e001      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527c:	7dfb      	ldrb	r3, [r7, #23]
 800527e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005288:	2b00      	cmp	r3, #0
 800528a:	d03e      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005290:	2b80      	cmp	r3, #128	; 0x80
 8005292:	d01c      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005294:	2b80      	cmp	r3, #128	; 0x80
 8005296:	d804      	bhi.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005298:	2b00      	cmp	r3, #0
 800529a:	d008      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800529c:	2b40      	cmp	r3, #64	; 0x40
 800529e:	d00d      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80052a0:	e01e      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80052a2:	2bc0      	cmp	r3, #192	; 0xc0
 80052a4:	d01f      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80052a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052aa:	d01e      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80052ac:	e018      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ae:	4b6c      	ldr	r3, [pc, #432]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b2:	4a6b      	ldr	r2, [pc, #428]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80052ba:	e017      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	3304      	adds	r3, #4
 80052c0:	2100      	movs	r1, #0
 80052c2:	4618      	mov	r0, r3
 80052c4:	f001 f8e8 	bl	8006498 <RCCEx_PLL2_Config>
 80052c8:	4603      	mov	r3, r0
 80052ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80052cc:	e00e      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3324      	adds	r3, #36	; 0x24
 80052d2:	2100      	movs	r1, #0
 80052d4:	4618      	mov	r0, r3
 80052d6:	f001 f991 	bl	80065fc <RCCEx_PLL3_Config>
 80052da:	4603      	mov	r3, r0
 80052dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80052de:	e005      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	75fb      	strb	r3, [r7, #23]
      break;
 80052e4:	e002      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80052e6:	bf00      	nop
 80052e8:	e000      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80052ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052ec:	7dfb      	ldrb	r3, [r7, #23]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d109      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80052f2:	4b5b      	ldr	r3, [pc, #364]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052fe:	4958      	ldr	r1, [pc, #352]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005300:	4313      	orrs	r3, r2
 8005302:	650b      	str	r3, [r1, #80]	; 0x50
 8005304:	e001      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005306:	7dfb      	ldrb	r3, [r7, #23]
 8005308:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005312:	2b00      	cmp	r3, #0
 8005314:	d044      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800531c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005320:	d01f      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005326:	d805      	bhi.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800532c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005330:	d00e      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8005332:	e01f      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005334:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005338:	d01f      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800533a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800533e:	d01e      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005340:	e018      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005342:	4b47      	ldr	r3, [pc, #284]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	4a46      	ldr	r2, [pc, #280]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800534c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800534e:	e017      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3304      	adds	r3, #4
 8005354:	2100      	movs	r1, #0
 8005356:	4618      	mov	r0, r3
 8005358:	f001 f89e 	bl	8006498 <RCCEx_PLL2_Config>
 800535c:	4603      	mov	r3, r0
 800535e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005360:	e00e      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3324      	adds	r3, #36	; 0x24
 8005366:	2100      	movs	r1, #0
 8005368:	4618      	mov	r0, r3
 800536a:	f001 f947 	bl	80065fc <RCCEx_PLL3_Config>
 800536e:	4603      	mov	r3, r0
 8005370:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005372:	e005      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	75fb      	strb	r3, [r7, #23]
      break;
 8005378:	e002      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800537a:	bf00      	nop
 800537c:	e000      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800537e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005380:	7dfb      	ldrb	r3, [r7, #23]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005386:	4b36      	ldr	r3, [pc, #216]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005394:	4932      	ldr	r1, [pc, #200]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005396:	4313      	orrs	r3, r2
 8005398:	658b      	str	r3, [r1, #88]	; 0x58
 800539a:	e001      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800539c:	7dfb      	ldrb	r3, [r7, #23]
 800539e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d044      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80053b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053b6:	d01f      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80053b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053bc:	d805      	bhi.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80053c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053c6:	d00e      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80053c8:	e01f      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80053ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053ce:	d01f      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80053d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053d4:	d01e      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80053d6:	e018      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053d8:	4b21      	ldr	r3, [pc, #132]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053dc:	4a20      	ldr	r2, [pc, #128]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80053e4:	e017      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3304      	adds	r3, #4
 80053ea:	2100      	movs	r1, #0
 80053ec:	4618      	mov	r0, r3
 80053ee:	f001 f853 	bl	8006498 <RCCEx_PLL2_Config>
 80053f2:	4603      	mov	r3, r0
 80053f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80053f6:	e00e      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	3324      	adds	r3, #36	; 0x24
 80053fc:	2100      	movs	r1, #0
 80053fe:	4618      	mov	r0, r3
 8005400:	f001 f8fc 	bl	80065fc <RCCEx_PLL3_Config>
 8005404:	4603      	mov	r3, r0
 8005406:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005408:	e005      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	75fb      	strb	r3, [r7, #23]
      break;
 800540e:	e002      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005410:	bf00      	nop
 8005412:	e000      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005416:	7dfb      	ldrb	r3, [r7, #23]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10a      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800541c:	4b10      	ldr	r3, [pc, #64]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800541e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005420:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800542a:	490d      	ldr	r1, [pc, #52]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800542c:	4313      	orrs	r3, r2
 800542e:	658b      	str	r3, [r1, #88]	; 0x58
 8005430:	e001      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005432:	7dfb      	ldrb	r3, [r7, #23]
 8005434:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d035      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005446:	2b10      	cmp	r3, #16
 8005448:	d00c      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800544a:	2b10      	cmp	r3, #16
 800544c:	d802      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01b      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005452:	e017      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005454:	2b20      	cmp	r3, #32
 8005456:	d00c      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005458:	2b30      	cmp	r3, #48	; 0x30
 800545a:	d018      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800545c:	e012      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800545e:	bf00      	nop
 8005460:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005464:	4baf      	ldr	r3, [pc, #700]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005468:	4aae      	ldr	r2, [pc, #696]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800546a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800546e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005470:	e00e      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3304      	adds	r3, #4
 8005476:	2102      	movs	r1, #2
 8005478:	4618      	mov	r0, r3
 800547a:	f001 f80d 	bl	8006498 <RCCEx_PLL2_Config>
 800547e:	4603      	mov	r3, r0
 8005480:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005482:	e005      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	75fb      	strb	r3, [r7, #23]
      break;
 8005488:	e002      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800548a:	bf00      	nop
 800548c:	e000      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800548e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005490:	7dfb      	ldrb	r3, [r7, #23]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d109      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005496:	4ba3      	ldr	r3, [pc, #652]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800549a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a2:	49a0      	ldr	r1, [pc, #640]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80054a8:	e001      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054aa:	7dfb      	ldrb	r3, [r7, #23]
 80054ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d042      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c2:	d01f      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80054c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c8:	d805      	bhi.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80054ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d2:	d00e      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80054d4:	e01f      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80054d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054da:	d01f      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80054dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054e0:	d01e      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80054e2:	e018      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054e4:	4b8f      	ldr	r3, [pc, #572]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e8:	4a8e      	ldr	r2, [pc, #568]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80054f0:	e017      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3304      	adds	r3, #4
 80054f6:	2100      	movs	r1, #0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 ffcd 	bl	8006498 <RCCEx_PLL2_Config>
 80054fe:	4603      	mov	r3, r0
 8005500:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005502:	e00e      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3324      	adds	r3, #36	; 0x24
 8005508:	2100      	movs	r1, #0
 800550a:	4618      	mov	r0, r3
 800550c:	f001 f876 	bl	80065fc <RCCEx_PLL3_Config>
 8005510:	4603      	mov	r3, r0
 8005512:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005514:	e005      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	75fb      	strb	r3, [r7, #23]
      break;
 800551a:	e002      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800551c:	bf00      	nop
 800551e:	e000      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005520:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005522:	7dfb      	ldrb	r3, [r7, #23]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d109      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005528:	4b7e      	ldr	r3, [pc, #504]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800552a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800552c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005534:	497b      	ldr	r1, [pc, #492]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005536:	4313      	orrs	r3, r2
 8005538:	650b      	str	r3, [r1, #80]	; 0x50
 800553a:	e001      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800553c:	7dfb      	ldrb	r3, [r7, #23]
 800553e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d042      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005554:	d01b      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005556:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800555a:	d805      	bhi.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800555c:	2b00      	cmp	r3, #0
 800555e:	d022      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005564:	d00a      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005566:	e01b      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005568:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800556c:	d01d      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800556e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005572:	d01c      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005574:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005578:	d01b      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800557a:	e011      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3304      	adds	r3, #4
 8005580:	2101      	movs	r1, #1
 8005582:	4618      	mov	r0, r3
 8005584:	f000 ff88 	bl	8006498 <RCCEx_PLL2_Config>
 8005588:	4603      	mov	r3, r0
 800558a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800558c:	e012      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3324      	adds	r3, #36	; 0x24
 8005592:	2101      	movs	r1, #1
 8005594:	4618      	mov	r0, r3
 8005596:	f001 f831 	bl	80065fc <RCCEx_PLL3_Config>
 800559a:	4603      	mov	r3, r0
 800559c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800559e:	e009      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	75fb      	strb	r3, [r7, #23]
      break;
 80055a4:	e006      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80055a6:	bf00      	nop
 80055a8:	e004      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80055aa:	bf00      	nop
 80055ac:	e002      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80055ae:	bf00      	nop
 80055b0:	e000      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80055b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055b4:	7dfb      	ldrb	r3, [r7, #23]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d109      	bne.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80055ba:	4b5a      	ldr	r3, [pc, #360]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055be:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c6:	4957      	ldr	r1, [pc, #348]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	650b      	str	r3, [r1, #80]	; 0x50
 80055cc:	e001      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ce:	7dfb      	ldrb	r3, [r7, #23]
 80055d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d044      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80055e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055e8:	d01b      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80055ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ee:	d805      	bhi.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d022      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80055f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055f8:	d00a      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80055fa:	e01b      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80055fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005600:	d01d      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005602:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005606:	d01c      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005608:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800560c:	d01b      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800560e:	e011      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3304      	adds	r3, #4
 8005614:	2101      	movs	r1, #1
 8005616:	4618      	mov	r0, r3
 8005618:	f000 ff3e 	bl	8006498 <RCCEx_PLL2_Config>
 800561c:	4603      	mov	r3, r0
 800561e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005620:	e012      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3324      	adds	r3, #36	; 0x24
 8005626:	2101      	movs	r1, #1
 8005628:	4618      	mov	r0, r3
 800562a:	f000 ffe7 	bl	80065fc <RCCEx_PLL3_Config>
 800562e:	4603      	mov	r3, r0
 8005630:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005632:	e009      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	75fb      	strb	r3, [r7, #23]
      break;
 8005638:	e006      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800563a:	bf00      	nop
 800563c:	e004      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800563e:	bf00      	nop
 8005640:	e002      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005642:	bf00      	nop
 8005644:	e000      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005646:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005648:	7dfb      	ldrb	r3, [r7, #23]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10a      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800564e:	4b35      	ldr	r3, [pc, #212]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005652:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800565c:	4931      	ldr	r1, [pc, #196]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800565e:	4313      	orrs	r3, r2
 8005660:	658b      	str	r3, [r1, #88]	; 0x58
 8005662:	e001      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005664:	7dfb      	ldrb	r3, [r7, #23]
 8005666:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d02d      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800567c:	d005      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800567e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005682:	d009      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005684:	2b00      	cmp	r3, #0
 8005686:	d013      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005688:	e00f      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800568a:	4b26      	ldr	r3, [pc, #152]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800568c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568e:	4a25      	ldr	r2, [pc, #148]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005694:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005696:	e00c      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	3304      	adds	r3, #4
 800569c:	2101      	movs	r1, #1
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fefa 	bl	8006498 <RCCEx_PLL2_Config>
 80056a4:	4603      	mov	r3, r0
 80056a6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80056a8:	e003      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	75fb      	strb	r3, [r7, #23]
      break;
 80056ae:	e000      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80056b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056b2:	7dfb      	ldrb	r3, [r7, #23]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d109      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056b8:	4b1a      	ldr	r3, [pc, #104]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80056ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056c4:	4917      	ldr	r1, [pc, #92]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	650b      	str	r3, [r1, #80]	; 0x50
 80056ca:	e001      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056cc:	7dfb      	ldrb	r3, [r7, #23]
 80056ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d035      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d81b      	bhi.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80056e4:	a201      	add	r2, pc, #4	; (adr r2, 80056ec <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80056e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ea:	bf00      	nop
 80056ec:	08005729 	.word	0x08005729
 80056f0:	080056fd 	.word	0x080056fd
 80056f4:	0800570b 	.word	0x0800570b
 80056f8:	08005729 	.word	0x08005729
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056fc:	4b09      	ldr	r3, [pc, #36]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80056fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005700:	4a08      	ldr	r2, [pc, #32]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005706:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005708:	e00f      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3304      	adds	r3, #4
 800570e:	2102      	movs	r1, #2
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fec1 	bl	8006498 <RCCEx_PLL2_Config>
 8005716:	4603      	mov	r3, r0
 8005718:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800571a:	e006      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	75fb      	strb	r3, [r7, #23]
      break;
 8005720:	e003      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005722:	bf00      	nop
 8005724:	58024400 	.word	0x58024400
      break;
 8005728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800572a:	7dfb      	ldrb	r3, [r7, #23]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d109      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005730:	4bba      	ldr	r3, [pc, #744]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005734:	f023 0203 	bic.w	r2, r3, #3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573c:	49b7      	ldr	r1, [pc, #732]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800573e:	4313      	orrs	r3, r2
 8005740:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005742:	e001      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005744:	7dfb      	ldrb	r3, [r7, #23]
 8005746:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 8086 	beq.w	8005862 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005756:	4bb2      	ldr	r3, [pc, #712]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4ab1      	ldr	r2, [pc, #708]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800575c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005760:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005762:	f7fc f807 	bl	8001774 <HAL_GetTick>
 8005766:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005768:	e009      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800576a:	f7fc f803 	bl	8001774 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b64      	cmp	r3, #100	; 0x64
 8005776:	d902      	bls.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	75fb      	strb	r3, [r7, #23]
        break;
 800577c:	e005      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800577e:	4ba8      	ldr	r3, [pc, #672]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0ef      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800578a:	7dfb      	ldrb	r3, [r7, #23]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d166      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005790:	4ba2      	ldr	r3, [pc, #648]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005792:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800579a:	4053      	eors	r3, r2
 800579c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d013      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057a4:	4b9d      	ldr	r3, [pc, #628]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80057a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ac:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057ae:	4b9b      	ldr	r3, [pc, #620]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80057b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b2:	4a9a      	ldr	r2, [pc, #616]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80057b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057ba:	4b98      	ldr	r3, [pc, #608]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80057bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057be:	4a97      	ldr	r2, [pc, #604]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80057c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057c4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80057c6:	4a95      	ldr	r2, [pc, #596]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057d6:	d115      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d8:	f7fb ffcc 	bl	8001774 <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057de:	e00b      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e0:	f7fb ffc8 	bl	8001774 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d902      	bls.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	75fb      	strb	r3, [r7, #23]
            break;
 80057f6:	e005      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057f8:	4b88      	ldr	r3, [pc, #544]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80057fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d0ed      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005804:	7dfb      	ldrb	r3, [r7, #23]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d126      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005814:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005818:	d10d      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800581a:	4b80      	ldr	r3, [pc, #512]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005828:	0919      	lsrs	r1, r3, #4
 800582a:	4b7e      	ldr	r3, [pc, #504]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800582c:	400b      	ands	r3, r1
 800582e:	497b      	ldr	r1, [pc, #492]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005830:	4313      	orrs	r3, r2
 8005832:	610b      	str	r3, [r1, #16]
 8005834:	e005      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005836:	4b79      	ldr	r3, [pc, #484]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	4a78      	ldr	r2, [pc, #480]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800583c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005840:	6113      	str	r3, [r2, #16]
 8005842:	4b76      	ldr	r3, [pc, #472]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005844:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800584c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005850:	4972      	ldr	r1, [pc, #456]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005852:	4313      	orrs	r3, r2
 8005854:	670b      	str	r3, [r1, #112]	; 0x70
 8005856:	e004      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005858:	7dfb      	ldrb	r3, [r7, #23]
 800585a:	75bb      	strb	r3, [r7, #22]
 800585c:	e001      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800585e:	7dfb      	ldrb	r3, [r7, #23]
 8005860:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d07d      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005872:	2b28      	cmp	r3, #40	; 0x28
 8005874:	d866      	bhi.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005876:	a201      	add	r2, pc, #4	; (adr r2, 800587c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587c:	0800594b 	.word	0x0800594b
 8005880:	08005945 	.word	0x08005945
 8005884:	08005945 	.word	0x08005945
 8005888:	08005945 	.word	0x08005945
 800588c:	08005945 	.word	0x08005945
 8005890:	08005945 	.word	0x08005945
 8005894:	08005945 	.word	0x08005945
 8005898:	08005945 	.word	0x08005945
 800589c:	08005921 	.word	0x08005921
 80058a0:	08005945 	.word	0x08005945
 80058a4:	08005945 	.word	0x08005945
 80058a8:	08005945 	.word	0x08005945
 80058ac:	08005945 	.word	0x08005945
 80058b0:	08005945 	.word	0x08005945
 80058b4:	08005945 	.word	0x08005945
 80058b8:	08005945 	.word	0x08005945
 80058bc:	08005933 	.word	0x08005933
 80058c0:	08005945 	.word	0x08005945
 80058c4:	08005945 	.word	0x08005945
 80058c8:	08005945 	.word	0x08005945
 80058cc:	08005945 	.word	0x08005945
 80058d0:	08005945 	.word	0x08005945
 80058d4:	08005945 	.word	0x08005945
 80058d8:	08005945 	.word	0x08005945
 80058dc:	0800594b 	.word	0x0800594b
 80058e0:	08005945 	.word	0x08005945
 80058e4:	08005945 	.word	0x08005945
 80058e8:	08005945 	.word	0x08005945
 80058ec:	08005945 	.word	0x08005945
 80058f0:	08005945 	.word	0x08005945
 80058f4:	08005945 	.word	0x08005945
 80058f8:	08005945 	.word	0x08005945
 80058fc:	0800594b 	.word	0x0800594b
 8005900:	08005945 	.word	0x08005945
 8005904:	08005945 	.word	0x08005945
 8005908:	08005945 	.word	0x08005945
 800590c:	08005945 	.word	0x08005945
 8005910:	08005945 	.word	0x08005945
 8005914:	08005945 	.word	0x08005945
 8005918:	08005945 	.word	0x08005945
 800591c:	0800594b 	.word	0x0800594b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3304      	adds	r3, #4
 8005924:	2101      	movs	r1, #1
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fdb6 	bl	8006498 <RCCEx_PLL2_Config>
 800592c:	4603      	mov	r3, r0
 800592e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005930:	e00c      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	3324      	adds	r3, #36	; 0x24
 8005936:	2101      	movs	r1, #1
 8005938:	4618      	mov	r0, r3
 800593a:	f000 fe5f 	bl	80065fc <RCCEx_PLL3_Config>
 800593e:	4603      	mov	r3, r0
 8005940:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005942:	e003      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	75fb      	strb	r3, [r7, #23]
      break;
 8005948:	e000      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800594a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800594c:	7dfb      	ldrb	r3, [r7, #23]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d109      	bne.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005952:	4b32      	ldr	r3, [pc, #200]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005956:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800595e:	492f      	ldr	r1, [pc, #188]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005960:	4313      	orrs	r3, r2
 8005962:	654b      	str	r3, [r1, #84]	; 0x54
 8005964:	e001      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005966:	7dfb      	ldrb	r3, [r7, #23]
 8005968:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d037      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800597a:	2b05      	cmp	r3, #5
 800597c:	d820      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800597e:	a201      	add	r2, pc, #4	; (adr r2, 8005984 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005984:	080059c7 	.word	0x080059c7
 8005988:	0800599d 	.word	0x0800599d
 800598c:	080059af 	.word	0x080059af
 8005990:	080059c7 	.word	0x080059c7
 8005994:	080059c7 	.word	0x080059c7
 8005998:	080059c7 	.word	0x080059c7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	3304      	adds	r3, #4
 80059a0:	2101      	movs	r1, #1
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 fd78 	bl	8006498 <RCCEx_PLL2_Config>
 80059a8:	4603      	mov	r3, r0
 80059aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80059ac:	e00c      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	3324      	adds	r3, #36	; 0x24
 80059b2:	2101      	movs	r1, #1
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 fe21 	bl	80065fc <RCCEx_PLL3_Config>
 80059ba:	4603      	mov	r3, r0
 80059bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80059be:	e003      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	75fb      	strb	r3, [r7, #23]
      break;
 80059c4:	e000      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80059c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059c8:	7dfb      	ldrb	r3, [r7, #23]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d109      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80059ce:	4b13      	ldr	r3, [pc, #76]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80059d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d2:	f023 0207 	bic.w	r2, r3, #7
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059da:	4910      	ldr	r1, [pc, #64]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	654b      	str	r3, [r1, #84]	; 0x54
 80059e0:	e001      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e2:	7dfb      	ldrb	r3, [r7, #23]
 80059e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d040      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f8:	2b05      	cmp	r3, #5
 80059fa:	d827      	bhi.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80059fc:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80059fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a02:	bf00      	nop
 8005a04:	08005a53 	.word	0x08005a53
 8005a08:	08005a29 	.word	0x08005a29
 8005a0c:	08005a3b 	.word	0x08005a3b
 8005a10:	08005a53 	.word	0x08005a53
 8005a14:	08005a53 	.word	0x08005a53
 8005a18:	08005a53 	.word	0x08005a53
 8005a1c:	58024400 	.word	0x58024400
 8005a20:	58024800 	.word	0x58024800
 8005a24:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fd32 	bl	8006498 <RCCEx_PLL2_Config>
 8005a34:	4603      	mov	r3, r0
 8005a36:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005a38:	e00c      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3324      	adds	r3, #36	; 0x24
 8005a3e:	2101      	movs	r1, #1
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fddb 	bl	80065fc <RCCEx_PLL3_Config>
 8005a46:	4603      	mov	r3, r0
 8005a48:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005a4a:	e003      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a50:	e000      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8005a52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10a      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a5a:	4bb2      	ldr	r3, [pc, #712]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a5e:	f023 0207 	bic.w	r2, r3, #7
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a68:	49ae      	ldr	r1, [pc, #696]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	658b      	str	r3, [r1, #88]	; 0x58
 8005a6e:	e001      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
 8005a72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0320 	and.w	r3, r3, #32
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d044      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a8a:	d01b      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a90:	d805      	bhi.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d022      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8005a96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a9a:	d00a      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005a9c:	e01b      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa2:	d01d      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005aa8:	d01c      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005aaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005aae:	d01b      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005ab0:	e011      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fced 	bl	8006498 <RCCEx_PLL2_Config>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005ac2:	e012      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	3324      	adds	r3, #36	; 0x24
 8005ac8:	2102      	movs	r1, #2
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fd96 	bl	80065fc <RCCEx_PLL3_Config>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005ad4:	e009      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8005ada:	e006      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005adc:	bf00      	nop
 8005ade:	e004      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005ae0:	bf00      	nop
 8005ae2:	e002      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005ae4:	bf00      	nop
 8005ae6:	e000      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005ae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aea:	7dfb      	ldrb	r3, [r7, #23]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10a      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005af0:	4b8c      	ldr	r3, [pc, #560]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005afe:	4989      	ldr	r1, [pc, #548]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	654b      	str	r3, [r1, #84]	; 0x54
 8005b04:	e001      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b06:	7dfb      	ldrb	r3, [r7, #23]
 8005b08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d044      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b20:	d01b      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8005b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b26:	d805      	bhi.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d022      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b30:	d00a      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005b32:	e01b      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b38:	d01d      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005b3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005b3e:	d01c      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8005b40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b44:	d01b      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005b46:	e011      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 fca2 	bl	8006498 <RCCEx_PLL2_Config>
 8005b54:	4603      	mov	r3, r0
 8005b56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005b58:	e012      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3324      	adds	r3, #36	; 0x24
 8005b5e:	2102      	movs	r1, #2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fd4b 	bl	80065fc <RCCEx_PLL3_Config>
 8005b66:	4603      	mov	r3, r0
 8005b68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005b6a:	e009      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b70:	e006      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005b72:	bf00      	nop
 8005b74:	e004      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005b76:	bf00      	nop
 8005b78:	e002      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005b7a:	bf00      	nop
 8005b7c:	e000      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005b7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10a      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b86:	4b67      	ldr	r3, [pc, #412]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b94:	4963      	ldr	r1, [pc, #396]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	658b      	str	r3, [r1, #88]	; 0x58
 8005b9a:	e001      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9c:	7dfb      	ldrb	r3, [r7, #23]
 8005b9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d044      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bb6:	d01b      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005bb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bbc:	d805      	bhi.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d022      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bc6:	d00a      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005bc8:	e01b      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8005bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bce:	d01d      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005bd0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005bd4:	d01c      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005bd6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005bda:	d01b      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005bdc:	e011      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3304      	adds	r3, #4
 8005be2:	2100      	movs	r1, #0
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 fc57 	bl	8006498 <RCCEx_PLL2_Config>
 8005bea:	4603      	mov	r3, r0
 8005bec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005bee:	e012      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3324      	adds	r3, #36	; 0x24
 8005bf4:	2102      	movs	r1, #2
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fd00 	bl	80065fc <RCCEx_PLL3_Config>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005c00:	e009      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	75fb      	strb	r3, [r7, #23]
      break;
 8005c06:	e006      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005c08:	bf00      	nop
 8005c0a:	e004      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005c0c:	bf00      	nop
 8005c0e:	e002      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005c10:	bf00      	nop
 8005c12:	e000      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c16:	7dfb      	ldrb	r3, [r7, #23]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005c1c:	4b41      	ldr	r3, [pc, #260]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c20:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c2a:	493e      	ldr	r1, [pc, #248]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	658b      	str	r3, [r1, #88]	; 0x58
 8005c30:	e001      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
 8005c34:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0308 	and.w	r3, r3, #8
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d01a      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4c:	d10a      	bne.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3324      	adds	r3, #36	; 0x24
 8005c52:	2102      	movs	r1, #2
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fcd1 	bl	80065fc <RCCEx_PLL3_Config>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005c64:	4b2f      	ldr	r3, [pc, #188]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c72:	492c      	ldr	r1, [pc, #176]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0310 	and.w	r3, r3, #16
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d01a      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c8e:	d10a      	bne.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3324      	adds	r3, #36	; 0x24
 8005c94:	2102      	movs	r1, #2
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 fcb0 	bl	80065fc <RCCEx_PLL3_Config>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ca6:	4b1f      	ldr	r3, [pc, #124]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005caa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb4:	491b      	ldr	r1, [pc, #108]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d032      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cd0:	d00d      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8005cd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cd6:	d016      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d111      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fbd8 	bl	8006498 <RCCEx_PLL2_Config>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005cec:	e00c      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	3324      	adds	r3, #36	; 0x24
 8005cf2:	2102      	movs	r1, #2
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 fc81 	bl	80065fc <RCCEx_PLL3_Config>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005cfe:	e003      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	75fb      	strb	r3, [r7, #23]
      break;
 8005d04:	e000      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005d06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d08:	7dfb      	ldrb	r3, [r7, #23]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10c      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d0e:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d1c:	4901      	ldr	r1, [pc, #4]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	658b      	str	r3, [r1, #88]	; 0x58
 8005d22:	e003      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005d24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d28:	7dfb      	ldrb	r3, [r7, #23]
 8005d2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d02f      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d42:	d00c      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005d44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d48:	d015      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d4e:	d10f      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d50:	4b79      	ldr	r3, [pc, #484]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	4a78      	ldr	r2, [pc, #480]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005d5c:	e00c      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3324      	adds	r3, #36	; 0x24
 8005d62:	2101      	movs	r1, #1
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 fc49 	bl	80065fc <RCCEx_PLL3_Config>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005d6e:	e003      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	75fb      	strb	r3, [r7, #23]
      break;
 8005d74:	e000      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005d76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d78:	7dfb      	ldrb	r3, [r7, #23]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10a      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d7e:	4b6e      	ldr	r3, [pc, #440]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d8c:	496a      	ldr	r1, [pc, #424]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	654b      	str	r3, [r1, #84]	; 0x54
 8005d92:	e001      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d94:	7dfb      	ldrb	r3, [r7, #23]
 8005d96:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d029      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db0:	d007      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005db2:	e00f      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005db4:	4b60      	ldr	r3, [pc, #384]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	4a5f      	ldr	r2, [pc, #380]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005dc0:	e00b      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	2102      	movs	r1, #2
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 fb65 	bl	8006498 <RCCEx_PLL2_Config>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005dd2:	e002      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8005dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d109      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005de0:	4b55      	ldr	r3, [pc, #340]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dec:	4952      	ldr	r1, [pc, #328]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005df2:	e001      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df4:	7dfb      	ldrb	r3, [r7, #23]
 8005df6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00a      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3324      	adds	r3, #36	; 0x24
 8005e08:	2102      	movs	r1, #2
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fbf6 	bl	80065fc <RCCEx_PLL3_Config>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d02f      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e2e:	d00c      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e34:	d802      	bhi.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d011      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005e3a:	e00d      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e40:	d00f      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005e42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e46:	d00e      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005e48:	e006      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e4a:	4b3b      	ldr	r3, [pc, #236]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4e:	4a3a      	ldr	r2, [pc, #232]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005e56:	e007      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e5c:	e004      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005e5e:	bf00      	nop
 8005e60:	e002      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005e62:	bf00      	nop
 8005e64:	e000      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e68:	7dfb      	ldrb	r3, [r7, #23]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d109      	bne.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e6e:	4b32      	ldr	r3, [pc, #200]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e7a:	492f      	ldr	r1, [pc, #188]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	654b      	str	r3, [r1, #84]	; 0x54
 8005e80:	e001      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e82:	7dfb      	ldrb	r3, [r7, #23]
 8005e84:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d008      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e92:	4b29      	ldr	r3, [pc, #164]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9e:	4926      	ldr	r1, [pc, #152]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d009      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005eb0:	4b21      	ldr	r3, [pc, #132]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ebe:	491e      	ldr	r1, [pc, #120]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d008      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ed0:	4b19      	ldr	r3, [pc, #100]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005edc:	4916      	ldr	r1, [pc, #88]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00d      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005eee:	4b12      	ldr	r3, [pc, #72]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	4a11      	ldr	r2, [pc, #68]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ef4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ef8:	6113      	str	r3, [r2, #16]
 8005efa:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005efc:	691a      	ldr	r2, [r3, #16]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005f04:	490c      	ldr	r1, [pc, #48]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	da08      	bge.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005f12:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f1e:	4906      	ldr	r1, [pc, #24]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005f24:	7dbb      	ldrb	r3, [r7, #22]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e000      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	58024400 	.word	0x58024400

08005f3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005f40:	f7ff f8b2 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 8005f44:	4601      	mov	r1, r0
 8005f46:	4b06      	ldr	r3, [pc, #24]	; (8005f60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	091b      	lsrs	r3, r3, #4
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	4a04      	ldr	r2, [pc, #16]	; (8005f64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005f52:	5cd3      	ldrb	r3, [r2, r3]
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	58024400 	.word	0x58024400
 8005f64:	08013dbc 	.word	0x08013dbc

08005f68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b089      	sub	sp, #36	; 0x24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f70:	4b9d      	ldr	r3, [pc, #628]	; (80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f74:	f003 0303 	and.w	r3, r3, #3
 8005f78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005f7a:	4b9b      	ldr	r3, [pc, #620]	; (80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7e:	0b1b      	lsrs	r3, r3, #12
 8005f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005f86:	4b98      	ldr	r3, [pc, #608]	; (80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8a:	091b      	lsrs	r3, r3, #4
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005f92:	4b95      	ldr	r3, [pc, #596]	; (80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	08db      	lsrs	r3, r3, #3
 8005f98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	fb02 f303 	mul.w	r3, r2, r3
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005faa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 810a 	beq.w	80061ca <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d05a      	beq.n	8006072 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d302      	bcc.n	8005fc6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d078      	beq.n	80060b6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005fc4:	e099      	b.n	80060fa <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fc6:	4b88      	ldr	r3, [pc, #544]	; (80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d02d      	beq.n	800602e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fd2:	4b85      	ldr	r3, [pc, #532]	; (80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	08db      	lsrs	r3, r3, #3
 8005fd8:	f003 0303 	and.w	r3, r3, #3
 8005fdc:	4a83      	ldr	r2, [pc, #524]	; (80061ec <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005fde:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	ee07 3a90 	vmov	s15, r3
 8005fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	ee07 3a90 	vmov	s15, r3
 8005ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ffc:	4b7a      	ldr	r3, [pc, #488]	; (80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006004:	ee07 3a90 	vmov	s15, r3
 8006008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800600c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006010:	eddf 5a77 	vldr	s11, [pc, #476]	; 80061f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006014:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006018:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800601c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006020:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006028:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800602c:	e087      	b.n	800613e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	ee07 3a90 	vmov	s15, r3
 8006034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006038:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80061f4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800603c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006040:	4b69      	ldr	r3, [pc, #420]	; (80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006048:	ee07 3a90 	vmov	s15, r3
 800604c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006050:	ed97 6a03 	vldr	s12, [r7, #12]
 8006054:	eddf 5a66 	vldr	s11, [pc, #408]	; 80061f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006058:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800605c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006060:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006064:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006070:	e065      	b.n	800613e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	ee07 3a90 	vmov	s15, r3
 8006078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80061f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006080:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006084:	4b58      	ldr	r3, [pc, #352]	; (80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800608c:	ee07 3a90 	vmov	s15, r3
 8006090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006094:	ed97 6a03 	vldr	s12, [r7, #12]
 8006098:	eddf 5a55 	vldr	s11, [pc, #340]	; 80061f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800609c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060b4:	e043      	b.n	800613e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	ee07 3a90 	vmov	s15, r3
 80060bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80061fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80060c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c8:	4b47      	ldr	r3, [pc, #284]	; (80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d0:	ee07 3a90 	vmov	s15, r3
 80060d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80060dc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80061f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80060e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060f8:	e021      	b.n	800613e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	ee07 3a90 	vmov	s15, r3
 8006100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006104:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80061f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800610c:	4b36      	ldr	r3, [pc, #216]	; (80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800610e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006114:	ee07 3a90 	vmov	s15, r3
 8006118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800611c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006120:	eddf 5a33 	vldr	s11, [pc, #204]	; 80061f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006124:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800612c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006130:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006138:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800613c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800613e:	4b2a      	ldr	r3, [pc, #168]	; (80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	0a5b      	lsrs	r3, r3, #9
 8006144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006148:	ee07 3a90 	vmov	s15, r3
 800614c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006154:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006158:	edd7 6a07 	vldr	s13, [r7, #28]
 800615c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006164:	ee17 2a90 	vmov	r2, s15
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800616c:	4b1e      	ldr	r3, [pc, #120]	; (80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006170:	0c1b      	lsrs	r3, r3, #16
 8006172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006176:	ee07 3a90 	vmov	s15, r3
 800617a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800617e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006182:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006186:	edd7 6a07 	vldr	s13, [r7, #28]
 800618a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800618e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006192:	ee17 2a90 	vmov	r2, s15
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800619a:	4b13      	ldr	r3, [pc, #76]	; (80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800619c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619e:	0e1b      	lsrs	r3, r3, #24
 80061a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a4:	ee07 3a90 	vmov	s15, r3
 80061a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80061b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061c0:	ee17 2a90 	vmov	r2, s15
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80061c8:	e008      	b.n	80061dc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	609a      	str	r2, [r3, #8]
}
 80061dc:	bf00      	nop
 80061de:	3724      	adds	r7, #36	; 0x24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	58024400 	.word	0x58024400
 80061ec:	03d09000 	.word	0x03d09000
 80061f0:	46000000 	.word	0x46000000
 80061f4:	4c742400 	.word	0x4c742400
 80061f8:	4a742400 	.word	0x4a742400
 80061fc:	4af42400 	.word	0x4af42400

08006200 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006200:	b480      	push	{r7}
 8006202:	b089      	sub	sp, #36	; 0x24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006208:	4b9d      	ldr	r3, [pc, #628]	; (8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620c:	f003 0303 	and.w	r3, r3, #3
 8006210:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006212:	4b9b      	ldr	r3, [pc, #620]	; (8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006216:	0d1b      	lsrs	r3, r3, #20
 8006218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800621c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800621e:	4b98      	ldr	r3, [pc, #608]	; (8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006222:	0a1b      	lsrs	r3, r3, #8
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800622a:	4b95      	ldr	r3, [pc, #596]	; (8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800622c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622e:	08db      	lsrs	r3, r3, #3
 8006230:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	fb02 f303 	mul.w	r3, r2, r3
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006242:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 810a 	beq.w	8006462 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d05a      	beq.n	800630a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006254:	2b01      	cmp	r3, #1
 8006256:	d302      	bcc.n	800625e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006258:	2b02      	cmp	r3, #2
 800625a:	d078      	beq.n	800634e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800625c:	e099      	b.n	8006392 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800625e:	4b88      	ldr	r3, [pc, #544]	; (8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0320 	and.w	r3, r3, #32
 8006266:	2b00      	cmp	r3, #0
 8006268:	d02d      	beq.n	80062c6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800626a:	4b85      	ldr	r3, [pc, #532]	; (8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	08db      	lsrs	r3, r3, #3
 8006270:	f003 0303 	and.w	r3, r3, #3
 8006274:	4a83      	ldr	r2, [pc, #524]	; (8006484 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006276:	fa22 f303 	lsr.w	r3, r2, r3
 800627a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	ee07 3a90 	vmov	s15, r3
 8006282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	ee07 3a90 	vmov	s15, r3
 800628c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006290:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006294:	4b7a      	ldr	r3, [pc, #488]	; (8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800629c:	ee07 3a90 	vmov	s15, r3
 80062a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80062a8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006488 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80062ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80062c4:	e087      	b.n	80063d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	ee07 3a90 	vmov	s15, r3
 80062cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800648c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80062d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062d8:	4b69      	ldr	r3, [pc, #420]	; (8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e0:	ee07 3a90 	vmov	s15, r3
 80062e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ec:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006488 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80062f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006304:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006308:	e065      	b.n	80063d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	ee07 3a90 	vmov	s15, r3
 8006310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006314:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006490 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006318:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800631c:	4b58      	ldr	r3, [pc, #352]	; (8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006324:	ee07 3a90 	vmov	s15, r3
 8006328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800632c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006330:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006488 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006334:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006338:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800633c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006340:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006348:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800634c:	e043      	b.n	80063d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	ee07 3a90 	vmov	s15, r3
 8006354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006358:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006494 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800635c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006360:	4b47      	ldr	r3, [pc, #284]	; (8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006368:	ee07 3a90 	vmov	s15, r3
 800636c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006370:	ed97 6a03 	vldr	s12, [r7, #12]
 8006374:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006488 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006378:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800637c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006380:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006384:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006390:	e021      	b.n	80063d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	ee07 3a90 	vmov	s15, r3
 8006398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006490 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80063a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063a4:	4b36      	ldr	r3, [pc, #216]	; (8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ac:	ee07 3a90 	vmov	s15, r3
 80063b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80063b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006488 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80063bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063d4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80063d6:	4b2a      	ldr	r3, [pc, #168]	; (8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80063d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063da:	0a5b      	lsrs	r3, r3, #9
 80063dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063e0:	ee07 3a90 	vmov	s15, r3
 80063e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80063f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063fc:	ee17 2a90 	vmov	r2, s15
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006404:	4b1e      	ldr	r3, [pc, #120]	; (8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006408:	0c1b      	lsrs	r3, r3, #16
 800640a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800640e:	ee07 3a90 	vmov	s15, r3
 8006412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800641a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800641e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800642a:	ee17 2a90 	vmov	r2, s15
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006432:	4b13      	ldr	r3, [pc, #76]	; (8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	0e1b      	lsrs	r3, r3, #24
 8006438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800643c:	ee07 3a90 	vmov	s15, r3
 8006440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006448:	ee37 7a87 	vadd.f32	s14, s15, s14
 800644c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006458:	ee17 2a90 	vmov	r2, s15
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006460:	e008      	b.n	8006474 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	609a      	str	r2, [r3, #8]
}
 8006474:	bf00      	nop
 8006476:	3724      	adds	r7, #36	; 0x24
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	58024400 	.word	0x58024400
 8006484:	03d09000 	.word	0x03d09000
 8006488:	46000000 	.word	0x46000000
 800648c:	4c742400 	.word	0x4c742400
 8006490:	4a742400 	.word	0x4a742400
 8006494:	4af42400 	.word	0x4af42400

08006498 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064a6:	4b53      	ldr	r3, [pc, #332]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 80064a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d101      	bne.n	80064b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e099      	b.n	80065ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80064b6:	4b4f      	ldr	r3, [pc, #316]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a4e      	ldr	r2, [pc, #312]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 80064bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064c2:	f7fb f957 	bl	8001774 <HAL_GetTick>
 80064c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064c8:	e008      	b.n	80064dc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80064ca:	f7fb f953 	bl	8001774 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d901      	bls.n	80064dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e086      	b.n	80065ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064dc:	4b45      	ldr	r3, [pc, #276]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1f0      	bne.n	80064ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80064e8:	4b42      	ldr	r3, [pc, #264]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 80064ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	031b      	lsls	r3, r3, #12
 80064f6:	493f      	ldr	r1, [pc, #252]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	628b      	str	r3, [r1, #40]	; 0x28
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	3b01      	subs	r3, #1
 8006502:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	3b01      	subs	r3, #1
 800650c:	025b      	lsls	r3, r3, #9
 800650e:	b29b      	uxth	r3, r3
 8006510:	431a      	orrs	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	3b01      	subs	r3, #1
 8006518:	041b      	lsls	r3, r3, #16
 800651a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800651e:	431a      	orrs	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	3b01      	subs	r3, #1
 8006526:	061b      	lsls	r3, r3, #24
 8006528:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800652c:	4931      	ldr	r1, [pc, #196]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 800652e:	4313      	orrs	r3, r2
 8006530:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006532:	4b30      	ldr	r3, [pc, #192]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 8006534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006536:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	492d      	ldr	r1, [pc, #180]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 8006540:	4313      	orrs	r3, r2
 8006542:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006544:	4b2b      	ldr	r3, [pc, #172]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006548:	f023 0220 	bic.w	r2, r3, #32
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	4928      	ldr	r1, [pc, #160]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 8006552:	4313      	orrs	r3, r2
 8006554:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006556:	4b27      	ldr	r3, [pc, #156]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 8006558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655a:	4a26      	ldr	r2, [pc, #152]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 800655c:	f023 0310 	bic.w	r3, r3, #16
 8006560:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006562:	4b24      	ldr	r3, [pc, #144]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 8006564:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006566:	4b24      	ldr	r3, [pc, #144]	; (80065f8 <RCCEx_PLL2_Config+0x160>)
 8006568:	4013      	ands	r3, r2
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	69d2      	ldr	r2, [r2, #28]
 800656e:	00d2      	lsls	r2, r2, #3
 8006570:	4920      	ldr	r1, [pc, #128]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 8006572:	4313      	orrs	r3, r2
 8006574:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006576:	4b1f      	ldr	r3, [pc, #124]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 8006578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657a:	4a1e      	ldr	r2, [pc, #120]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 800657c:	f043 0310 	orr.w	r3, r3, #16
 8006580:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d106      	bne.n	8006596 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006588:	4b1a      	ldr	r3, [pc, #104]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	4a19      	ldr	r2, [pc, #100]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 800658e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006592:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006594:	e00f      	b.n	80065b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d106      	bne.n	80065aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800659c:	4b15      	ldr	r3, [pc, #84]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 800659e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a0:	4a14      	ldr	r2, [pc, #80]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 80065a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065a8:	e005      	b.n	80065b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80065aa:	4b12      	ldr	r3, [pc, #72]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 80065ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ae:	4a11      	ldr	r2, [pc, #68]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 80065b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80065b6:	4b0f      	ldr	r3, [pc, #60]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a0e      	ldr	r2, [pc, #56]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 80065bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065c2:	f7fb f8d7 	bl	8001774 <HAL_GetTick>
 80065c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065c8:	e008      	b.n	80065dc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80065ca:	f7fb f8d3 	bl	8001774 <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d901      	bls.n	80065dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e006      	b.n	80065ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065dc:	4b05      	ldr	r3, [pc, #20]	; (80065f4 <RCCEx_PLL2_Config+0x15c>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d0f0      	beq.n	80065ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	58024400 	.word	0x58024400
 80065f8:	ffff0007 	.word	0xffff0007

080065fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800660a:	4b53      	ldr	r3, [pc, #332]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 800660c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660e:	f003 0303 	and.w	r3, r3, #3
 8006612:	2b03      	cmp	r3, #3
 8006614:	d101      	bne.n	800661a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e099      	b.n	800674e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800661a:	4b4f      	ldr	r3, [pc, #316]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a4e      	ldr	r2, [pc, #312]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 8006620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006626:	f7fb f8a5 	bl	8001774 <HAL_GetTick>
 800662a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800662c:	e008      	b.n	8006640 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800662e:	f7fb f8a1 	bl	8001774 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d901      	bls.n	8006640 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e086      	b.n	800674e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006640:	4b45      	ldr	r3, [pc, #276]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1f0      	bne.n	800662e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800664c:	4b42      	ldr	r3, [pc, #264]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 800664e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006650:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	051b      	lsls	r3, r3, #20
 800665a:	493f      	ldr	r1, [pc, #252]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 800665c:	4313      	orrs	r3, r2
 800665e:	628b      	str	r3, [r1, #40]	; 0x28
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	3b01      	subs	r3, #1
 8006666:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	3b01      	subs	r3, #1
 8006670:	025b      	lsls	r3, r3, #9
 8006672:	b29b      	uxth	r3, r3
 8006674:	431a      	orrs	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	3b01      	subs	r3, #1
 800667c:	041b      	lsls	r3, r3, #16
 800667e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006682:	431a      	orrs	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	3b01      	subs	r3, #1
 800668a:	061b      	lsls	r3, r3, #24
 800668c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006690:	4931      	ldr	r1, [pc, #196]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 8006692:	4313      	orrs	r3, r2
 8006694:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006696:	4b30      	ldr	r3, [pc, #192]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	492d      	ldr	r1, [pc, #180]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80066a8:	4b2b      	ldr	r3, [pc, #172]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 80066aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	4928      	ldr	r1, [pc, #160]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80066ba:	4b27      	ldr	r3, [pc, #156]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 80066bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066be:	4a26      	ldr	r2, [pc, #152]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 80066c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80066c6:	4b24      	ldr	r3, [pc, #144]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 80066c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ca:	4b24      	ldr	r3, [pc, #144]	; (800675c <RCCEx_PLL3_Config+0x160>)
 80066cc:	4013      	ands	r3, r2
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	69d2      	ldr	r2, [r2, #28]
 80066d2:	00d2      	lsls	r2, r2, #3
 80066d4:	4920      	ldr	r1, [pc, #128]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80066da:	4b1f      	ldr	r3, [pc, #124]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 80066dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066de:	4a1e      	ldr	r2, [pc, #120]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 80066e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d106      	bne.n	80066fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80066ec:	4b1a      	ldr	r3, [pc, #104]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	4a19      	ldr	r2, [pc, #100]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 80066f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80066f8:	e00f      	b.n	800671a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d106      	bne.n	800670e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006700:	4b15      	ldr	r3, [pc, #84]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	4a14      	ldr	r2, [pc, #80]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 8006706:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800670a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800670c:	e005      	b.n	800671a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800670e:	4b12      	ldr	r3, [pc, #72]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 8006710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006712:	4a11      	ldr	r2, [pc, #68]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 8006714:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006718:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800671a:	4b0f      	ldr	r3, [pc, #60]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a0e      	ldr	r2, [pc, #56]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 8006720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006726:	f7fb f825 	bl	8001774 <HAL_GetTick>
 800672a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800672c:	e008      	b.n	8006740 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800672e:	f7fb f821 	bl	8001774 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	2b02      	cmp	r3, #2
 800673a:	d901      	bls.n	8006740 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e006      	b.n	800674e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006740:	4b05      	ldr	r3, [pc, #20]	; (8006758 <RCCEx_PLL3_Config+0x15c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d0f0      	beq.n	800672e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800674c:	7bfb      	ldrb	r3, [r7, #15]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	58024400 	.word	0x58024400
 800675c:	ffff0007 	.word	0xffff0007

08006760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e049      	b.n	8006806 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d106      	bne.n	800678c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7fa fd8c 	bl	80012a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2202      	movs	r2, #2
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3304      	adds	r3, #4
 800679c:	4619      	mov	r1, r3
 800679e:	4610      	mov	r0, r2
 80067a0:	f000 f864 	bl	800686c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
	...

08006810 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b01      	cmp	r3, #1
 8006822:	d001      	beq.n	8006828 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e019      	b.n	800685c <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689a      	ldr	r2, [r3, #8]
 8006836:	4b0c      	ldr	r3, [pc, #48]	; (8006868 <HAL_TIM_Base_Start+0x58>)
 8006838:	4013      	ands	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2b06      	cmp	r3, #6
 8006840:	d00b      	beq.n	800685a <HAL_TIM_Base_Start+0x4a>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006848:	d007      	beq.n	800685a <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f042 0201 	orr.w	r2, r2, #1
 8006858:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	00010007 	.word	0x00010007

0800686c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a40      	ldr	r2, [pc, #256]	; (8006980 <TIM_Base_SetConfig+0x114>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d013      	beq.n	80068ac <TIM_Base_SetConfig+0x40>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800688a:	d00f      	beq.n	80068ac <TIM_Base_SetConfig+0x40>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a3d      	ldr	r2, [pc, #244]	; (8006984 <TIM_Base_SetConfig+0x118>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d00b      	beq.n	80068ac <TIM_Base_SetConfig+0x40>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a3c      	ldr	r2, [pc, #240]	; (8006988 <TIM_Base_SetConfig+0x11c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d007      	beq.n	80068ac <TIM_Base_SetConfig+0x40>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a3b      	ldr	r2, [pc, #236]	; (800698c <TIM_Base_SetConfig+0x120>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d003      	beq.n	80068ac <TIM_Base_SetConfig+0x40>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a3a      	ldr	r2, [pc, #232]	; (8006990 <TIM_Base_SetConfig+0x124>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d108      	bne.n	80068be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a2f      	ldr	r2, [pc, #188]	; (8006980 <TIM_Base_SetConfig+0x114>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d01f      	beq.n	8006906 <TIM_Base_SetConfig+0x9a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068cc:	d01b      	beq.n	8006906 <TIM_Base_SetConfig+0x9a>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a2c      	ldr	r2, [pc, #176]	; (8006984 <TIM_Base_SetConfig+0x118>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d017      	beq.n	8006906 <TIM_Base_SetConfig+0x9a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a2b      	ldr	r2, [pc, #172]	; (8006988 <TIM_Base_SetConfig+0x11c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d013      	beq.n	8006906 <TIM_Base_SetConfig+0x9a>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a2a      	ldr	r2, [pc, #168]	; (800698c <TIM_Base_SetConfig+0x120>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00f      	beq.n	8006906 <TIM_Base_SetConfig+0x9a>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a29      	ldr	r2, [pc, #164]	; (8006990 <TIM_Base_SetConfig+0x124>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d00b      	beq.n	8006906 <TIM_Base_SetConfig+0x9a>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a28      	ldr	r2, [pc, #160]	; (8006994 <TIM_Base_SetConfig+0x128>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d007      	beq.n	8006906 <TIM_Base_SetConfig+0x9a>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a27      	ldr	r2, [pc, #156]	; (8006998 <TIM_Base_SetConfig+0x12c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d003      	beq.n	8006906 <TIM_Base_SetConfig+0x9a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a26      	ldr	r2, [pc, #152]	; (800699c <TIM_Base_SetConfig+0x130>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d108      	bne.n	8006918 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800690c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	4313      	orrs	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a10      	ldr	r2, [pc, #64]	; (8006980 <TIM_Base_SetConfig+0x114>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d00f      	beq.n	8006964 <TIM_Base_SetConfig+0xf8>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a12      	ldr	r2, [pc, #72]	; (8006990 <TIM_Base_SetConfig+0x124>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d00b      	beq.n	8006964 <TIM_Base_SetConfig+0xf8>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a11      	ldr	r2, [pc, #68]	; (8006994 <TIM_Base_SetConfig+0x128>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d007      	beq.n	8006964 <TIM_Base_SetConfig+0xf8>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a10      	ldr	r2, [pc, #64]	; (8006998 <TIM_Base_SetConfig+0x12c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d003      	beq.n	8006964 <TIM_Base_SetConfig+0xf8>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a0f      	ldr	r2, [pc, #60]	; (800699c <TIM_Base_SetConfig+0x130>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d103      	bne.n	800696c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	691a      	ldr	r2, [r3, #16]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	615a      	str	r2, [r3, #20]
}
 8006972:	bf00      	nop
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	40010000 	.word	0x40010000
 8006984:	40000400 	.word	0x40000400
 8006988:	40000800 	.word	0x40000800
 800698c:	40000c00 	.word	0x40000c00
 8006990:	40010400 	.word	0x40010400
 8006994:	40014000 	.word	0x40014000
 8006998:	40014400 	.word	0x40014400
 800699c:	40014800 	.word	0x40014800

080069a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e042      	b.n	8006a38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d106      	bne.n	80069ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7fa fc8f 	bl	80012e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2224      	movs	r2, #36	; 0x24
 80069ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 0201 	bic.w	r2, r2, #1
 80069e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f82c 	bl	8006a40 <UART_SetConfig>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d101      	bne.n	80069f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e022      	b.n	8006a38 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fdd0 	bl	80075a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689a      	ldr	r2, [r3, #8]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f042 0201 	orr.w	r2, r2, #1
 8006a2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fe57 	bl	80076e4 <UART_CheckIdleState>
 8006a36:	4603      	mov	r3, r0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a40:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006a44:	b08e      	sub	sp, #56	; 0x38
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	4bc1      	ldr	r3, [pc, #772]	; (8006d80 <UART_SetConfig+0x340>)
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	6812      	ldr	r2, [r2, #0]
 8006a80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006a82:	430b      	orrs	r3, r1
 8006a84:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	68da      	ldr	r2, [r3, #12]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4ab7      	ldr	r2, [pc, #732]	; (8006d84 <UART_SetConfig+0x344>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d004      	beq.n	8006ab6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a1b      	ldr	r3, [r3, #32]
 8006ab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	4bb2      	ldr	r3, [pc, #712]	; (8006d88 <UART_SetConfig+0x348>)
 8006abe:	4013      	ands	r3, r2
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6812      	ldr	r2, [r2, #0]
 8006ac4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ac6:	430b      	orrs	r3, r1
 8006ac8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad0:	f023 010f 	bic.w	r1, r3, #15
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4aa9      	ldr	r2, [pc, #676]	; (8006d8c <UART_SetConfig+0x34c>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d177      	bne.n	8006bda <UART_SetConfig+0x19a>
 8006aea:	4ba9      	ldr	r3, [pc, #676]	; (8006d90 <UART_SetConfig+0x350>)
 8006aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006af2:	2b28      	cmp	r3, #40	; 0x28
 8006af4:	d86c      	bhi.n	8006bd0 <UART_SetConfig+0x190>
 8006af6:	a201      	add	r2, pc, #4	; (adr r2, 8006afc <UART_SetConfig+0xbc>)
 8006af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afc:	08006ba1 	.word	0x08006ba1
 8006b00:	08006bd1 	.word	0x08006bd1
 8006b04:	08006bd1 	.word	0x08006bd1
 8006b08:	08006bd1 	.word	0x08006bd1
 8006b0c:	08006bd1 	.word	0x08006bd1
 8006b10:	08006bd1 	.word	0x08006bd1
 8006b14:	08006bd1 	.word	0x08006bd1
 8006b18:	08006bd1 	.word	0x08006bd1
 8006b1c:	08006ba9 	.word	0x08006ba9
 8006b20:	08006bd1 	.word	0x08006bd1
 8006b24:	08006bd1 	.word	0x08006bd1
 8006b28:	08006bd1 	.word	0x08006bd1
 8006b2c:	08006bd1 	.word	0x08006bd1
 8006b30:	08006bd1 	.word	0x08006bd1
 8006b34:	08006bd1 	.word	0x08006bd1
 8006b38:	08006bd1 	.word	0x08006bd1
 8006b3c:	08006bb1 	.word	0x08006bb1
 8006b40:	08006bd1 	.word	0x08006bd1
 8006b44:	08006bd1 	.word	0x08006bd1
 8006b48:	08006bd1 	.word	0x08006bd1
 8006b4c:	08006bd1 	.word	0x08006bd1
 8006b50:	08006bd1 	.word	0x08006bd1
 8006b54:	08006bd1 	.word	0x08006bd1
 8006b58:	08006bd1 	.word	0x08006bd1
 8006b5c:	08006bb9 	.word	0x08006bb9
 8006b60:	08006bd1 	.word	0x08006bd1
 8006b64:	08006bd1 	.word	0x08006bd1
 8006b68:	08006bd1 	.word	0x08006bd1
 8006b6c:	08006bd1 	.word	0x08006bd1
 8006b70:	08006bd1 	.word	0x08006bd1
 8006b74:	08006bd1 	.word	0x08006bd1
 8006b78:	08006bd1 	.word	0x08006bd1
 8006b7c:	08006bc1 	.word	0x08006bc1
 8006b80:	08006bd1 	.word	0x08006bd1
 8006b84:	08006bd1 	.word	0x08006bd1
 8006b88:	08006bd1 	.word	0x08006bd1
 8006b8c:	08006bd1 	.word	0x08006bd1
 8006b90:	08006bd1 	.word	0x08006bd1
 8006b94:	08006bd1 	.word	0x08006bd1
 8006b98:	08006bd1 	.word	0x08006bd1
 8006b9c:	08006bc9 	.word	0x08006bc9
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ba6:	e233      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006ba8:	2304      	movs	r3, #4
 8006baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bae:	e22f      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006bb0:	2308      	movs	r3, #8
 8006bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bb6:	e22b      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006bb8:	2310      	movs	r3, #16
 8006bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bbe:	e227      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006bc0:	2320      	movs	r3, #32
 8006bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bc6:	e223      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006bc8:	2340      	movs	r3, #64	; 0x40
 8006bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bce:	e21f      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006bd0:	2380      	movs	r3, #128	; 0x80
 8006bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bd6:	bf00      	nop
 8006bd8:	e21a      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a6d      	ldr	r2, [pc, #436]	; (8006d94 <UART_SetConfig+0x354>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d132      	bne.n	8006c4a <UART_SetConfig+0x20a>
 8006be4:	4b6a      	ldr	r3, [pc, #424]	; (8006d90 <UART_SetConfig+0x350>)
 8006be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	2b05      	cmp	r3, #5
 8006bee:	d827      	bhi.n	8006c40 <UART_SetConfig+0x200>
 8006bf0:	a201      	add	r2, pc, #4	; (adr r2, 8006bf8 <UART_SetConfig+0x1b8>)
 8006bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf6:	bf00      	nop
 8006bf8:	08006c11 	.word	0x08006c11
 8006bfc:	08006c19 	.word	0x08006c19
 8006c00:	08006c21 	.word	0x08006c21
 8006c04:	08006c29 	.word	0x08006c29
 8006c08:	08006c31 	.word	0x08006c31
 8006c0c:	08006c39 	.word	0x08006c39
 8006c10:	2300      	movs	r3, #0
 8006c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c16:	e1fb      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006c18:	2304      	movs	r3, #4
 8006c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c1e:	e1f7      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006c20:	2308      	movs	r3, #8
 8006c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c26:	e1f3      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006c28:	2310      	movs	r3, #16
 8006c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c2e:	e1ef      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006c30:	2320      	movs	r3, #32
 8006c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c36:	e1eb      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006c38:	2340      	movs	r3, #64	; 0x40
 8006c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c3e:	e1e7      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006c40:	2380      	movs	r3, #128	; 0x80
 8006c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c46:	bf00      	nop
 8006c48:	e1e2      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a52      	ldr	r2, [pc, #328]	; (8006d98 <UART_SetConfig+0x358>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d132      	bne.n	8006cba <UART_SetConfig+0x27a>
 8006c54:	4b4e      	ldr	r3, [pc, #312]	; (8006d90 <UART_SetConfig+0x350>)
 8006c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c58:	f003 0307 	and.w	r3, r3, #7
 8006c5c:	2b05      	cmp	r3, #5
 8006c5e:	d827      	bhi.n	8006cb0 <UART_SetConfig+0x270>
 8006c60:	a201      	add	r2, pc, #4	; (adr r2, 8006c68 <UART_SetConfig+0x228>)
 8006c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c66:	bf00      	nop
 8006c68:	08006c81 	.word	0x08006c81
 8006c6c:	08006c89 	.word	0x08006c89
 8006c70:	08006c91 	.word	0x08006c91
 8006c74:	08006c99 	.word	0x08006c99
 8006c78:	08006ca1 	.word	0x08006ca1
 8006c7c:	08006ca9 	.word	0x08006ca9
 8006c80:	2300      	movs	r3, #0
 8006c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c86:	e1c3      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006c88:	2304      	movs	r3, #4
 8006c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c8e:	e1bf      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006c90:	2308      	movs	r3, #8
 8006c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c96:	e1bb      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006c98:	2310      	movs	r3, #16
 8006c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c9e:	e1b7      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006ca0:	2320      	movs	r3, #32
 8006ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ca6:	e1b3      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006ca8:	2340      	movs	r3, #64	; 0x40
 8006caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cae:	e1af      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006cb0:	2380      	movs	r3, #128	; 0x80
 8006cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cb6:	bf00      	nop
 8006cb8:	e1aa      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a37      	ldr	r2, [pc, #220]	; (8006d9c <UART_SetConfig+0x35c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d132      	bne.n	8006d2a <UART_SetConfig+0x2ea>
 8006cc4:	4b32      	ldr	r3, [pc, #200]	; (8006d90 <UART_SetConfig+0x350>)
 8006cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc8:	f003 0307 	and.w	r3, r3, #7
 8006ccc:	2b05      	cmp	r3, #5
 8006cce:	d827      	bhi.n	8006d20 <UART_SetConfig+0x2e0>
 8006cd0:	a201      	add	r2, pc, #4	; (adr r2, 8006cd8 <UART_SetConfig+0x298>)
 8006cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd6:	bf00      	nop
 8006cd8:	08006cf1 	.word	0x08006cf1
 8006cdc:	08006cf9 	.word	0x08006cf9
 8006ce0:	08006d01 	.word	0x08006d01
 8006ce4:	08006d09 	.word	0x08006d09
 8006ce8:	08006d11 	.word	0x08006d11
 8006cec:	08006d19 	.word	0x08006d19
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cf6:	e18b      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006cf8:	2304      	movs	r3, #4
 8006cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cfe:	e187      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006d00:	2308      	movs	r3, #8
 8006d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d06:	e183      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006d08:	2310      	movs	r3, #16
 8006d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d0e:	e17f      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006d10:	2320      	movs	r3, #32
 8006d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d16:	e17b      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006d18:	2340      	movs	r3, #64	; 0x40
 8006d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d1e:	e177      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006d20:	2380      	movs	r3, #128	; 0x80
 8006d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d26:	bf00      	nop
 8006d28:	e172      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a1c      	ldr	r2, [pc, #112]	; (8006da0 <UART_SetConfig+0x360>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d144      	bne.n	8006dbe <UART_SetConfig+0x37e>
 8006d34:	4b16      	ldr	r3, [pc, #88]	; (8006d90 <UART_SetConfig+0x350>)
 8006d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d38:	f003 0307 	and.w	r3, r3, #7
 8006d3c:	2b05      	cmp	r3, #5
 8006d3e:	d839      	bhi.n	8006db4 <UART_SetConfig+0x374>
 8006d40:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <UART_SetConfig+0x308>)
 8006d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d46:	bf00      	nop
 8006d48:	08006d61 	.word	0x08006d61
 8006d4c:	08006d69 	.word	0x08006d69
 8006d50:	08006d71 	.word	0x08006d71
 8006d54:	08006d79 	.word	0x08006d79
 8006d58:	08006da5 	.word	0x08006da5
 8006d5c:	08006dad 	.word	0x08006dad
 8006d60:	2300      	movs	r3, #0
 8006d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d66:	e153      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006d68:	2304      	movs	r3, #4
 8006d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d6e:	e14f      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006d70:	2308      	movs	r3, #8
 8006d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d76:	e14b      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006d78:	2310      	movs	r3, #16
 8006d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d7e:	e147      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006d80:	cfff69f3 	.word	0xcfff69f3
 8006d84:	58000c00 	.word	0x58000c00
 8006d88:	11fff4ff 	.word	0x11fff4ff
 8006d8c:	40011000 	.word	0x40011000
 8006d90:	58024400 	.word	0x58024400
 8006d94:	40004400 	.word	0x40004400
 8006d98:	40004800 	.word	0x40004800
 8006d9c:	40004c00 	.word	0x40004c00
 8006da0:	40005000 	.word	0x40005000
 8006da4:	2320      	movs	r3, #32
 8006da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006daa:	e131      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006dac:	2340      	movs	r3, #64	; 0x40
 8006dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006db2:	e12d      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006db4:	2380      	movs	r3, #128	; 0x80
 8006db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dba:	bf00      	nop
 8006dbc:	e128      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4ab6      	ldr	r2, [pc, #728]	; (800709c <UART_SetConfig+0x65c>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d178      	bne.n	8006eba <UART_SetConfig+0x47a>
 8006dc8:	4bb5      	ldr	r3, [pc, #724]	; (80070a0 <UART_SetConfig+0x660>)
 8006dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dd0:	2b28      	cmp	r3, #40	; 0x28
 8006dd2:	d86d      	bhi.n	8006eb0 <UART_SetConfig+0x470>
 8006dd4:	a201      	add	r2, pc, #4	; (adr r2, 8006ddc <UART_SetConfig+0x39c>)
 8006dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dda:	bf00      	nop
 8006ddc:	08006e81 	.word	0x08006e81
 8006de0:	08006eb1 	.word	0x08006eb1
 8006de4:	08006eb1 	.word	0x08006eb1
 8006de8:	08006eb1 	.word	0x08006eb1
 8006dec:	08006eb1 	.word	0x08006eb1
 8006df0:	08006eb1 	.word	0x08006eb1
 8006df4:	08006eb1 	.word	0x08006eb1
 8006df8:	08006eb1 	.word	0x08006eb1
 8006dfc:	08006e89 	.word	0x08006e89
 8006e00:	08006eb1 	.word	0x08006eb1
 8006e04:	08006eb1 	.word	0x08006eb1
 8006e08:	08006eb1 	.word	0x08006eb1
 8006e0c:	08006eb1 	.word	0x08006eb1
 8006e10:	08006eb1 	.word	0x08006eb1
 8006e14:	08006eb1 	.word	0x08006eb1
 8006e18:	08006eb1 	.word	0x08006eb1
 8006e1c:	08006e91 	.word	0x08006e91
 8006e20:	08006eb1 	.word	0x08006eb1
 8006e24:	08006eb1 	.word	0x08006eb1
 8006e28:	08006eb1 	.word	0x08006eb1
 8006e2c:	08006eb1 	.word	0x08006eb1
 8006e30:	08006eb1 	.word	0x08006eb1
 8006e34:	08006eb1 	.word	0x08006eb1
 8006e38:	08006eb1 	.word	0x08006eb1
 8006e3c:	08006e99 	.word	0x08006e99
 8006e40:	08006eb1 	.word	0x08006eb1
 8006e44:	08006eb1 	.word	0x08006eb1
 8006e48:	08006eb1 	.word	0x08006eb1
 8006e4c:	08006eb1 	.word	0x08006eb1
 8006e50:	08006eb1 	.word	0x08006eb1
 8006e54:	08006eb1 	.word	0x08006eb1
 8006e58:	08006eb1 	.word	0x08006eb1
 8006e5c:	08006ea1 	.word	0x08006ea1
 8006e60:	08006eb1 	.word	0x08006eb1
 8006e64:	08006eb1 	.word	0x08006eb1
 8006e68:	08006eb1 	.word	0x08006eb1
 8006e6c:	08006eb1 	.word	0x08006eb1
 8006e70:	08006eb1 	.word	0x08006eb1
 8006e74:	08006eb1 	.word	0x08006eb1
 8006e78:	08006eb1 	.word	0x08006eb1
 8006e7c:	08006ea9 	.word	0x08006ea9
 8006e80:	2301      	movs	r3, #1
 8006e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e86:	e0c3      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006e88:	2304      	movs	r3, #4
 8006e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e8e:	e0bf      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006e90:	2308      	movs	r3, #8
 8006e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e96:	e0bb      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006e98:	2310      	movs	r3, #16
 8006e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e9e:	e0b7      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006ea0:	2320      	movs	r3, #32
 8006ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ea6:	e0b3      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006ea8:	2340      	movs	r3, #64	; 0x40
 8006eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eae:	e0af      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006eb0:	2380      	movs	r3, #128	; 0x80
 8006eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eb6:	bf00      	nop
 8006eb8:	e0aa      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a79      	ldr	r2, [pc, #484]	; (80070a4 <UART_SetConfig+0x664>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d132      	bne.n	8006f2a <UART_SetConfig+0x4ea>
 8006ec4:	4b76      	ldr	r3, [pc, #472]	; (80070a0 <UART_SetConfig+0x660>)
 8006ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec8:	f003 0307 	and.w	r3, r3, #7
 8006ecc:	2b05      	cmp	r3, #5
 8006ece:	d827      	bhi.n	8006f20 <UART_SetConfig+0x4e0>
 8006ed0:	a201      	add	r2, pc, #4	; (adr r2, 8006ed8 <UART_SetConfig+0x498>)
 8006ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed6:	bf00      	nop
 8006ed8:	08006ef1 	.word	0x08006ef1
 8006edc:	08006ef9 	.word	0x08006ef9
 8006ee0:	08006f01 	.word	0x08006f01
 8006ee4:	08006f09 	.word	0x08006f09
 8006ee8:	08006f11 	.word	0x08006f11
 8006eec:	08006f19 	.word	0x08006f19
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ef6:	e08b      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006ef8:	2304      	movs	r3, #4
 8006efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006efe:	e087      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006f00:	2308      	movs	r3, #8
 8006f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f06:	e083      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006f08:	2310      	movs	r3, #16
 8006f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f0e:	e07f      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006f10:	2320      	movs	r3, #32
 8006f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f16:	e07b      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006f18:	2340      	movs	r3, #64	; 0x40
 8006f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f1e:	e077      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006f20:	2380      	movs	r3, #128	; 0x80
 8006f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f26:	bf00      	nop
 8006f28:	e072      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a5e      	ldr	r2, [pc, #376]	; (80070a8 <UART_SetConfig+0x668>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d132      	bne.n	8006f9a <UART_SetConfig+0x55a>
 8006f34:	4b5a      	ldr	r3, [pc, #360]	; (80070a0 <UART_SetConfig+0x660>)
 8006f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f38:	f003 0307 	and.w	r3, r3, #7
 8006f3c:	2b05      	cmp	r3, #5
 8006f3e:	d827      	bhi.n	8006f90 <UART_SetConfig+0x550>
 8006f40:	a201      	add	r2, pc, #4	; (adr r2, 8006f48 <UART_SetConfig+0x508>)
 8006f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f46:	bf00      	nop
 8006f48:	08006f61 	.word	0x08006f61
 8006f4c:	08006f69 	.word	0x08006f69
 8006f50:	08006f71 	.word	0x08006f71
 8006f54:	08006f79 	.word	0x08006f79
 8006f58:	08006f81 	.word	0x08006f81
 8006f5c:	08006f89 	.word	0x08006f89
 8006f60:	2300      	movs	r3, #0
 8006f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f66:	e053      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006f68:	2304      	movs	r3, #4
 8006f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f6e:	e04f      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006f70:	2308      	movs	r3, #8
 8006f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f76:	e04b      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006f78:	2310      	movs	r3, #16
 8006f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f7e:	e047      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006f80:	2320      	movs	r3, #32
 8006f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f86:	e043      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006f88:	2340      	movs	r3, #64	; 0x40
 8006f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f8e:	e03f      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006f90:	2380      	movs	r3, #128	; 0x80
 8006f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f96:	bf00      	nop
 8006f98:	e03a      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a43      	ldr	r2, [pc, #268]	; (80070ac <UART_SetConfig+0x66c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d132      	bne.n	800700a <UART_SetConfig+0x5ca>
 8006fa4:	4b3e      	ldr	r3, [pc, #248]	; (80070a0 <UART_SetConfig+0x660>)
 8006fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	2b05      	cmp	r3, #5
 8006fae:	d827      	bhi.n	8007000 <UART_SetConfig+0x5c0>
 8006fb0:	a201      	add	r2, pc, #4	; (adr r2, 8006fb8 <UART_SetConfig+0x578>)
 8006fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb6:	bf00      	nop
 8006fb8:	08006fd1 	.word	0x08006fd1
 8006fbc:	08006fd9 	.word	0x08006fd9
 8006fc0:	08006fe1 	.word	0x08006fe1
 8006fc4:	08006fe9 	.word	0x08006fe9
 8006fc8:	08006ff1 	.word	0x08006ff1
 8006fcc:	08006ff9 	.word	0x08006ff9
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fd6:	e01b      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006fd8:	2304      	movs	r3, #4
 8006fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fde:	e017      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006fe0:	2308      	movs	r3, #8
 8006fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fe6:	e013      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006fe8:	2310      	movs	r3, #16
 8006fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fee:	e00f      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006ff0:	2320      	movs	r3, #32
 8006ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ff6:	e00b      	b.n	8007010 <UART_SetConfig+0x5d0>
 8006ff8:	2340      	movs	r3, #64	; 0x40
 8006ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ffe:	e007      	b.n	8007010 <UART_SetConfig+0x5d0>
 8007000:	2380      	movs	r3, #128	; 0x80
 8007002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007006:	bf00      	nop
 8007008:	e002      	b.n	8007010 <UART_SetConfig+0x5d0>
 800700a:	2380      	movs	r3, #128	; 0x80
 800700c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a25      	ldr	r2, [pc, #148]	; (80070ac <UART_SetConfig+0x66c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	f040 80b8 	bne.w	800718c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800701c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007020:	2b08      	cmp	r3, #8
 8007022:	d019      	beq.n	8007058 <UART_SetConfig+0x618>
 8007024:	2b08      	cmp	r3, #8
 8007026:	dc04      	bgt.n	8007032 <UART_SetConfig+0x5f2>
 8007028:	2b02      	cmp	r3, #2
 800702a:	d009      	beq.n	8007040 <UART_SetConfig+0x600>
 800702c:	2b04      	cmp	r3, #4
 800702e:	d00b      	beq.n	8007048 <UART_SetConfig+0x608>
 8007030:	e042      	b.n	80070b8 <UART_SetConfig+0x678>
 8007032:	2b20      	cmp	r3, #32
 8007034:	d02b      	beq.n	800708e <UART_SetConfig+0x64e>
 8007036:	2b40      	cmp	r3, #64	; 0x40
 8007038:	d02c      	beq.n	8007094 <UART_SetConfig+0x654>
 800703a:	2b10      	cmp	r3, #16
 800703c:	d014      	beq.n	8007068 <UART_SetConfig+0x628>
 800703e:	e03b      	b.n	80070b8 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007040:	f7fe ff7c 	bl	8005f3c <HAL_RCCEx_GetD3PCLK1Freq>
 8007044:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007046:	e03d      	b.n	80070c4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007048:	f107 0314 	add.w	r3, r7, #20
 800704c:	4618      	mov	r0, r3
 800704e:	f7fe ff8b 	bl	8005f68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007056:	e035      	b.n	80070c4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007058:	f107 0308 	add.w	r3, r7, #8
 800705c:	4618      	mov	r0, r3
 800705e:	f7ff f8cf 	bl	8006200 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007066:	e02d      	b.n	80070c4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007068:	4b0d      	ldr	r3, [pc, #52]	; (80070a0 <UART_SetConfig+0x660>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0320 	and.w	r3, r3, #32
 8007070:	2b00      	cmp	r3, #0
 8007072:	d009      	beq.n	8007088 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007074:	4b0a      	ldr	r3, [pc, #40]	; (80070a0 <UART_SetConfig+0x660>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	08db      	lsrs	r3, r3, #3
 800707a:	f003 0303 	and.w	r3, r3, #3
 800707e:	4a0c      	ldr	r2, [pc, #48]	; (80070b0 <UART_SetConfig+0x670>)
 8007080:	fa22 f303 	lsr.w	r3, r2, r3
 8007084:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007086:	e01d      	b.n	80070c4 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8007088:	4b09      	ldr	r3, [pc, #36]	; (80070b0 <UART_SetConfig+0x670>)
 800708a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800708c:	e01a      	b.n	80070c4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800708e:	4b09      	ldr	r3, [pc, #36]	; (80070b4 <UART_SetConfig+0x674>)
 8007090:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007092:	e017      	b.n	80070c4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007098:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800709a:	e013      	b.n	80070c4 <UART_SetConfig+0x684>
 800709c:	40011400 	.word	0x40011400
 80070a0:	58024400 	.word	0x58024400
 80070a4:	40007800 	.word	0x40007800
 80070a8:	40007c00 	.word	0x40007c00
 80070ac:	58000c00 	.word	0x58000c00
 80070b0:	03d09000 	.word	0x03d09000
 80070b4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80070c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 824d 	beq.w	8007566 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	4aad      	ldr	r2, [pc, #692]	; (8007388 <UART_SetConfig+0x948>)
 80070d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070d6:	461a      	mov	r2, r3
 80070d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070da:	fbb3 f3f2 	udiv	r3, r3, r2
 80070de:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	4613      	mov	r3, r2
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	4413      	add	r3, r2
 80070ea:	6a3a      	ldr	r2, [r7, #32]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d305      	bcc.n	80070fc <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070f6:	6a3a      	ldr	r2, [r7, #32]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d903      	bls.n	8007104 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007102:	e230      	b.n	8007566 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007106:	4618      	mov	r0, r3
 8007108:	f04f 0100 	mov.w	r1, #0
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	4a9d      	ldr	r2, [pc, #628]	; (8007388 <UART_SetConfig+0x948>)
 8007112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007116:	b29b      	uxth	r3, r3
 8007118:	f04f 0400 	mov.w	r4, #0
 800711c:	461a      	mov	r2, r3
 800711e:	4623      	mov	r3, r4
 8007120:	f7f9 f936 	bl	8000390 <__aeabi_uldivmod>
 8007124:	4603      	mov	r3, r0
 8007126:	460c      	mov	r4, r1
 8007128:	4619      	mov	r1, r3
 800712a:	4622      	mov	r2, r4
 800712c:	f04f 0300 	mov.w	r3, #0
 8007130:	f04f 0400 	mov.w	r4, #0
 8007134:	0214      	lsls	r4, r2, #8
 8007136:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800713a:	020b      	lsls	r3, r1, #8
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	6852      	ldr	r2, [r2, #4]
 8007140:	0852      	lsrs	r2, r2, #1
 8007142:	4611      	mov	r1, r2
 8007144:	f04f 0200 	mov.w	r2, #0
 8007148:	eb13 0b01 	adds.w	fp, r3, r1
 800714c:	eb44 0c02 	adc.w	ip, r4, r2
 8007150:	4658      	mov	r0, fp
 8007152:	4661      	mov	r1, ip
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f04f 0400 	mov.w	r4, #0
 800715c:	461a      	mov	r2, r3
 800715e:	4623      	mov	r3, r4
 8007160:	f7f9 f916 	bl	8000390 <__aeabi_uldivmod>
 8007164:	4603      	mov	r3, r0
 8007166:	460c      	mov	r4, r1
 8007168:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800716a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007170:	d308      	bcc.n	8007184 <UART_SetConfig+0x744>
 8007172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007174:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007178:	d204      	bcs.n	8007184 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007180:	60da      	str	r2, [r3, #12]
 8007182:	e1f0      	b.n	8007566 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800718a:	e1ec      	b.n	8007566 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007194:	f040 8100 	bne.w	8007398 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8007198:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800719c:	2b40      	cmp	r3, #64	; 0x40
 800719e:	f200 80b7 	bhi.w	8007310 <UART_SetConfig+0x8d0>
 80071a2:	a201      	add	r2, pc, #4	; (adr r2, 80071a8 <UART_SetConfig+0x768>)
 80071a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a8:	080072ad 	.word	0x080072ad
 80071ac:	080072b5 	.word	0x080072b5
 80071b0:	08007311 	.word	0x08007311
 80071b4:	08007311 	.word	0x08007311
 80071b8:	080072bd 	.word	0x080072bd
 80071bc:	08007311 	.word	0x08007311
 80071c0:	08007311 	.word	0x08007311
 80071c4:	08007311 	.word	0x08007311
 80071c8:	080072cd 	.word	0x080072cd
 80071cc:	08007311 	.word	0x08007311
 80071d0:	08007311 	.word	0x08007311
 80071d4:	08007311 	.word	0x08007311
 80071d8:	08007311 	.word	0x08007311
 80071dc:	08007311 	.word	0x08007311
 80071e0:	08007311 	.word	0x08007311
 80071e4:	08007311 	.word	0x08007311
 80071e8:	080072dd 	.word	0x080072dd
 80071ec:	08007311 	.word	0x08007311
 80071f0:	08007311 	.word	0x08007311
 80071f4:	08007311 	.word	0x08007311
 80071f8:	08007311 	.word	0x08007311
 80071fc:	08007311 	.word	0x08007311
 8007200:	08007311 	.word	0x08007311
 8007204:	08007311 	.word	0x08007311
 8007208:	08007311 	.word	0x08007311
 800720c:	08007311 	.word	0x08007311
 8007210:	08007311 	.word	0x08007311
 8007214:	08007311 	.word	0x08007311
 8007218:	08007311 	.word	0x08007311
 800721c:	08007311 	.word	0x08007311
 8007220:	08007311 	.word	0x08007311
 8007224:	08007311 	.word	0x08007311
 8007228:	08007303 	.word	0x08007303
 800722c:	08007311 	.word	0x08007311
 8007230:	08007311 	.word	0x08007311
 8007234:	08007311 	.word	0x08007311
 8007238:	08007311 	.word	0x08007311
 800723c:	08007311 	.word	0x08007311
 8007240:	08007311 	.word	0x08007311
 8007244:	08007311 	.word	0x08007311
 8007248:	08007311 	.word	0x08007311
 800724c:	08007311 	.word	0x08007311
 8007250:	08007311 	.word	0x08007311
 8007254:	08007311 	.word	0x08007311
 8007258:	08007311 	.word	0x08007311
 800725c:	08007311 	.word	0x08007311
 8007260:	08007311 	.word	0x08007311
 8007264:	08007311 	.word	0x08007311
 8007268:	08007311 	.word	0x08007311
 800726c:	08007311 	.word	0x08007311
 8007270:	08007311 	.word	0x08007311
 8007274:	08007311 	.word	0x08007311
 8007278:	08007311 	.word	0x08007311
 800727c:	08007311 	.word	0x08007311
 8007280:	08007311 	.word	0x08007311
 8007284:	08007311 	.word	0x08007311
 8007288:	08007311 	.word	0x08007311
 800728c:	08007311 	.word	0x08007311
 8007290:	08007311 	.word	0x08007311
 8007294:	08007311 	.word	0x08007311
 8007298:	08007311 	.word	0x08007311
 800729c:	08007311 	.word	0x08007311
 80072a0:	08007311 	.word	0x08007311
 80072a4:	08007311 	.word	0x08007311
 80072a8:	08007309 	.word	0x08007309
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072ac:	f7fd ff2c 	bl	8005108 <HAL_RCC_GetPCLK1Freq>
 80072b0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80072b2:	e033      	b.n	800731c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072b4:	f7fd ff3e 	bl	8005134 <HAL_RCC_GetPCLK2Freq>
 80072b8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80072ba:	e02f      	b.n	800731c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072bc:	f107 0314 	add.w	r3, r7, #20
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7fe fe51 	bl	8005f68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072ca:	e027      	b.n	800731c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072cc:	f107 0308 	add.w	r3, r7, #8
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fe ff95 	bl	8006200 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072da:	e01f      	b.n	800731c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072dc:	4b2b      	ldr	r3, [pc, #172]	; (800738c <UART_SetConfig+0x94c>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0320 	and.w	r3, r3, #32
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d009      	beq.n	80072fc <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80072e8:	4b28      	ldr	r3, [pc, #160]	; (800738c <UART_SetConfig+0x94c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	08db      	lsrs	r3, r3, #3
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	4a27      	ldr	r2, [pc, #156]	; (8007390 <UART_SetConfig+0x950>)
 80072f4:	fa22 f303 	lsr.w	r3, r2, r3
 80072f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80072fa:	e00f      	b.n	800731c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80072fc:	4b24      	ldr	r3, [pc, #144]	; (8007390 <UART_SetConfig+0x950>)
 80072fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007300:	e00c      	b.n	800731c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007302:	4b24      	ldr	r3, [pc, #144]	; (8007394 <UART_SetConfig+0x954>)
 8007304:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007306:	e009      	b.n	800731c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800730c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800730e:	e005      	b.n	800731c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800731a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800731c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 8121 	beq.w	8007566 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	4a17      	ldr	r2, [pc, #92]	; (8007388 <UART_SetConfig+0x948>)
 800732a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800732e:	461a      	mov	r2, r3
 8007330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007332:	fbb3 f3f2 	udiv	r3, r3, r2
 8007336:	005a      	lsls	r2, r3, #1
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	085b      	lsrs	r3, r3, #1
 800733e:	441a      	add	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	fbb2 f3f3 	udiv	r3, r2, r3
 8007348:	b29b      	uxth	r3, r3
 800734a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800734c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734e:	2b0f      	cmp	r3, #15
 8007350:	d916      	bls.n	8007380 <UART_SetConfig+0x940>
 8007352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007358:	d212      	bcs.n	8007380 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800735a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735c:	b29b      	uxth	r3, r3
 800735e:	f023 030f 	bic.w	r3, r3, #15
 8007362:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007366:	085b      	lsrs	r3, r3, #1
 8007368:	b29b      	uxth	r3, r3
 800736a:	f003 0307 	and.w	r3, r3, #7
 800736e:	b29a      	uxth	r2, r3
 8007370:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007372:	4313      	orrs	r3, r2
 8007374:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800737c:	60da      	str	r2, [r3, #12]
 800737e:	e0f2      	b.n	8007566 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007386:	e0ee      	b.n	8007566 <UART_SetConfig+0xb26>
 8007388:	08013dcc 	.word	0x08013dcc
 800738c:	58024400 	.word	0x58024400
 8007390:	03d09000 	.word	0x03d09000
 8007394:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8007398:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800739c:	2b40      	cmp	r3, #64	; 0x40
 800739e:	f200 80b7 	bhi.w	8007510 <UART_SetConfig+0xad0>
 80073a2:	a201      	add	r2, pc, #4	; (adr r2, 80073a8 <UART_SetConfig+0x968>)
 80073a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a8:	080074ad 	.word	0x080074ad
 80073ac:	080074b5 	.word	0x080074b5
 80073b0:	08007511 	.word	0x08007511
 80073b4:	08007511 	.word	0x08007511
 80073b8:	080074bd 	.word	0x080074bd
 80073bc:	08007511 	.word	0x08007511
 80073c0:	08007511 	.word	0x08007511
 80073c4:	08007511 	.word	0x08007511
 80073c8:	080074cd 	.word	0x080074cd
 80073cc:	08007511 	.word	0x08007511
 80073d0:	08007511 	.word	0x08007511
 80073d4:	08007511 	.word	0x08007511
 80073d8:	08007511 	.word	0x08007511
 80073dc:	08007511 	.word	0x08007511
 80073e0:	08007511 	.word	0x08007511
 80073e4:	08007511 	.word	0x08007511
 80073e8:	080074dd 	.word	0x080074dd
 80073ec:	08007511 	.word	0x08007511
 80073f0:	08007511 	.word	0x08007511
 80073f4:	08007511 	.word	0x08007511
 80073f8:	08007511 	.word	0x08007511
 80073fc:	08007511 	.word	0x08007511
 8007400:	08007511 	.word	0x08007511
 8007404:	08007511 	.word	0x08007511
 8007408:	08007511 	.word	0x08007511
 800740c:	08007511 	.word	0x08007511
 8007410:	08007511 	.word	0x08007511
 8007414:	08007511 	.word	0x08007511
 8007418:	08007511 	.word	0x08007511
 800741c:	08007511 	.word	0x08007511
 8007420:	08007511 	.word	0x08007511
 8007424:	08007511 	.word	0x08007511
 8007428:	08007503 	.word	0x08007503
 800742c:	08007511 	.word	0x08007511
 8007430:	08007511 	.word	0x08007511
 8007434:	08007511 	.word	0x08007511
 8007438:	08007511 	.word	0x08007511
 800743c:	08007511 	.word	0x08007511
 8007440:	08007511 	.word	0x08007511
 8007444:	08007511 	.word	0x08007511
 8007448:	08007511 	.word	0x08007511
 800744c:	08007511 	.word	0x08007511
 8007450:	08007511 	.word	0x08007511
 8007454:	08007511 	.word	0x08007511
 8007458:	08007511 	.word	0x08007511
 800745c:	08007511 	.word	0x08007511
 8007460:	08007511 	.word	0x08007511
 8007464:	08007511 	.word	0x08007511
 8007468:	08007511 	.word	0x08007511
 800746c:	08007511 	.word	0x08007511
 8007470:	08007511 	.word	0x08007511
 8007474:	08007511 	.word	0x08007511
 8007478:	08007511 	.word	0x08007511
 800747c:	08007511 	.word	0x08007511
 8007480:	08007511 	.word	0x08007511
 8007484:	08007511 	.word	0x08007511
 8007488:	08007511 	.word	0x08007511
 800748c:	08007511 	.word	0x08007511
 8007490:	08007511 	.word	0x08007511
 8007494:	08007511 	.word	0x08007511
 8007498:	08007511 	.word	0x08007511
 800749c:	08007511 	.word	0x08007511
 80074a0:	08007511 	.word	0x08007511
 80074a4:	08007511 	.word	0x08007511
 80074a8:	08007509 	.word	0x08007509
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074ac:	f7fd fe2c 	bl	8005108 <HAL_RCC_GetPCLK1Freq>
 80074b0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80074b2:	e033      	b.n	800751c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074b4:	f7fd fe3e 	bl	8005134 <HAL_RCC_GetPCLK2Freq>
 80074b8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80074ba:	e02f      	b.n	800751c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074bc:	f107 0314 	add.w	r3, r7, #20
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fe fd51 	bl	8005f68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074ca:	e027      	b.n	800751c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074cc:	f107 0308 	add.w	r3, r7, #8
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fe fe95 	bl	8006200 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074da:	e01f      	b.n	800751c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074dc:	4b2c      	ldr	r3, [pc, #176]	; (8007590 <UART_SetConfig+0xb50>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0320 	and.w	r3, r3, #32
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d009      	beq.n	80074fc <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074e8:	4b29      	ldr	r3, [pc, #164]	; (8007590 <UART_SetConfig+0xb50>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	08db      	lsrs	r3, r3, #3
 80074ee:	f003 0303 	and.w	r3, r3, #3
 80074f2:	4a28      	ldr	r2, [pc, #160]	; (8007594 <UART_SetConfig+0xb54>)
 80074f4:	fa22 f303 	lsr.w	r3, r2, r3
 80074f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074fa:	e00f      	b.n	800751c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80074fc:	4b25      	ldr	r3, [pc, #148]	; (8007594 <UART_SetConfig+0xb54>)
 80074fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007500:	e00c      	b.n	800751c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007502:	4b25      	ldr	r3, [pc, #148]	; (8007598 <UART_SetConfig+0xb58>)
 8007504:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007506:	e009      	b.n	800751c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007508:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800750c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800750e:	e005      	b.n	800751c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800751a:	bf00      	nop
    }

    if (pclk != 0U)
 800751c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d021      	beq.n	8007566 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	4a1d      	ldr	r2, [pc, #116]	; (800759c <UART_SetConfig+0xb5c>)
 8007528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800752c:	461a      	mov	r2, r3
 800752e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007530:	fbb3 f2f2 	udiv	r2, r3, r2
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	085b      	lsrs	r3, r3, #1
 800753a:	441a      	add	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	fbb2 f3f3 	udiv	r3, r2, r3
 8007544:	b29b      	uxth	r3, r3
 8007546:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754a:	2b0f      	cmp	r3, #15
 800754c:	d908      	bls.n	8007560 <UART_SetConfig+0xb20>
 800754e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007554:	d204      	bcs.n	8007560 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800755c:	60da      	str	r2, [r3, #12]
 800755e:	e002      	b.n	8007566 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007582:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007586:	4618      	mov	r0, r3
 8007588:	3738      	adds	r7, #56	; 0x38
 800758a:	46bd      	mov	sp, r7
 800758c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007590:	58024400 	.word	0x58024400
 8007594:	03d09000 	.word	0x03d09000
 8007598:	003d0900 	.word	0x003d0900
 800759c:	08013dcc 	.word	0x08013dcc

080075a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00a      	beq.n	80075ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	430a      	orrs	r2, r1
 80075ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00a      	beq.n	800760e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	430a      	orrs	r2, r1
 800760c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007612:	f003 0308 	and.w	r3, r3, #8
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00a      	beq.n	8007630 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	430a      	orrs	r2, r1
 800762e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007634:	f003 0310 	and.w	r3, r3, #16
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00a      	beq.n	8007652 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007656:	f003 0320 	and.w	r3, r3, #32
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767c:	2b00      	cmp	r3, #0
 800767e:	d01a      	beq.n	80076b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800769a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800769e:	d10a      	bne.n	80076b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	430a      	orrs	r2, r1
 80076b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00a      	beq.n	80076d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	430a      	orrs	r2, r1
 80076d6:	605a      	str	r2, [r3, #4]
  }
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af02      	add	r7, sp, #8
 80076ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80076f4:	f7fa f83e 	bl	8001774 <HAL_GetTick>
 80076f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0308 	and.w	r3, r3, #8
 8007704:	2b08      	cmp	r3, #8
 8007706:	d10e      	bne.n	8007726 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007708:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f82c 	bl	8007774 <UART_WaitOnFlagUntilTimeout>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e022      	b.n	800776c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0304 	and.w	r3, r3, #4
 8007730:	2b04      	cmp	r3, #4
 8007732:	d10e      	bne.n	8007752 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f816 	bl	8007774 <UART_WaitOnFlagUntilTimeout>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e00c      	b.n	800776c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2220      	movs	r2, #32
 8007756:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2220      	movs	r2, #32
 800775e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	603b      	str	r3, [r7, #0]
 8007780:	4613      	mov	r3, r2
 8007782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007784:	e062      	b.n	800784c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778c:	d05e      	beq.n	800784c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800778e:	f7f9 fff1 	bl	8001774 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	429a      	cmp	r2, r3
 800779c:	d302      	bcc.n	80077a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d11d      	bne.n	80077e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80077b2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689a      	ldr	r2, [r3, #8]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f022 0201 	bic.w	r2, r2, #1
 80077c2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2220      	movs	r2, #32
 80077c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2220      	movs	r2, #32
 80077d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e045      	b.n	800786c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0304 	and.w	r3, r3, #4
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d02e      	beq.n	800784c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	69db      	ldr	r3, [r3, #28]
 80077f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077fc:	d126      	bne.n	800784c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007806:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007816:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	689a      	ldr	r2, [r3, #8]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f022 0201 	bic.w	r2, r2, #1
 8007826:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2220      	movs	r2, #32
 800782c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2220      	movs	r2, #32
 8007834:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2220      	movs	r2, #32
 800783c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e00f      	b.n	800786c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	69da      	ldr	r2, [r3, #28]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	4013      	ands	r3, r2
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	429a      	cmp	r2, r3
 800785a:	bf0c      	ite	eq
 800785c:	2301      	moveq	r3, #1
 800785e:	2300      	movne	r3, #0
 8007860:	b2db      	uxtb	r3, r3
 8007862:	461a      	mov	r2, r3
 8007864:	79fb      	ldrb	r3, [r7, #7]
 8007866:	429a      	cmp	r2, r3
 8007868:	d08d      	beq.n	8007786 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007882:	2b01      	cmp	r3, #1
 8007884:	d101      	bne.n	800788a <HAL_UARTEx_DisableFifoMode+0x16>
 8007886:	2302      	movs	r3, #2
 8007888:	e027      	b.n	80078da <HAL_UARTEx_DisableFifoMode+0x66>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2224      	movs	r2, #36	; 0x24
 8007896:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 0201 	bic.w	r2, r2, #1
 80078b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80078b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b084      	sub	sp, #16
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d101      	bne.n	80078fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078fa:	2302      	movs	r3, #2
 80078fc:	e02d      	b.n	800795a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2224      	movs	r2, #36	; 0x24
 800790a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f022 0201 	bic.w	r2, r2, #1
 8007924:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f850 	bl	80079e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2220      	movs	r2, #32
 800794c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007972:	2b01      	cmp	r3, #1
 8007974:	d101      	bne.n	800797a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007976:	2302      	movs	r3, #2
 8007978:	e02d      	b.n	80079d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2224      	movs	r2, #36	; 0x24
 8007986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f022 0201 	bic.w	r2, r2, #1
 80079a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f812 	bl	80079e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2220      	movs	r2, #32
 80079c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
	...

080079e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b089      	sub	sp, #36	; 0x24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80079e8:	4a2f      	ldr	r2, [pc, #188]	; (8007aa8 <UARTEx_SetNbDataToProcess+0xc8>)
 80079ea:	f107 0314 	add.w	r3, r7, #20
 80079ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80079f2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80079f6:	4a2d      	ldr	r2, [pc, #180]	; (8007aac <UARTEx_SetNbDataToProcess+0xcc>)
 80079f8:	f107 030c 	add.w	r3, r7, #12
 80079fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a00:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d108      	bne.n	8007a1e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a1c:	e03d      	b.n	8007a9a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a1e:	2310      	movs	r3, #16
 8007a20:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a22:	2310      	movs	r3, #16
 8007a24:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	0e5b      	lsrs	r3, r3, #25
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	f003 0307 	and.w	r3, r3, #7
 8007a34:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	0f5b      	lsrs	r3, r3, #29
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	f003 0307 	and.w	r3, r3, #7
 8007a44:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007a46:	7fbb      	ldrb	r3, [r7, #30]
 8007a48:	7f3a      	ldrb	r2, [r7, #28]
 8007a4a:	f107 0120 	add.w	r1, r7, #32
 8007a4e:	440a      	add	r2, r1
 8007a50:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007a54:	fb02 f303 	mul.w	r3, r2, r3
 8007a58:	7f3a      	ldrb	r2, [r7, #28]
 8007a5a:	f107 0120 	add.w	r1, r7, #32
 8007a5e:	440a      	add	r2, r1
 8007a60:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007a64:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007a70:	7ffb      	ldrb	r3, [r7, #31]
 8007a72:	7f7a      	ldrb	r2, [r7, #29]
 8007a74:	f107 0120 	add.w	r1, r7, #32
 8007a78:	440a      	add	r2, r1
 8007a7a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007a7e:	fb02 f303 	mul.w	r3, r2, r3
 8007a82:	7f7a      	ldrb	r2, [r7, #29]
 8007a84:	f107 0120 	add.w	r1, r7, #32
 8007a88:	440a      	add	r2, r1
 8007a8a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007a8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007a9a:	bf00      	nop
 8007a9c:	3724      	adds	r7, #36	; 0x24
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	08013d60 	.word	0x08013d60
 8007aac:	08013d68 	.word	0x08013d68

08007ab0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ab0:	b084      	sub	sp, #16
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	f107 001c 	add.w	r0, r7, #28
 8007abe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d120      	bne.n	8007b0a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007acc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68da      	ldr	r2, [r3, #12]
 8007ad8:	4b25      	ldr	r3, [pc, #148]	; (8007b70 <USB_CoreInit+0xc0>)
 8007ada:	4013      	ands	r3, r2
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d105      	bne.n	8007afe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f94c 	bl	8007d9c <USB_CoreReset>
 8007b04:	4603      	mov	r3, r0
 8007b06:	73fb      	strb	r3, [r7, #15]
 8007b08:	e01a      	b.n	8007b40 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f940 	bl	8007d9c <USB_CoreReset>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d106      	bne.n	8007b34 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	639a      	str	r2, [r3, #56]	; 0x38
 8007b32:	e005      	b.n	8007b40 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d10b      	bne.n	8007b5e <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f043 0206 	orr.w	r2, r3, #6
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f043 0220 	orr.w	r2, r3, #32
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b6a:	b004      	add	sp, #16
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	ffbdffbf 	.word	0xffbdffbf

08007b74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f043 0201 	orr.w	r2, r3, #1
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	370c      	adds	r7, #12
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b083      	sub	sp, #12
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f023 0201 	bic.w	r2, r3, #1
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d106      	bne.n	8007be4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	60da      	str	r2, [r3, #12]
 8007be2:	e00b      	b.n	8007bfc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007be4:	78fb      	ldrb	r3, [r7, #3]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d106      	bne.n	8007bf8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	60da      	str	r2, [r3, #12]
 8007bf6:	e001      	b.n	8007bfc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e003      	b.n	8007c04 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007bfc:	2032      	movs	r0, #50	; 0x32
 8007bfe:	f7f9 fdc5 	bl	800178c <HAL_Delay>

  return HAL_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	019b      	lsls	r3, r3, #6
 8007c1e:	f043 0220 	orr.w	r2, r3, #32
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4a09      	ldr	r2, [pc, #36]	; (8007c54 <USB_FlushTxFifo+0x48>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d901      	bls.n	8007c38 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e006      	b.n	8007c46 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	f003 0320 	and.w	r3, r3, #32
 8007c40:	2b20      	cmp	r3, #32
 8007c42:	d0f0      	beq.n	8007c26 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	00030d40 	.word	0x00030d40

08007c58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007c60:	2300      	movs	r3, #0
 8007c62:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2210      	movs	r2, #16
 8007c68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	60fb      	str	r3, [r7, #12]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4a09      	ldr	r2, [pc, #36]	; (8007c98 <USB_FlushRxFifo+0x40>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d901      	bls.n	8007c7c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e006      	b.n	8007c8a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	f003 0310 	and.w	r3, r3, #16
 8007c84:	2b10      	cmp	r3, #16
 8007c86:	d0f0      	beq.n	8007c6a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	00030d40 	.word	0x00030d40

08007c9c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b089      	sub	sp, #36	; 0x24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	461a      	mov	r2, r3
 8007caa:	460b      	mov	r3, r1
 8007cac:	71fb      	strb	r3, [r7, #7]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007cba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d11a      	bne.n	8007cf8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007cc2:	88bb      	ldrh	r3, [r7, #4]
 8007cc4:	3303      	adds	r3, #3
 8007cc6:	089b      	lsrs	r3, r3, #2
 8007cc8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007cca:	2300      	movs	r3, #0
 8007ccc:	61bb      	str	r3, [r7, #24]
 8007cce:	e00f      	b.n	8007cf0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007cd0:	79fb      	ldrb	r3, [r7, #7]
 8007cd2:	031a      	lsls	r2, r3, #12
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cdc:	461a      	mov	r2, r3
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	3301      	adds	r3, #1
 8007cee:	61bb      	str	r3, [r7, #24]
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d3eb      	bcc.n	8007cd0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3724      	adds	r7, #36	; 0x24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b089      	sub	sp, #36	; 0x24
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	60f8      	str	r0, [r7, #12]
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	4613      	mov	r3, r2
 8007d12:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007d1c:	88fb      	ldrh	r3, [r7, #6]
 8007d1e:	3303      	adds	r3, #3
 8007d20:	089b      	lsrs	r3, r3, #2
 8007d22:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007d24:	2300      	movs	r3, #0
 8007d26:	61bb      	str	r3, [r7, #24]
 8007d28:	e00b      	b.n	8007d42 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	3304      	adds	r3, #4
 8007d3a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	61bb      	str	r3, [r7, #24]
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d3ef      	bcc.n	8007d2a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007d4a:	69fb      	ldr	r3, [r7, #28]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3724      	adds	r7, #36	; 0x24
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d70:	68fb      	ldr	r3, [r7, #12]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b083      	sub	sp, #12
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	f003 0301 	and.w	r3, r3, #1
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
	...

08007d9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007da4:	2300      	movs	r3, #0
 8007da6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3301      	adds	r3, #1
 8007dac:	60fb      	str	r3, [r7, #12]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4a13      	ldr	r2, [pc, #76]	; (8007e00 <USB_CoreReset+0x64>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d901      	bls.n	8007dba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e01b      	b.n	8007df2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	daf2      	bge.n	8007da8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	f043 0201 	orr.w	r2, r3, #1
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	4a09      	ldr	r2, [pc, #36]	; (8007e00 <USB_CoreReset+0x64>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d901      	bls.n	8007de4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e006      	b.n	8007df2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d0f0      	beq.n	8007dd2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	00030d40 	.word	0x00030d40

08007e04 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e04:	b084      	sub	sp, #16
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b084      	sub	sp, #16
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	f107 001c 	add.w	r0, r7, #28
 8007e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e20:	461a      	mov	r2, r3
 8007e22:	2300      	movs	r3, #0
 8007e24:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d018      	beq.n	8007e7c <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d10a      	bne.n	8007e66 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e5e:	f043 0304 	orr.w	r3, r3, #4
 8007e62:	6013      	str	r3, [r2, #0]
 8007e64:	e014      	b.n	8007e90 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e74:	f023 0304 	bic.w	r3, r3, #4
 8007e78:	6013      	str	r3, [r2, #0]
 8007e7a:	e009      	b.n	8007e90 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e8a:	f023 0304 	bic.w	r3, r3, #4
 8007e8e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007e90:	2110      	movs	r1, #16
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f7ff feba 	bl	8007c0c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7ff fedd 	bl	8007c58 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60fb      	str	r3, [r7, #12]
 8007ea2:	e015      	b.n	8007ed0 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8007eb6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d3e5      	bcc.n	8007ea4 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007ed8:	2101      	movs	r1, #1
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f8ac 	bl	8008038 <USB_DriveVbus>

  HAL_Delay(200U);
 8007ee0:	20c8      	movs	r0, #200	; 0xc8
 8007ee2:	f7f9 fc53 	bl	800178c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00b      	beq.n	8007f18 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f06:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a14      	ldr	r2, [pc, #80]	; (8007f5c <USB_HostInit+0x158>)
 8007f0c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a13      	ldr	r2, [pc, #76]	; (8007f60 <USB_HostInit+0x15c>)
 8007f12:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007f16:	e009      	b.n	8007f2c <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2280      	movs	r2, #128	; 0x80
 8007f1c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a10      	ldr	r2, [pc, #64]	; (8007f64 <USB_HostInit+0x160>)
 8007f22:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a10      	ldr	r2, [pc, #64]	; (8007f68 <USB_HostInit+0x164>)
 8007f28:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d105      	bne.n	8007f3e <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	f043 0210 	orr.w	r2, r3, #16
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	699a      	ldr	r2, [r3, #24]
 8007f42:	4b0a      	ldr	r3, [pc, #40]	; (8007f6c <USB_HostInit+0x168>)
 8007f44:	4313      	orrs	r3, r2
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f56:	b004      	add	sp, #16
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	01000200 	.word	0x01000200
 8007f60:	00e00300 	.word	0x00e00300
 8007f64:	00600080 	.word	0x00600080
 8007f68:	004000e0 	.word	0x004000e0
 8007f6c:	a3200008 	.word	0xa3200008

08007f70 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f8e:	f023 0303 	bic.w	r3, r3, #3
 8007f92:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	78fb      	ldrb	r3, [r7, #3]
 8007f9e:	f003 0303 	and.w	r3, r3, #3
 8007fa2:	68f9      	ldr	r1, [r7, #12]
 8007fa4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007fac:	78fb      	ldrb	r3, [r7, #3]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d107      	bne.n	8007fc2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fb8:	461a      	mov	r2, r3
 8007fba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007fbe:	6053      	str	r3, [r2, #4]
 8007fc0:	e009      	b.n	8007fd6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007fc2:	78fb      	ldrb	r3, [r7, #3]
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d106      	bne.n	8007fd6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f241 7370 	movw	r3, #6000	; 0x1770
 8007fd4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008004:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800800e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008012:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008014:	2064      	movs	r0, #100	; 0x64
 8008016:	f7f9 fbb9 	bl	800178c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008022:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008026:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008028:	200a      	movs	r0, #10
 800802a:	f7f9 fbaf 	bl	800178c <HAL_Delay>

  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	460b      	mov	r3, r1
 8008042:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008048:	2300      	movs	r3, #0
 800804a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800805c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d109      	bne.n	800807c <USB_DriveVbus+0x44>
 8008068:	78fb      	ldrb	r3, [r7, #3]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d106      	bne.n	800807c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008076:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800807a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008086:	d109      	bne.n	800809c <USB_DriveVbus+0x64>
 8008088:	78fb      	ldrb	r3, [r7, #3]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d106      	bne.n	800809c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008096:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800809a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b085      	sub	sp, #20
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80080b6:	2300      	movs	r3, #0
 80080b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	0c5b      	lsrs	r3, r3, #17
 80080c8:	f003 0303 	and.w	r3, r3, #3
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	b29b      	uxth	r3, r3
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3714      	adds	r7, #20
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
	...

080080fc <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	4608      	mov	r0, r1
 8008106:	4611      	mov	r1, r2
 8008108:	461a      	mov	r2, r3
 800810a:	4603      	mov	r3, r0
 800810c:	70fb      	strb	r3, [r7, #3]
 800810e:	460b      	mov	r3, r1
 8008110:	70bb      	strb	r3, [r7, #2]
 8008112:	4613      	mov	r3, r2
 8008114:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800811e:	78fb      	ldrb	r3, [r7, #3]
 8008120:	015a      	lsls	r2, r3, #5
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	4413      	add	r3, r2
 8008126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800812a:	461a      	mov	r2, r3
 800812c:	f04f 33ff 	mov.w	r3, #4294967295
 8008130:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008132:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008136:	2b03      	cmp	r3, #3
 8008138:	d87e      	bhi.n	8008238 <USB_HC_Init+0x13c>
 800813a:	a201      	add	r2, pc, #4	; (adr r2, 8008140 <USB_HC_Init+0x44>)
 800813c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008140:	08008151 	.word	0x08008151
 8008144:	080081fb 	.word	0x080081fb
 8008148:	08008151 	.word	0x08008151
 800814c:	080081bd 	.word	0x080081bd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008150:	78fb      	ldrb	r3, [r7, #3]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	4413      	add	r3, r2
 8008158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800815c:	461a      	mov	r2, r3
 800815e:	f240 439d 	movw	r3, #1181	; 0x49d
 8008162:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008164:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008168:	2b00      	cmp	r3, #0
 800816a:	da10      	bge.n	800818e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800816c:	78fb      	ldrb	r3, [r7, #3]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	4413      	add	r3, r2
 8008174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	78fa      	ldrb	r2, [r7, #3]
 800817c:	0151      	lsls	r1, r2, #5
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	440a      	add	r2, r1
 8008182:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800818a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800818c:	e057      	b.n	800823e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008196:	2b00      	cmp	r3, #0
 8008198:	d051      	beq.n	800823e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800819a:	78fb      	ldrb	r3, [r7, #3]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	78fa      	ldrb	r2, [r7, #3]
 80081aa:	0151      	lsls	r1, r2, #5
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	440a      	add	r2, r1
 80081b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80081b8:	60d3      	str	r3, [r2, #12]
      break;
 80081ba:	e040      	b.n	800823e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80081bc:	78fb      	ldrb	r3, [r7, #3]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081c8:	461a      	mov	r2, r3
 80081ca:	f240 639d 	movw	r3, #1693	; 0x69d
 80081ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80081d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	da34      	bge.n	8008242 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80081d8:	78fb      	ldrb	r3, [r7, #3]
 80081da:	015a      	lsls	r2, r3, #5
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	4413      	add	r3, r2
 80081e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	78fa      	ldrb	r2, [r7, #3]
 80081e8:	0151      	lsls	r1, r2, #5
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	440a      	add	r2, r1
 80081ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081f6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80081f8:	e023      	b.n	8008242 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80081fa:	78fb      	ldrb	r3, [r7, #3]
 80081fc:	015a      	lsls	r2, r3, #5
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	4413      	add	r3, r2
 8008202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008206:	461a      	mov	r2, r3
 8008208:	f240 2325 	movw	r3, #549	; 0x225
 800820c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800820e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008212:	2b00      	cmp	r3, #0
 8008214:	da17      	bge.n	8008246 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008216:	78fb      	ldrb	r3, [r7, #3]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	4413      	add	r3, r2
 800821e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	78fa      	ldrb	r2, [r7, #3]
 8008226:	0151      	lsls	r1, r2, #5
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	440a      	add	r2, r1
 800822c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008230:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008234:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008236:	e006      	b.n	8008246 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	75fb      	strb	r3, [r7, #23]
      break;
 800823c:	e004      	b.n	8008248 <USB_HC_Init+0x14c>
      break;
 800823e:	bf00      	nop
 8008240:	e002      	b.n	8008248 <USB_HC_Init+0x14c>
      break;
 8008242:	bf00      	nop
 8008244:	e000      	b.n	8008248 <USB_HC_Init+0x14c>
      break;
 8008246:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800824e:	699a      	ldr	r2, [r3, #24]
 8008250:	78fb      	ldrb	r3, [r7, #3]
 8008252:	f003 030f 	and.w	r3, r3, #15
 8008256:	2101      	movs	r1, #1
 8008258:	fa01 f303 	lsl.w	r3, r1, r3
 800825c:	68b9      	ldr	r1, [r7, #8]
 800825e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008262:	4313      	orrs	r3, r2
 8008264:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008272:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008276:	2b00      	cmp	r3, #0
 8008278:	da03      	bge.n	8008282 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800827a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800827e:	613b      	str	r3, [r7, #16]
 8008280:	e001      	b.n	8008286 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8008286:	f897 3020 	ldrb.w	r3, [r7, #32]
 800828a:	2b02      	cmp	r3, #2
 800828c:	d103      	bne.n	8008296 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800828e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	e001      	b.n	800829a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008296:	2300      	movs	r3, #0
 8008298:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800829a:	787b      	ldrb	r3, [r7, #1]
 800829c:	059b      	lsls	r3, r3, #22
 800829e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80082a2:	78bb      	ldrb	r3, [r7, #2]
 80082a4:	02db      	lsls	r3, r3, #11
 80082a6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80082aa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80082ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80082b0:	049b      	lsls	r3, r3, #18
 80082b2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80082b6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80082b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80082be:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80082c4:	78fb      	ldrb	r3, [r7, #3]
 80082c6:	0159      	lsls	r1, r3, #5
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	440b      	add	r3, r1
 80082cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082d0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80082d6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80082d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d10f      	bne.n	8008300 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	78fa      	ldrb	r2, [r7, #3]
 80082f0:	0151      	lsls	r1, r2, #5
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	440a      	add	r2, r1
 80082f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082fe:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008300:	7dfb      	ldrb	r3, [r7, #23]
}
 8008302:	4618      	mov	r0, r3
 8008304:	371c      	adds	r7, #28
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop

08008310 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b08c      	sub	sp, #48	; 0x30
 8008314:	af02      	add	r7, sp, #8
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	4613      	mov	r3, r2
 800831c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	785b      	ldrb	r3, [r3, #1]
 8008326:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008328:	f44f 7380 	mov.w	r3, #256	; 0x100
 800832c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008336:	2b00      	cmp	r3, #0
 8008338:	d028      	beq.n	800838c <USB_HC_StartXfer+0x7c>
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	791b      	ldrb	r3, [r3, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d124      	bne.n	800838c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8008342:	79fb      	ldrb	r3, [r7, #7]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10b      	bne.n	8008360 <USB_HC_StartXfer+0x50>
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	795b      	ldrb	r3, [r3, #5]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d107      	bne.n	8008360 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	785b      	ldrb	r3, [r3, #1]
 8008354:	4619      	mov	r1, r3
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f000 fa2e 	bl	80087b8 <USB_DoPing>
      return HAL_OK;
 800835c:	2300      	movs	r3, #0
 800835e:	e112      	b.n	8008586 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8008360:	79fb      	ldrb	r3, [r7, #7]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d112      	bne.n	800838c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	015a      	lsls	r2, r3, #5
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	4413      	add	r3, r2
 800836e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	69fa      	ldr	r2, [r7, #28]
 8008376:	0151      	lsls	r1, r2, #5
 8008378:	6a3a      	ldr	r2, [r7, #32]
 800837a:	440a      	add	r2, r1
 800837c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008380:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8008384:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	2200      	movs	r2, #0
 800838a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d018      	beq.n	80083c6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	8912      	ldrh	r2, [r2, #8]
 800839c:	4413      	add	r3, r2
 800839e:	3b01      	subs	r3, #1
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	8912      	ldrh	r2, [r2, #8]
 80083a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80083a8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80083aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80083ac:	8b7b      	ldrh	r3, [r7, #26]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d90b      	bls.n	80083ca <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80083b2:	8b7b      	ldrh	r3, [r7, #26]
 80083b4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80083b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	8912      	ldrh	r2, [r2, #8]
 80083bc:	fb02 f203 	mul.w	r2, r2, r3
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	611a      	str	r2, [r3, #16]
 80083c4:	e001      	b.n	80083ca <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80083c6:	2301      	movs	r3, #1
 80083c8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	78db      	ldrb	r3, [r3, #3]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d006      	beq.n	80083e0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80083d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	8912      	ldrh	r2, [r2, #8]
 80083d8:	fb02 f203 	mul.w	r2, r2, r3
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80083e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80083ea:	04d9      	lsls	r1, r3, #19
 80083ec:	4b68      	ldr	r3, [pc, #416]	; (8008590 <USB_HC_StartXfer+0x280>)
 80083ee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80083f0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	7a9b      	ldrb	r3, [r3, #10]
 80083f6:	075b      	lsls	r3, r3, #29
 80083f8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80083fc:	69f9      	ldr	r1, [r7, #28]
 80083fe:	0148      	lsls	r0, r1, #5
 8008400:	6a39      	ldr	r1, [r7, #32]
 8008402:	4401      	add	r1, r0
 8008404:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008408:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800840a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800840c:	79fb      	ldrb	r3, [r7, #7]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d009      	beq.n	8008426 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	68d9      	ldr	r1, [r3, #12]
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	015a      	lsls	r2, r3, #5
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	4413      	add	r3, r2
 800841e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008422:	460a      	mov	r2, r1
 8008424:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008426:	6a3b      	ldr	r3, [r7, #32]
 8008428:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b00      	cmp	r3, #0
 8008434:	bf0c      	ite	eq
 8008436:	2301      	moveq	r3, #1
 8008438:	2300      	movne	r3, #0
 800843a:	b2db      	uxtb	r3, r3
 800843c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	015a      	lsls	r2, r3, #5
 8008442:	6a3b      	ldr	r3, [r7, #32]
 8008444:	4413      	add	r3, r2
 8008446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	69fa      	ldr	r2, [r7, #28]
 800844e:	0151      	lsls	r1, r2, #5
 8008450:	6a3a      	ldr	r2, [r7, #32]
 8008452:	440a      	add	r2, r1
 8008454:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008458:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800845c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	015a      	lsls	r2, r3, #5
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	4413      	add	r3, r2
 8008466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	7e7b      	ldrb	r3, [r7, #25]
 800846e:	075b      	lsls	r3, r3, #29
 8008470:	69f9      	ldr	r1, [r7, #28]
 8008472:	0148      	lsls	r0, r1, #5
 8008474:	6a39      	ldr	r1, [r7, #32]
 8008476:	4401      	add	r1, r0
 8008478:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800847c:	4313      	orrs	r3, r2
 800847e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	015a      	lsls	r2, r3, #5
 8008484:	6a3b      	ldr	r3, [r7, #32]
 8008486:	4413      	add	r3, r2
 8008488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a41      	ldr	r2, [pc, #260]	; (8008594 <USB_HC_StartXfer+0x284>)
 8008490:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008492:	4b40      	ldr	r3, [pc, #256]	; (8008594 <USB_HC_StartXfer+0x284>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800849a:	4a3e      	ldr	r2, [pc, #248]	; (8008594 <USB_HC_StartXfer+0x284>)
 800849c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	78db      	ldrb	r3, [r3, #3]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d006      	beq.n	80084b4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80084a6:	4b3b      	ldr	r3, [pc, #236]	; (8008594 <USB_HC_StartXfer+0x284>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ae:	4a39      	ldr	r2, [pc, #228]	; (8008594 <USB_HC_StartXfer+0x284>)
 80084b0:	6013      	str	r3, [r2, #0]
 80084b2:	e005      	b.n	80084c0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80084b4:	4b37      	ldr	r3, [pc, #220]	; (8008594 <USB_HC_StartXfer+0x284>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084bc:	4a35      	ldr	r2, [pc, #212]	; (8008594 <USB_HC_StartXfer+0x284>)
 80084be:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80084c0:	4b34      	ldr	r3, [pc, #208]	; (8008594 <USB_HC_StartXfer+0x284>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084c8:	4a32      	ldr	r2, [pc, #200]	; (8008594 <USB_HC_StartXfer+0x284>)
 80084ca:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	015a      	lsls	r2, r3, #5
 80084d0:	6a3b      	ldr	r3, [r7, #32]
 80084d2:	4413      	add	r3, r2
 80084d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084d8:	461a      	mov	r2, r3
 80084da:	4b2e      	ldr	r3, [pc, #184]	; (8008594 <USB_HC_StartXfer+0x284>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80084e0:	79fb      	ldrb	r3, [r7, #7]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d14e      	bne.n	8008584 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	78db      	ldrb	r3, [r3, #3]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d14a      	bne.n	8008584 <USB_HC_StartXfer+0x274>
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d046      	beq.n	8008584 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	79db      	ldrb	r3, [r3, #7]
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d830      	bhi.n	8008560 <USB_HC_StartXfer+0x250>
 80084fe:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <USB_HC_StartXfer+0x1f4>)
 8008500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008504:	08008515 	.word	0x08008515
 8008508:	08008539 	.word	0x08008539
 800850c:	08008515 	.word	0x08008515
 8008510:	08008539 	.word	0x08008539
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	3303      	adds	r3, #3
 800851a:	089b      	lsrs	r3, r3, #2
 800851c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800851e:	8afa      	ldrh	r2, [r7, #22]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008524:	b29b      	uxth	r3, r3
 8008526:	429a      	cmp	r2, r3
 8008528:	d91c      	bls.n	8008564 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	f043 0220 	orr.w	r2, r3, #32
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	619a      	str	r2, [r3, #24]
          }
          break;
 8008536:	e015      	b.n	8008564 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	3303      	adds	r3, #3
 800853e:	089b      	lsrs	r3, r3, #2
 8008540:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008542:	8afa      	ldrh	r2, [r7, #22]
 8008544:	6a3b      	ldr	r3, [r7, #32]
 8008546:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	b29b      	uxth	r3, r3
 800854e:	429a      	cmp	r2, r3
 8008550:	d90a      	bls.n	8008568 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	619a      	str	r2, [r3, #24]
          }
          break;
 800855e:	e003      	b.n	8008568 <USB_HC_StartXfer+0x258>

        default:
          break;
 8008560:	bf00      	nop
 8008562:	e002      	b.n	800856a <USB_HC_StartXfer+0x25a>
          break;
 8008564:	bf00      	nop
 8008566:	e000      	b.n	800856a <USB_HC_StartXfer+0x25a>
          break;
 8008568:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	68d9      	ldr	r1, [r3, #12]
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	785a      	ldrb	r2, [r3, #1]
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	b298      	uxth	r0, r3
 8008578:	2300      	movs	r3, #0
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	4603      	mov	r3, r0
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f7ff fb8c 	bl	8007c9c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3728      	adds	r7, #40	; 0x28
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	1ff80000 	.word	0x1ff80000
 8008594:	240008bc 	.word	0x240008bc

08008598 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085aa:	695b      	ldr	r3, [r3, #20]
 80085ac:	b29b      	uxth	r3, r3
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b087      	sub	sp, #28
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	460b      	mov	r3, r1
 80085c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80085ca:	78fb      	ldrb	r3, [r7, #3]
 80085cc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80085ce:	2300      	movs	r3, #0
 80085d0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	015a      	lsls	r2, r3, #5
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	4413      	add	r3, r2
 80085da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	0c9b      	lsrs	r3, r3, #18
 80085e2:	f003 0303 	and.w	r3, r3, #3
 80085e6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d002      	beq.n	80085f4 <USB_HC_Halt+0x3a>
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	2b02      	cmp	r3, #2
 80085f2:	d16c      	bne.n	80086ce <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	0151      	lsls	r1, r2, #5
 8008606:	693a      	ldr	r2, [r7, #16]
 8008608:	440a      	add	r2, r1
 800860a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800860e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008612:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008618:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d143      	bne.n	80086a8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	015a      	lsls	r2, r3, #5
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	4413      	add	r3, r2
 8008628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	0151      	lsls	r1, r2, #5
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	440a      	add	r2, r1
 8008636:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800863a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800863e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	015a      	lsls	r2, r3, #5
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	4413      	add	r3, r2
 8008648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	0151      	lsls	r1, r2, #5
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	440a      	add	r2, r1
 8008656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800865a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800865e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	4413      	add	r3, r2
 8008668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	0151      	lsls	r1, r2, #5
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	440a      	add	r2, r1
 8008676:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800867a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800867e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	3301      	adds	r3, #1
 8008684:	617b      	str	r3, [r7, #20]
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800868c:	d81d      	bhi.n	80086ca <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	015a      	lsls	r2, r3, #5
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	4413      	add	r3, r2
 8008696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086a4:	d0ec      	beq.n	8008680 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80086a6:	e080      	b.n	80087aa <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	0151      	lsls	r1, r2, #5
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	440a      	add	r2, r1
 80086be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086c6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80086c8:	e06f      	b.n	80087aa <USB_HC_Halt+0x1f0>
          break;
 80086ca:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80086cc:	e06d      	b.n	80087aa <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	0151      	lsls	r1, r2, #5
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	440a      	add	r2, r1
 80086e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086ec:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d143      	bne.n	8008786 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	015a      	lsls	r2, r3, #5
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	4413      	add	r3, r2
 8008706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	0151      	lsls	r1, r2, #5
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	440a      	add	r2, r1
 8008714:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008718:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800871c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	015a      	lsls	r2, r3, #5
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	4413      	add	r3, r2
 8008726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	0151      	lsls	r1, r2, #5
 8008730:	693a      	ldr	r2, [r7, #16]
 8008732:	440a      	add	r2, r1
 8008734:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008738:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800873c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	015a      	lsls	r2, r3, #5
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	4413      	add	r3, r2
 8008746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	0151      	lsls	r1, r2, #5
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	440a      	add	r2, r1
 8008754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008758:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800875c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	3301      	adds	r3, #1
 8008762:	617b      	str	r3, [r7, #20]
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800876a:	d81d      	bhi.n	80087a8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	015a      	lsls	r2, r3, #5
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	4413      	add	r3, r2
 8008774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800877e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008782:	d0ec      	beq.n	800875e <USB_HC_Halt+0x1a4>
 8008784:	e011      	b.n	80087aa <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	015a      	lsls	r2, r3, #5
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	4413      	add	r3, r2
 800878e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	0151      	lsls	r1, r2, #5
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	440a      	add	r2, r1
 800879c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087a4:	6013      	str	r3, [r2, #0]
 80087a6:	e000      	b.n	80087aa <USB_HC_Halt+0x1f0>
          break;
 80087a8:	bf00      	nop
    }
  }

  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	371c      	adds	r7, #28
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80087c8:	78fb      	ldrb	r3, [r7, #3]
 80087ca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80087cc:	2301      	movs	r3, #1
 80087ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	04da      	lsls	r2, r3, #19
 80087d4:	4b15      	ldr	r3, [pc, #84]	; (800882c <USB_DoPing+0x74>)
 80087d6:	4013      	ands	r3, r2
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	0151      	lsls	r1, r2, #5
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	440a      	add	r2, r1
 80087e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087e8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	015a      	lsls	r2, r3, #5
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	4413      	add	r3, r2
 80087f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008800:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008808:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	015a      	lsls	r2, r3, #5
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	4413      	add	r3, r2
 8008812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008816:	461a      	mov	r2, r3
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	371c      	adds	r7, #28
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	1ff80000 	.word	0x1ff80000

08008830 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b086      	sub	sp, #24
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800883c:	2300      	movs	r3, #0
 800883e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7ff f9a8 	bl	8007b96 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008846:	2110      	movs	r1, #16
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f7ff f9df 	bl	8007c0c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7ff fa02 	bl	8007c58 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008854:	2300      	movs	r3, #0
 8008856:	613b      	str	r3, [r7, #16]
 8008858:	e01f      	b.n	800889a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	015a      	lsls	r2, r3, #5
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	4413      	add	r3, r2
 8008862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008870:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008878:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008880:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	4413      	add	r3, r2
 800888a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800888e:	461a      	mov	r2, r3
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	3301      	adds	r3, #1
 8008898:	613b      	str	r3, [r7, #16]
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	2b0f      	cmp	r3, #15
 800889e:	d9dc      	bls.n	800885a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80088a0:	2300      	movs	r3, #0
 80088a2:	613b      	str	r3, [r7, #16]
 80088a4:	e034      	b.n	8008910 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	015a      	lsls	r2, r3, #5
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	4413      	add	r3, r2
 80088ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088bc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088c4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088cc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	015a      	lsls	r2, r3, #5
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	4413      	add	r3, r2
 80088d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088da:	461a      	mov	r2, r3
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	3301      	adds	r3, #1
 80088e4:	617b      	str	r3, [r7, #20]
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088ec:	d80c      	bhi.n	8008908 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	015a      	lsls	r2, r3, #5
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	4413      	add	r3, r2
 80088f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008900:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008904:	d0ec      	beq.n	80088e0 <USB_StopHost+0xb0>
 8008906:	e000      	b.n	800890a <USB_StopHost+0xda>
        break;
 8008908:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	3301      	adds	r3, #1
 800890e:	613b      	str	r3, [r7, #16]
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	2b0f      	cmp	r3, #15
 8008914:	d9c7      	bls.n	80088a6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800891c:	461a      	mov	r2, r3
 800891e:	f04f 33ff 	mov.w	r3, #4294967295
 8008922:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f04f 32ff 	mov.w	r2, #4294967295
 800892a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7ff f921 	bl	8007b74 <USB_EnableGlobalInt>

  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008940:	4904      	ldr	r1, [pc, #16]	; (8008954 <MX_FATFS_Init+0x18>)
 8008942:	4805      	ldr	r0, [pc, #20]	; (8008958 <MX_FATFS_Init+0x1c>)
 8008944:	f005 f9ae 	bl	800dca4 <FATFS_LinkDriver>
 8008948:	4603      	mov	r3, r0
 800894a:	461a      	mov	r2, r3
 800894c:	4b03      	ldr	r3, [pc, #12]	; (800895c <MX_FATFS_Init+0x20>)
 800894e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008950:	bf00      	nop
 8008952:	bd80      	pop	{r7, pc}
 8008954:	24000b20 	.word	0x24000b20
 8008958:	08013de4 	.word	0x08013de4
 800895c:	24000f84 	.word	0x24000f84

08008960 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008960:	b480      	push	{r7}
 8008962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008964:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008966:	4618      	mov	r0, r3
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	4603      	mov	r3, r0
 8008978:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	4603      	mov	r3, r0
 8008990:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8008996:	79fb      	ldrb	r3, [r7, #7]
 8008998:	4619      	mov	r1, r3
 800899a:	4808      	ldr	r0, [pc, #32]	; (80089bc <USBH_status+0x34>)
 800899c:	f000 fe11 	bl	80095c2 <USBH_MSC_UnitIsReady>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d002      	beq.n	80089ac <USBH_status+0x24>
  {
    res = RES_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	73fb      	strb	r3, [r7, #15]
 80089aa:	e001      	b.n	80089b0 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	240011bc 	.word	0x240011bc

080089c0 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b094      	sub	sp, #80	; 0x50
 80089c4:	af02      	add	r7, sp, #8
 80089c6:	60b9      	str	r1, [r7, #8]
 80089c8:	607a      	str	r2, [r7, #4]
 80089ca:	603b      	str	r3, [r7, #0]
 80089cc:	4603      	mov	r3, r0
 80089ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80089d6:	7bf9      	ldrb	r1, [r7, #15]
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	4812      	ldr	r0, [pc, #72]	; (8008a2c <USBH_read+0x6c>)
 80089e2:	f000 fe38 	bl	8009656 <USBH_MSC_Read>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d103      	bne.n	80089f4 <USBH_read+0x34>
  {
    res = RES_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80089f2:	e015      	b.n	8008a20 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80089f4:	f107 0210 	add.w	r2, r7, #16
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
 80089fa:	4619      	mov	r1, r3
 80089fc:	480b      	ldr	r0, [pc, #44]	; (8008a2c <USBH_read+0x6c>)
 80089fe:	f000 fe06 	bl	800960e <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008a02:	7f7b      	ldrb	r3, [r7, #29]
 8008a04:	2b28      	cmp	r3, #40	; 0x28
 8008a06:	d003      	beq.n	8008a10 <USBH_read+0x50>
 8008a08:	2b3a      	cmp	r3, #58	; 0x3a
 8008a0a:	d001      	beq.n	8008a10 <USBH_read+0x50>
 8008a0c:	2b04      	cmp	r3, #4
 8008a0e:	d103      	bne.n	8008a18 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008a10:	2303      	movs	r3, #3
 8008a12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008a16:	e003      	b.n	8008a20 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008a1e:	bf00      	nop
    }
  }

  return res;
 8008a20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3748      	adds	r7, #72	; 0x48
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	240011bc 	.word	0x240011bc

08008a30 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b094      	sub	sp, #80	; 0x50
 8008a34:	af02      	add	r7, sp, #8
 8008a36:	60b9      	str	r1, [r7, #8]
 8008a38:	607a      	str	r2, [r7, #4]
 8008a3a:	603b      	str	r3, [r7, #0]
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8008a46:	7bf9      	ldrb	r1, [r7, #15]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	4817      	ldr	r0, [pc, #92]	; (8008ab0 <USBH_write+0x80>)
 8008a52:	f000 fe69 	bl	8009728 <USBH_MSC_Write>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d103      	bne.n	8008a64 <USBH_write+0x34>
  {
    res = RES_OK;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008a62:	e01f      	b.n	8008aa4 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008a64:	f107 0210 	add.w	r2, r7, #16
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	4810      	ldr	r0, [pc, #64]	; (8008ab0 <USBH_write+0x80>)
 8008a6e:	f000 fdce 	bl	800960e <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008a72:	7f7b      	ldrb	r3, [r7, #29]
 8008a74:	2b27      	cmp	r3, #39	; 0x27
 8008a76:	d009      	beq.n	8008a8c <USBH_write+0x5c>
 8008a78:	2b27      	cmp	r3, #39	; 0x27
 8008a7a:	dc02      	bgt.n	8008a82 <USBH_write+0x52>
 8008a7c:	2b04      	cmp	r3, #4
 8008a7e:	d009      	beq.n	8008a94 <USBH_write+0x64>
 8008a80:	e00c      	b.n	8008a9c <USBH_write+0x6c>
 8008a82:	2b28      	cmp	r3, #40	; 0x28
 8008a84:	d006      	beq.n	8008a94 <USBH_write+0x64>
 8008a86:	2b3a      	cmp	r3, #58	; 0x3a
 8008a88:	d004      	beq.n	8008a94 <USBH_write+0x64>
 8008a8a:	e007      	b.n	8008a9c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008a92:	e007      	b.n	8008aa4 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008a94:	2303      	movs	r3, #3
 8008a96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008a9a:	e003      	b.n	8008aa4 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008aa2:	bf00      	nop
    }
  }

  return res;
 8008aa4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3748      	adds	r7, #72	; 0x48
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	240011bc 	.word	0x240011bc

08008ab4 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b090      	sub	sp, #64	; 0x40
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	603a      	str	r2, [r7, #0]
 8008abe:	71fb      	strb	r3, [r7, #7]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008aca:	79bb      	ldrb	r3, [r7, #6]
 8008acc:	2b03      	cmp	r3, #3
 8008ace:	d852      	bhi.n	8008b76 <USBH_ioctl+0xc2>
 8008ad0:	a201      	add	r2, pc, #4	; (adr r2, 8008ad8 <USBH_ioctl+0x24>)
 8008ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad6:	bf00      	nop
 8008ad8:	08008ae9 	.word	0x08008ae9
 8008adc:	08008af1 	.word	0x08008af1
 8008ae0:	08008b1b 	.word	0x08008b1b
 8008ae4:	08008b47 	.word	0x08008b47
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008aee:	e045      	b.n	8008b7c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008af0:	f107 0208 	add.w	r2, r7, #8
 8008af4:	79fb      	ldrb	r3, [r7, #7]
 8008af6:	4619      	mov	r1, r3
 8008af8:	4823      	ldr	r0, [pc, #140]	; (8008b88 <USBH_ioctl+0xd4>)
 8008afa:	f000 fd88 	bl	800960e <USBH_MSC_GetLUNInfo>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d106      	bne.n	8008b12 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008b10:	e034      	b.n	8008b7c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008b18:	e030      	b.n	8008b7c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008b1a:	f107 0208 	add.w	r2, r7, #8
 8008b1e:	79fb      	ldrb	r3, [r7, #7]
 8008b20:	4619      	mov	r1, r3
 8008b22:	4819      	ldr	r0, [pc, #100]	; (8008b88 <USBH_ioctl+0xd4>)
 8008b24:	f000 fd73 	bl	800960e <USBH_MSC_GetLUNInfo>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d107      	bne.n	8008b3e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008b2e:	8a3b      	ldrh	r3, [r7, #16]
 8008b30:	461a      	mov	r2, r3
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008b3c:	e01e      	b.n	8008b7c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008b44:	e01a      	b.n	8008b7c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008b46:	f107 0208 	add.w	r2, r7, #8
 8008b4a:	79fb      	ldrb	r3, [r7, #7]
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	480e      	ldr	r0, [pc, #56]	; (8008b88 <USBH_ioctl+0xd4>)
 8008b50:	f000 fd5d 	bl	800960e <USBH_MSC_GetLUNInfo>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d109      	bne.n	8008b6e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008b5a:	8a3b      	ldrh	r3, [r7, #16]
 8008b5c:	0a5b      	lsrs	r3, r3, #9
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	461a      	mov	r2, r3
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008b6c:	e006      	b.n	8008b7c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008b74:	e002      	b.n	8008b7c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008b76:	2304      	movs	r3, #4
 8008b78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008b7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3740      	adds	r7, #64	; 0x40
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	240011bc 	.word	0x240011bc

08008b8c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008b8c:	b590      	push	{r4, r7, lr}
 8008b8e:	b089      	sub	sp, #36	; 0x24
 8008b90:	af04      	add	r7, sp, #16
 8008b92:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b9a:	7919      	ldrb	r1, [r3, #4]
 8008b9c:	2350      	movs	r3, #80	; 0x50
 8008b9e:	2206      	movs	r2, #6
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f001 fc4f 	bl	800a444 <USBH_FindInterface>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
 8008bac:	2bff      	cmp	r3, #255	; 0xff
 8008bae:	d002      	beq.n	8008bb6 <USBH_MSC_InterfaceInit+0x2a>
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d901      	bls.n	8008bba <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	e0ef      	b.n	8008d9a <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f001 fc24 	bl	800a40c <USBH_SelectInterface>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008bc8:	7bbb      	ldrb	r3, [r7, #14]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d001      	beq.n	8008bd2 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008bce:	2302      	movs	r3, #2
 8008bd0:	e0e3      	b.n	8008d9a <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008bd8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008bdc:	f007 f96c 	bl	800feb8 <malloc>
 8008be0:	4603      	mov	r3, r0
 8008be2:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bea:	69db      	ldr	r3, [r3, #28]
 8008bec:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	e0d0      	b.n	8008d9a <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008bf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	68b8      	ldr	r0, [r7, #8]
 8008c00:	f007 f975 	bl	800feee <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008c04:	7bfb      	ldrb	r3, [r7, #15]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	211a      	movs	r1, #26
 8008c0a:	fb01 f303 	mul.w	r3, r1, r3
 8008c0e:	4413      	add	r3, r2
 8008c10:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	b25b      	sxtb	r3, r3
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	da16      	bge.n	8008c4a <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	211a      	movs	r1, #26
 8008c22:	fb01 f303 	mul.w	r3, r1, r3
 8008c26:	4413      	add	r3, r2
 8008c28:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008c2c:	781a      	ldrb	r2, [r3, #0]
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	211a      	movs	r1, #26
 8008c38:	fb01 f303 	mul.w	r3, r1, r3
 8008c3c:	4413      	add	r3, r2
 8008c3e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008c42:	881a      	ldrh	r2, [r3, #0]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	815a      	strh	r2, [r3, #10]
 8008c48:	e015      	b.n	8008c76 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008c4a:	7bfb      	ldrb	r3, [r7, #15]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	211a      	movs	r1, #26
 8008c50:	fb01 f303 	mul.w	r3, r1, r3
 8008c54:	4413      	add	r3, r2
 8008c56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008c5a:	781a      	ldrb	r2, [r3, #0]
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	211a      	movs	r1, #26
 8008c66:	fb01 f303 	mul.w	r3, r1, r3
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008c70:	881a      	ldrh	r2, [r3, #0]
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	211a      	movs	r1, #26
 8008c7c:	fb01 f303 	mul.w	r3, r1, r3
 8008c80:	4413      	add	r3, r2
 8008c82:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	b25b      	sxtb	r3, r3
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	da16      	bge.n	8008cbc <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008c8e:	7bfb      	ldrb	r3, [r7, #15]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	211a      	movs	r1, #26
 8008c94:	fb01 f303 	mul.w	r3, r1, r3
 8008c98:	4413      	add	r3, r2
 8008c9a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c9e:	781a      	ldrb	r2, [r3, #0]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	211a      	movs	r1, #26
 8008caa:	fb01 f303 	mul.w	r3, r1, r3
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008cb4:	881a      	ldrh	r2, [r3, #0]
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	815a      	strh	r2, [r3, #10]
 8008cba:	e015      	b.n	8008ce8 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	211a      	movs	r1, #26
 8008cc2:	fb01 f303 	mul.w	r3, r1, r3
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008ccc:	781a      	ldrb	r2, [r3, #0]
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	211a      	movs	r1, #26
 8008cd8:	fb01 f303 	mul.w	r3, r1, r3
 8008cdc:	4413      	add	r3, r2
 8008cde:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008ce2:	881a      	ldrh	r2, [r3, #0]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	2200      	movs	r2, #0
 8008cec:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	799b      	ldrb	r3, [r3, #6]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f002 fdc2 	bl	800b88a <USBH_AllocPipe>
 8008d06:	4603      	mov	r3, r0
 8008d08:	461a      	mov	r2, r3
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	79db      	ldrb	r3, [r3, #7]
 8008d12:	4619      	mov	r1, r3
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f002 fdb8 	bl	800b88a <USBH_AllocPipe>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fda4 	bl	8009870 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	7959      	ldrb	r1, [r3, #5]
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	7998      	ldrb	r0, [r3, #6]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	8912      	ldrh	r2, [r2, #8]
 8008d40:	9202      	str	r2, [sp, #8]
 8008d42:	2202      	movs	r2, #2
 8008d44:	9201      	str	r2, [sp, #4]
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	4623      	mov	r3, r4
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f002 fd6d 	bl	800b82c <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	7919      	ldrb	r1, [r3, #4]
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	79d8      	ldrb	r0, [r3, #7]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	8952      	ldrh	r2, [r2, #10]
 8008d6a:	9202      	str	r2, [sp, #8]
 8008d6c:	2202      	movs	r2, #2
 8008d6e:	9201      	str	r2, [sp, #4]
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	4623      	mov	r3, r4
 8008d74:	4602      	mov	r2, r0
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f002 fd58 	bl	800b82c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	791b      	ldrb	r3, [r3, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f005 fac5 	bl	800e314 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	795b      	ldrb	r3, [r3, #5]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f005 fabe 	bl	800e314 <USBH_LL_SetToggle>

  return USBH_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3714      	adds	r7, #20
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd90      	pop	{r4, r7, pc}

08008da2 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b084      	sub	sp, #16
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008db0:	69db      	ldr	r3, [r3, #28]
 8008db2:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	795b      	ldrb	r3, [r3, #5]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00e      	beq.n	8008dda <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	795b      	ldrb	r3, [r3, #5]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f002 fd51 	bl	800b86a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	795b      	ldrb	r3, [r3, #5]
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f002 fd7c 	bl	800b8cc <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	791b      	ldrb	r3, [r3, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00e      	beq.n	8008e00 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	791b      	ldrb	r3, [r3, #4]
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f002 fd3e 	bl	800b86a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	791b      	ldrb	r3, [r3, #4]
 8008df2:	4619      	mov	r1, r3
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f002 fd69 	bl	800b8cc <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e06:	69db      	ldr	r3, [r3, #28]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00b      	beq.n	8008e24 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e12:	69db      	ldr	r3, [r3, #28]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f007 f857 	bl	800fec8 <free>
    phost->pActiveClass->pData = 0U;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e20:	2200      	movs	r2, #0
 8008e22:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b084      	sub	sp, #16
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e3c:	69db      	ldr	r3, [r3, #28]
 8008e3e:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e40:	2301      	movs	r3, #1
 8008e42:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	7b9b      	ldrb	r3, [r3, #14]
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d004      	beq.n	8008e56 <USBH_MSC_ClassRequest+0x28>
 8008e4c:	2b03      	cmp	r3, #3
 8008e4e:	d03e      	beq.n	8008ece <USBH_MSC_ClassRequest+0xa0>
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d000      	beq.n	8008e56 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8008e54:	e04a      	b.n	8008eec <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fcea 	bl	8009834 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008e60:	4603      	mov	r3, r0
 8008e62:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d104      	bne.n	8008e74 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8008e74:	7bfb      	ldrb	r3, [r7, #15]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d135      	bne.n	8008ee6 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d804      	bhi.n	8008e8c <USBH_MSC_ClassRequest+0x5e>
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	3301      	adds	r3, #1
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	e000      	b.n	8008e8e <USBH_MSC_ClassRequest+0x60>
 8008e8c:	2202      	movs	r2, #2
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008e92:	2300      	movs	r3, #0
 8008e94:	73bb      	strb	r3, [r7, #14]
 8008e96:	e014      	b.n	8008ec2 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008e98:	7bbb      	ldrb	r3, [r7, #14]
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	2134      	movs	r1, #52	; 0x34
 8008e9e:	fb01 f303 	mul.w	r3, r1, r3
 8008ea2:	4413      	add	r3, r2
 8008ea4:	3392      	adds	r3, #146	; 0x92
 8008ea6:	2202      	movs	r2, #2
 8008ea8:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008eaa:	7bbb      	ldrb	r3, [r7, #14]
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	2134      	movs	r1, #52	; 0x34
 8008eb0:	fb01 f303 	mul.w	r3, r1, r3
 8008eb4:	4413      	add	r3, r2
 8008eb6:	33c1      	adds	r3, #193	; 0xc1
 8008eb8:	2200      	movs	r2, #0
 8008eba:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008ebc:	7bbb      	ldrb	r3, [r7, #14]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	73bb      	strb	r3, [r7, #14]
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	7bba      	ldrb	r2, [r7, #14]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d3e5      	bcc.n	8008e98 <USBH_MSC_ClassRequest+0x6a>
      break;
 8008ecc:	e00b      	b.n	8008ee6 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008ece:	2100      	movs	r1, #0
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f002 f878 	bl	800afc6 <USBH_ClrFeature>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d106      	bne.n	8008eea <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	7bda      	ldrb	r2, [r3, #15]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	739a      	strb	r2, [r3, #14]
      break;
 8008ee4:	e001      	b.n	8008eea <USBH_MSC_ClassRequest+0xbc>
      break;
 8008ee6:	bf00      	nop
 8008ee8:	e000      	b.n	8008eec <USBH_MSC_ClassRequest+0xbe>
      break;
 8008eea:	bf00      	nop
  }

  return status;
 8008eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
	...

08008ef8 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008f12:	2301      	movs	r3, #1
 8008f14:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	7b1b      	ldrb	r3, [r3, #12]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <USBH_MSC_Process+0x2e>
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	f000 8271 	beq.w	8009406 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008f24:	e272      	b.n	800940c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	429a      	cmp	r2, r3
 8008f34:	f080 824f 	bcs.w	80093d6 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f3e:	4619      	mov	r1, r3
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	2334      	movs	r3, #52	; 0x34
 8008f44:	fb03 f301 	mul.w	r3, r3, r1
 8008f48:	4413      	add	r3, r2
 8008f4a:	3391      	adds	r3, #145	; 0x91
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f56:	4619      	mov	r1, r3
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	2334      	movs	r3, #52	; 0x34
 8008f5c:	fb03 f301 	mul.w	r3, r3, r1
 8008f60:	4413      	add	r3, r2
 8008f62:	3390      	adds	r3, #144	; 0x90
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	2b08      	cmp	r3, #8
 8008f68:	f200 8243 	bhi.w	80093f2 <USBH_MSC_Process+0x4fa>
 8008f6c:	a201      	add	r2, pc, #4	; (adr r2, 8008f74 <USBH_MSC_Process+0x7c>)
 8008f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f72:	bf00      	nop
 8008f74:	08008f99 	.word	0x08008f99
 8008f78:	080093f3 	.word	0x080093f3
 8008f7c:	08009061 	.word	0x08009061
 8008f80:	080091e5 	.word	0x080091e5
 8008f84:	08008fbf 	.word	0x08008fbf
 8008f88:	080092b1 	.word	0x080092b1
 8008f8c:	080093f3 	.word	0x080093f3
 8008f90:	080093f3 	.word	0x080093f3
 8008f94:	080093c5 	.word	0x080093c5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	693a      	ldr	r2, [r7, #16]
 8008fa2:	2334      	movs	r3, #52	; 0x34
 8008fa4:	fb03 f301 	mul.w	r3, r3, r1
 8008fa8:	4413      	add	r3, r2
 8008faa:	3390      	adds	r3, #144	; 0x90
 8008fac:	2204      	movs	r2, #4
 8008fae:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008fbc:	e222      	b.n	8009404 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fc4:	b2d9      	uxtb	r1, r3
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fcc:	461a      	mov	r2, r3
 8008fce:	2334      	movs	r3, #52	; 0x34
 8008fd0:	fb03 f302 	mul.w	r3, r3, r2
 8008fd4:	3398      	adds	r3, #152	; 0x98
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	4413      	add	r3, r2
 8008fda:	3307      	adds	r3, #7
 8008fdc:	461a      	mov	r2, r3
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 ff68 	bl	8009eb4 <USBH_MSC_SCSI_Inquiry>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10b      	bne.n	8009006 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	2334      	movs	r3, #52	; 0x34
 8008ffa:	fb03 f301 	mul.w	r3, r3, r1
 8008ffe:	4413      	add	r3, r2
 8009000:	3390      	adds	r3, #144	; 0x90
 8009002:	2202      	movs	r2, #2
 8009004:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009006:	7bfb      	ldrb	r3, [r7, #15]
 8009008:	2b02      	cmp	r3, #2
 800900a:	d10c      	bne.n	8009026 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009012:	4619      	mov	r1, r3
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	2334      	movs	r3, #52	; 0x34
 8009018:	fb03 f301 	mul.w	r3, r3, r1
 800901c:	4413      	add	r3, r2
 800901e:	3390      	adds	r3, #144	; 0x90
 8009020:	2205      	movs	r2, #5
 8009022:	701a      	strb	r2, [r3, #0]
            break;
 8009024:	e1e7      	b.n	80093f6 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009026:	7bfb      	ldrb	r3, [r7, #15]
 8009028:	2b04      	cmp	r3, #4
 800902a:	f040 81e4 	bne.w	80093f6 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009034:	4619      	mov	r1, r3
 8009036:	693a      	ldr	r2, [r7, #16]
 8009038:	2334      	movs	r3, #52	; 0x34
 800903a:	fb03 f301 	mul.w	r3, r3, r1
 800903e:	4413      	add	r3, r2
 8009040:	3390      	adds	r3, #144	; 0x90
 8009042:	2201      	movs	r2, #1
 8009044:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800904c:	4619      	mov	r1, r3
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	2334      	movs	r3, #52	; 0x34
 8009052:	fb03 f301 	mul.w	r3, r3, r1
 8009056:	4413      	add	r3, r2
 8009058:	3391      	adds	r3, #145	; 0x91
 800905a:	2202      	movs	r2, #2
 800905c:	701a      	strb	r2, [r3, #0]
            break;
 800905e:	e1ca      	b.n	80093f6 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009066:	b2db      	uxtb	r3, r3
 8009068:	4619      	mov	r1, r3
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fe64 	bl	8009d38 <USBH_MSC_SCSI_TestUnitReady>
 8009070:	4603      	mov	r3, r0
 8009072:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009074:	7bbb      	ldrb	r3, [r7, #14]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d149      	bne.n	800910e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009080:	4619      	mov	r1, r3
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	2334      	movs	r3, #52	; 0x34
 8009086:	fb03 f301 	mul.w	r3, r3, r1
 800908a:	4413      	add	r3, r2
 800908c:	3392      	adds	r3, #146	; 0x92
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00c      	beq.n	80090ae <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800909a:	4619      	mov	r1, r3
 800909c:	693a      	ldr	r2, [r7, #16]
 800909e:	2334      	movs	r3, #52	; 0x34
 80090a0:	fb03 f301 	mul.w	r3, r3, r1
 80090a4:	4413      	add	r3, r2
 80090a6:	33c1      	adds	r3, #193	; 0xc1
 80090a8:	2201      	movs	r2, #1
 80090aa:	701a      	strb	r2, [r3, #0]
 80090ac:	e00b      	b.n	80090c6 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090b4:	4619      	mov	r1, r3
 80090b6:	693a      	ldr	r2, [r7, #16]
 80090b8:	2334      	movs	r3, #52	; 0x34
 80090ba:	fb03 f301 	mul.w	r3, r3, r1
 80090be:	4413      	add	r3, r2
 80090c0:	33c1      	adds	r3, #193	; 0xc1
 80090c2:	2200      	movs	r2, #0
 80090c4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090cc:	4619      	mov	r1, r3
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	2334      	movs	r3, #52	; 0x34
 80090d2:	fb03 f301 	mul.w	r3, r3, r1
 80090d6:	4413      	add	r3, r2
 80090d8:	3390      	adds	r3, #144	; 0x90
 80090da:	2203      	movs	r2, #3
 80090dc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090e4:	4619      	mov	r1, r3
 80090e6:	693a      	ldr	r2, [r7, #16]
 80090e8:	2334      	movs	r3, #52	; 0x34
 80090ea:	fb03 f301 	mul.w	r3, r3, r1
 80090ee:	4413      	add	r3, r2
 80090f0:	3391      	adds	r3, #145	; 0x91
 80090f2:	2200      	movs	r2, #0
 80090f4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090fc:	4619      	mov	r1, r3
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	2334      	movs	r3, #52	; 0x34
 8009102:	fb03 f301 	mul.w	r3, r3, r1
 8009106:	4413      	add	r3, r2
 8009108:	3392      	adds	r3, #146	; 0x92
 800910a:	2200      	movs	r2, #0
 800910c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800910e:	7bbb      	ldrb	r3, [r7, #14]
 8009110:	2b02      	cmp	r3, #2
 8009112:	d14a      	bne.n	80091aa <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800911a:	4619      	mov	r1, r3
 800911c:	693a      	ldr	r2, [r7, #16]
 800911e:	2334      	movs	r3, #52	; 0x34
 8009120:	fb03 f301 	mul.w	r3, r3, r1
 8009124:	4413      	add	r3, r2
 8009126:	3392      	adds	r3, #146	; 0x92
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	2b02      	cmp	r3, #2
 800912c:	d00c      	beq.n	8009148 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009134:	4619      	mov	r1, r3
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	2334      	movs	r3, #52	; 0x34
 800913a:	fb03 f301 	mul.w	r3, r3, r1
 800913e:	4413      	add	r3, r2
 8009140:	33c1      	adds	r3, #193	; 0xc1
 8009142:	2201      	movs	r2, #1
 8009144:	701a      	strb	r2, [r3, #0]
 8009146:	e00b      	b.n	8009160 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800914e:	4619      	mov	r1, r3
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	2334      	movs	r3, #52	; 0x34
 8009154:	fb03 f301 	mul.w	r3, r3, r1
 8009158:	4413      	add	r3, r2
 800915a:	33c1      	adds	r3, #193	; 0xc1
 800915c:	2200      	movs	r2, #0
 800915e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009166:	4619      	mov	r1, r3
 8009168:	693a      	ldr	r2, [r7, #16]
 800916a:	2334      	movs	r3, #52	; 0x34
 800916c:	fb03 f301 	mul.w	r3, r3, r1
 8009170:	4413      	add	r3, r2
 8009172:	3390      	adds	r3, #144	; 0x90
 8009174:	2205      	movs	r2, #5
 8009176:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800917e:	4619      	mov	r1, r3
 8009180:	693a      	ldr	r2, [r7, #16]
 8009182:	2334      	movs	r3, #52	; 0x34
 8009184:	fb03 f301 	mul.w	r3, r3, r1
 8009188:	4413      	add	r3, r2
 800918a:	3391      	adds	r3, #145	; 0x91
 800918c:	2201      	movs	r2, #1
 800918e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009196:	4619      	mov	r1, r3
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	2334      	movs	r3, #52	; 0x34
 800919c:	fb03 f301 	mul.w	r3, r3, r1
 80091a0:	4413      	add	r3, r2
 80091a2:	3392      	adds	r3, #146	; 0x92
 80091a4:	2202      	movs	r2, #2
 80091a6:	701a      	strb	r2, [r3, #0]
            break;
 80091a8:	e127      	b.n	80093fa <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80091aa:	7bbb      	ldrb	r3, [r7, #14]
 80091ac:	2b04      	cmp	r3, #4
 80091ae:	f040 8124 	bne.w	80093fa <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091b8:	4619      	mov	r1, r3
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	2334      	movs	r3, #52	; 0x34
 80091be:	fb03 f301 	mul.w	r3, r3, r1
 80091c2:	4413      	add	r3, r2
 80091c4:	3390      	adds	r3, #144	; 0x90
 80091c6:	2201      	movs	r2, #1
 80091c8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091d0:	4619      	mov	r1, r3
 80091d2:	693a      	ldr	r2, [r7, #16]
 80091d4:	2334      	movs	r3, #52	; 0x34
 80091d6:	fb03 f301 	mul.w	r3, r3, r1
 80091da:	4413      	add	r3, r2
 80091dc:	3391      	adds	r3, #145	; 0x91
 80091de:	2202      	movs	r2, #2
 80091e0:	701a      	strb	r2, [r3, #0]
            break;
 80091e2:	e10a      	b.n	80093fa <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091ea:	b2d9      	uxtb	r1, r3
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091f2:	461a      	mov	r2, r3
 80091f4:	2334      	movs	r3, #52	; 0x34
 80091f6:	fb03 f302 	mul.w	r3, r3, r2
 80091fa:	3390      	adds	r3, #144	; 0x90
 80091fc:	693a      	ldr	r2, [r7, #16]
 80091fe:	4413      	add	r3, r2
 8009200:	3304      	adds	r3, #4
 8009202:	461a      	mov	r2, r3
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fdda 	bl	8009dbe <USBH_MSC_SCSI_ReadCapacity>
 800920a:	4603      	mov	r3, r0
 800920c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800920e:	7bfb      	ldrb	r3, [r7, #15]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d120      	bne.n	8009256 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800921a:	4619      	mov	r1, r3
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	2334      	movs	r3, #52	; 0x34
 8009220:	fb03 f301 	mul.w	r3, r3, r1
 8009224:	4413      	add	r3, r2
 8009226:	3390      	adds	r3, #144	; 0x90
 8009228:	2201      	movs	r2, #1
 800922a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009232:	4619      	mov	r1, r3
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	2334      	movs	r3, #52	; 0x34
 8009238:	fb03 f301 	mul.w	r3, r3, r1
 800923c:	4413      	add	r3, r2
 800923e:	3391      	adds	r3, #145	; 0x91
 8009240:	2200      	movs	r2, #0
 8009242:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800924a:	3301      	adds	r3, #1
 800924c:	b29a      	uxth	r2, r3
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009254:	e0d3      	b.n	80093fe <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8009256:	7bfb      	ldrb	r3, [r7, #15]
 8009258:	2b02      	cmp	r3, #2
 800925a:	d10c      	bne.n	8009276 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009262:	4619      	mov	r1, r3
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	2334      	movs	r3, #52	; 0x34
 8009268:	fb03 f301 	mul.w	r3, r3, r1
 800926c:	4413      	add	r3, r2
 800926e:	3390      	adds	r3, #144	; 0x90
 8009270:	2205      	movs	r2, #5
 8009272:	701a      	strb	r2, [r3, #0]
            break;
 8009274:	e0c3      	b.n	80093fe <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009276:	7bfb      	ldrb	r3, [r7, #15]
 8009278:	2b04      	cmp	r3, #4
 800927a:	f040 80c0 	bne.w	80093fe <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009284:	4619      	mov	r1, r3
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	2334      	movs	r3, #52	; 0x34
 800928a:	fb03 f301 	mul.w	r3, r3, r1
 800928e:	4413      	add	r3, r2
 8009290:	3390      	adds	r3, #144	; 0x90
 8009292:	2201      	movs	r2, #1
 8009294:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800929c:	4619      	mov	r1, r3
 800929e:	693a      	ldr	r2, [r7, #16]
 80092a0:	2334      	movs	r3, #52	; 0x34
 80092a2:	fb03 f301 	mul.w	r3, r3, r1
 80092a6:	4413      	add	r3, r2
 80092a8:	3391      	adds	r3, #145	; 0x91
 80092aa:	2202      	movs	r2, #2
 80092ac:	701a      	strb	r2, [r3, #0]
            break;
 80092ae:	e0a6      	b.n	80093fe <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092b6:	b2d9      	uxtb	r1, r3
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092be:	461a      	mov	r2, r3
 80092c0:	2334      	movs	r3, #52	; 0x34
 80092c2:	fb03 f302 	mul.w	r3, r3, r2
 80092c6:	3398      	adds	r3, #152	; 0x98
 80092c8:	693a      	ldr	r2, [r7, #16]
 80092ca:	4413      	add	r3, r2
 80092cc:	3304      	adds	r3, #4
 80092ce:	461a      	mov	r2, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 fe94 	bl	8009ffe <USBH_MSC_SCSI_RequestSense>
 80092d6:	4603      	mov	r3, r0
 80092d8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80092da:	7bfb      	ldrb	r3, [r7, #15]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d145      	bne.n	800936c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092e6:	4619      	mov	r1, r3
 80092e8:	693a      	ldr	r2, [r7, #16]
 80092ea:	2334      	movs	r3, #52	; 0x34
 80092ec:	fb03 f301 	mul.w	r3, r3, r1
 80092f0:	4413      	add	r3, r2
 80092f2:	339c      	adds	r3, #156	; 0x9c
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	2b06      	cmp	r3, #6
 80092f8:	d00c      	beq.n	8009314 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009300:	4619      	mov	r1, r3
 8009302:	693a      	ldr	r2, [r7, #16]
 8009304:	2334      	movs	r3, #52	; 0x34
 8009306:	fb03 f301 	mul.w	r3, r3, r1
 800930a:	4413      	add	r3, r2
 800930c:	339c      	adds	r3, #156	; 0x9c
 800930e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009310:	2b02      	cmp	r3, #2
 8009312:	d117      	bne.n	8009344 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	f242 720f 	movw	r2, #9999	; 0x270f
 8009326:	4293      	cmp	r3, r2
 8009328:	d80c      	bhi.n	8009344 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009330:	4619      	mov	r1, r3
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	2334      	movs	r3, #52	; 0x34
 8009336:	fb03 f301 	mul.w	r3, r3, r1
 800933a:	4413      	add	r3, r2
 800933c:	3390      	adds	r3, #144	; 0x90
 800933e:	2202      	movs	r2, #2
 8009340:	701a      	strb	r2, [r3, #0]
                  break;
 8009342:	e05f      	b.n	8009404 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800934a:	4619      	mov	r1, r3
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	2334      	movs	r3, #52	; 0x34
 8009350:	fb03 f301 	mul.w	r3, r3, r1
 8009354:	4413      	add	r3, r2
 8009356:	3390      	adds	r3, #144	; 0x90
 8009358:	2201      	movs	r2, #1
 800935a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009362:	3301      	adds	r3, #1
 8009364:	b29a      	uxth	r2, r3
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800936c:	7bfb      	ldrb	r3, [r7, #15]
 800936e:	2b02      	cmp	r3, #2
 8009370:	d10c      	bne.n	800938c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009378:	4619      	mov	r1, r3
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	2334      	movs	r3, #52	; 0x34
 800937e:	fb03 f301 	mul.w	r3, r3, r1
 8009382:	4413      	add	r3, r2
 8009384:	3390      	adds	r3, #144	; 0x90
 8009386:	2208      	movs	r2, #8
 8009388:	701a      	strb	r2, [r3, #0]
            break;
 800938a:	e03a      	b.n	8009402 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800938c:	7bfb      	ldrb	r3, [r7, #15]
 800938e:	2b04      	cmp	r3, #4
 8009390:	d137      	bne.n	8009402 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009398:	4619      	mov	r1, r3
 800939a:	693a      	ldr	r2, [r7, #16]
 800939c:	2334      	movs	r3, #52	; 0x34
 800939e:	fb03 f301 	mul.w	r3, r3, r1
 80093a2:	4413      	add	r3, r2
 80093a4:	3390      	adds	r3, #144	; 0x90
 80093a6:	2201      	movs	r2, #1
 80093a8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093b0:	4619      	mov	r1, r3
 80093b2:	693a      	ldr	r2, [r7, #16]
 80093b4:	2334      	movs	r3, #52	; 0x34
 80093b6:	fb03 f301 	mul.w	r3, r3, r1
 80093ba:	4413      	add	r3, r2
 80093bc:	3391      	adds	r3, #145	; 0x91
 80093be:	2202      	movs	r2, #2
 80093c0:	701a      	strb	r2, [r3, #0]
            break;
 80093c2:	e01e      	b.n	8009402 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093ca:	3301      	adds	r3, #1
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80093d4:	e016      	b.n	8009404 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	2200      	movs	r2, #0
 80093da:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	2201      	movs	r2, #1
 80093e2:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80093ea:	2102      	movs	r1, #2
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	4798      	blx	r3
      break;
 80093f0:	e00c      	b.n	800940c <USBH_MSC_Process+0x514>
            break;
 80093f2:	bf00      	nop
 80093f4:	e00a      	b.n	800940c <USBH_MSC_Process+0x514>
            break;
 80093f6:	bf00      	nop
 80093f8:	e008      	b.n	800940c <USBH_MSC_Process+0x514>
            break;
 80093fa:	bf00      	nop
 80093fc:	e006      	b.n	800940c <USBH_MSC_Process+0x514>
            break;
 80093fe:	bf00      	nop
 8009400:	e004      	b.n	800940c <USBH_MSC_Process+0x514>
            break;
 8009402:	bf00      	nop
      break;
 8009404:	e002      	b.n	800940c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	75fb      	strb	r3, [r7, #23]
      break;
 800940a:	bf00      	nop
  }
  return error;
 800940c:	7dfb      	ldrb	r3, [r7, #23]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3718      	adds	r7, #24
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop

08009418 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b088      	sub	sp, #32
 8009432:	af02      	add	r7, sp, #8
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	460b      	mov	r3, r1
 8009438:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009440:	69db      	ldr	r3, [r3, #28]
 8009442:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009444:	2301      	movs	r3, #1
 8009446:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8009448:	2301      	movs	r3, #1
 800944a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800944c:	78fb      	ldrb	r3, [r7, #3]
 800944e:	693a      	ldr	r2, [r7, #16]
 8009450:	2134      	movs	r1, #52	; 0x34
 8009452:	fb01 f303 	mul.w	r3, r1, r3
 8009456:	4413      	add	r3, r2
 8009458:	3390      	adds	r3, #144	; 0x90
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	2b06      	cmp	r3, #6
 800945e:	d004      	beq.n	800946a <USBH_MSC_RdWrProcess+0x3c>
 8009460:	2b07      	cmp	r3, #7
 8009462:	d037      	beq.n	80094d4 <USBH_MSC_RdWrProcess+0xa6>
 8009464:	2b05      	cmp	r3, #5
 8009466:	d06a      	beq.n	800953e <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 8009468:	e0a6      	b.n	80095b8 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800946a:	78f9      	ldrb	r1, [r7, #3]
 800946c:	2300      	movs	r3, #0
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	2300      	movs	r3, #0
 8009472:	2200      	movs	r2, #0
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fea6 	bl	800a1c6 <USBH_MSC_SCSI_Read>
 800947a:	4603      	mov	r3, r0
 800947c:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800947e:	7bfb      	ldrb	r3, [r7, #15]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10b      	bne.n	800949c <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009484:	78fb      	ldrb	r3, [r7, #3]
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	2134      	movs	r1, #52	; 0x34
 800948a:	fb01 f303 	mul.w	r3, r1, r3
 800948e:	4413      	add	r3, r2
 8009490:	3390      	adds	r3, #144	; 0x90
 8009492:	2201      	movs	r2, #1
 8009494:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009496:	2300      	movs	r3, #0
 8009498:	75fb      	strb	r3, [r7, #23]
      break;
 800949a:	e088      	b.n	80095ae <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 800949c:	7bfb      	ldrb	r3, [r7, #15]
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d109      	bne.n	80094b6 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80094a2:	78fb      	ldrb	r3, [r7, #3]
 80094a4:	693a      	ldr	r2, [r7, #16]
 80094a6:	2134      	movs	r1, #52	; 0x34
 80094a8:	fb01 f303 	mul.w	r3, r1, r3
 80094ac:	4413      	add	r3, r2
 80094ae:	3390      	adds	r3, #144	; 0x90
 80094b0:	2205      	movs	r2, #5
 80094b2:	701a      	strb	r2, [r3, #0]
      break;
 80094b4:	e07b      	b.n	80095ae <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
 80094b8:	2b04      	cmp	r3, #4
 80094ba:	d178      	bne.n	80095ae <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80094bc:	78fb      	ldrb	r3, [r7, #3]
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	2134      	movs	r1, #52	; 0x34
 80094c2:	fb01 f303 	mul.w	r3, r1, r3
 80094c6:	4413      	add	r3, r2
 80094c8:	3390      	adds	r3, #144	; 0x90
 80094ca:	2208      	movs	r2, #8
 80094cc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80094ce:	2302      	movs	r3, #2
 80094d0:	75fb      	strb	r3, [r7, #23]
      break;
 80094d2:	e06c      	b.n	80095ae <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80094d4:	78f9      	ldrb	r1, [r7, #3]
 80094d6:	2300      	movs	r3, #0
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	2300      	movs	r3, #0
 80094dc:	2200      	movs	r2, #0
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fe06 	bl	800a0f0 <USBH_MSC_SCSI_Write>
 80094e4:	4603      	mov	r3, r0
 80094e6:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80094e8:	7bfb      	ldrb	r3, [r7, #15]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10b      	bne.n	8009506 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80094ee:	78fb      	ldrb	r3, [r7, #3]
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	2134      	movs	r1, #52	; 0x34
 80094f4:	fb01 f303 	mul.w	r3, r1, r3
 80094f8:	4413      	add	r3, r2
 80094fa:	3390      	adds	r3, #144	; 0x90
 80094fc:	2201      	movs	r2, #1
 80094fe:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009500:	2300      	movs	r3, #0
 8009502:	75fb      	strb	r3, [r7, #23]
      break;
 8009504:	e055      	b.n	80095b2 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 8009506:	7bfb      	ldrb	r3, [r7, #15]
 8009508:	2b02      	cmp	r3, #2
 800950a:	d109      	bne.n	8009520 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800950c:	78fb      	ldrb	r3, [r7, #3]
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	2134      	movs	r1, #52	; 0x34
 8009512:	fb01 f303 	mul.w	r3, r1, r3
 8009516:	4413      	add	r3, r2
 8009518:	3390      	adds	r3, #144	; 0x90
 800951a:	2205      	movs	r2, #5
 800951c:	701a      	strb	r2, [r3, #0]
      break;
 800951e:	e048      	b.n	80095b2 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009520:	7bfb      	ldrb	r3, [r7, #15]
 8009522:	2b04      	cmp	r3, #4
 8009524:	d145      	bne.n	80095b2 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009526:	78fb      	ldrb	r3, [r7, #3]
 8009528:	693a      	ldr	r2, [r7, #16]
 800952a:	2134      	movs	r1, #52	; 0x34
 800952c:	fb01 f303 	mul.w	r3, r1, r3
 8009530:	4413      	add	r3, r2
 8009532:	3390      	adds	r3, #144	; 0x90
 8009534:	2208      	movs	r2, #8
 8009536:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009538:	2302      	movs	r3, #2
 800953a:	75fb      	strb	r3, [r7, #23]
      break;
 800953c:	e039      	b.n	80095b2 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800953e:	78fb      	ldrb	r3, [r7, #3]
 8009540:	2234      	movs	r2, #52	; 0x34
 8009542:	fb02 f303 	mul.w	r3, r2, r3
 8009546:	3398      	adds	r3, #152	; 0x98
 8009548:	693a      	ldr	r2, [r7, #16]
 800954a:	4413      	add	r3, r2
 800954c:	1d1a      	adds	r2, r3, #4
 800954e:	78fb      	ldrb	r3, [r7, #3]
 8009550:	4619      	mov	r1, r3
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 fd53 	bl	8009ffe <USBH_MSC_SCSI_RequestSense>
 8009558:	4603      	mov	r3, r0
 800955a:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800955c:	7bfb      	ldrb	r3, [r7, #15]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d113      	bne.n	800958a <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009562:	78fb      	ldrb	r3, [r7, #3]
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	2134      	movs	r1, #52	; 0x34
 8009568:	fb01 f303 	mul.w	r3, r1, r3
 800956c:	4413      	add	r3, r2
 800956e:	3390      	adds	r3, #144	; 0x90
 8009570:	2201      	movs	r2, #1
 8009572:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009574:	78fb      	ldrb	r3, [r7, #3]
 8009576:	693a      	ldr	r2, [r7, #16]
 8009578:	2134      	movs	r1, #52	; 0x34
 800957a:	fb01 f303 	mul.w	r3, r1, r3
 800957e:	4413      	add	r3, r2
 8009580:	3391      	adds	r3, #145	; 0x91
 8009582:	2202      	movs	r2, #2
 8009584:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8009586:	2302      	movs	r3, #2
 8009588:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800958a:	7bfb      	ldrb	r3, [r7, #15]
 800958c:	2b02      	cmp	r3, #2
 800958e:	d012      	beq.n	80095b6 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009590:	7bfb      	ldrb	r3, [r7, #15]
 8009592:	2b04      	cmp	r3, #4
 8009594:	d10f      	bne.n	80095b6 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009596:	78fb      	ldrb	r3, [r7, #3]
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	2134      	movs	r1, #52	; 0x34
 800959c:	fb01 f303 	mul.w	r3, r1, r3
 80095a0:	4413      	add	r3, r2
 80095a2:	3390      	adds	r3, #144	; 0x90
 80095a4:	2208      	movs	r2, #8
 80095a6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80095a8:	2302      	movs	r3, #2
 80095aa:	75fb      	strb	r3, [r7, #23]
      break;
 80095ac:	e003      	b.n	80095b6 <USBH_MSC_RdWrProcess+0x188>
      break;
 80095ae:	bf00      	nop
 80095b0:	e002      	b.n	80095b8 <USBH_MSC_RdWrProcess+0x18a>
      break;
 80095b2:	bf00      	nop
 80095b4:	e000      	b.n	80095b8 <USBH_MSC_RdWrProcess+0x18a>
      break;
 80095b6:	bf00      	nop

  }
  return error;
 80095b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3718      	adds	r7, #24
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80095c2:	b480      	push	{r7}
 80095c4:	b085      	sub	sp, #20
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	460b      	mov	r3, r1
 80095cc:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095d4:	69db      	ldr	r3, [r3, #28]
 80095d6:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	2b0b      	cmp	r3, #11
 80095e0:	d10c      	bne.n	80095fc <USBH_MSC_UnitIsReady+0x3a>
 80095e2:	78fb      	ldrb	r3, [r7, #3]
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	2134      	movs	r1, #52	; 0x34
 80095e8:	fb01 f303 	mul.w	r3, r1, r3
 80095ec:	4413      	add	r3, r2
 80095ee:	3391      	adds	r3, #145	; 0x91
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d102      	bne.n	80095fc <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80095f6:	2301      	movs	r3, #1
 80095f8:	73fb      	strb	r3, [r7, #15]
 80095fa:	e001      	b.n	8009600 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80095fc:	2300      	movs	r3, #0
 80095fe:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009600:	7bfb      	ldrb	r3, [r7, #15]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3714      	adds	r7, #20
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b086      	sub	sp, #24
 8009612:	af00      	add	r7, sp, #0
 8009614:	60f8      	str	r0, [r7, #12]
 8009616:	460b      	mov	r3, r1
 8009618:	607a      	str	r2, [r7, #4]
 800961a:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009622:	69db      	ldr	r3, [r3, #28]
 8009624:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	b2db      	uxtb	r3, r3
 800962c:	2b0b      	cmp	r3, #11
 800962e:	d10d      	bne.n	800964c <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009630:	7afb      	ldrb	r3, [r7, #11]
 8009632:	2234      	movs	r2, #52	; 0x34
 8009634:	fb02 f303 	mul.w	r3, r2, r3
 8009638:	3390      	adds	r3, #144	; 0x90
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	4413      	add	r3, r2
 800963e:	2234      	movs	r2, #52	; 0x34
 8009640:	4619      	mov	r1, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f006 fc48 	bl	800fed8 <memcpy>
    return USBH_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	e000      	b.n	800964e <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800964c:	2302      	movs	r3, #2
  }
}
 800964e:	4618      	mov	r0, r3
 8009650:	3718      	adds	r7, #24
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b088      	sub	sp, #32
 800965a:	af02      	add	r7, sp, #8
 800965c:	60f8      	str	r0, [r7, #12]
 800965e:	607a      	str	r2, [r7, #4]
 8009660:	603b      	str	r3, [r7, #0]
 8009662:	460b      	mov	r3, r1
 8009664:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800966c:	69db      	ldr	r3, [r3, #28]
 800966e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009676:	b2db      	uxtb	r3, r3
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00e      	beq.n	800969a <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009682:	2b0b      	cmp	r3, #11
 8009684:	d109      	bne.n	800969a <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009686:	7afb      	ldrb	r3, [r7, #11]
 8009688:	697a      	ldr	r2, [r7, #20]
 800968a:	2134      	movs	r1, #52	; 0x34
 800968c:	fb01 f303 	mul.w	r3, r1, r3
 8009690:	4413      	add	r3, r2
 8009692:	3390      	adds	r3, #144	; 0x90
 8009694:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009696:	2b01      	cmp	r3, #1
 8009698:	d001      	beq.n	800969e <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800969a:	2302      	movs	r3, #2
 800969c:	e040      	b.n	8009720 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	2206      	movs	r2, #6
 80096a2:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80096a4:	7afb      	ldrb	r3, [r7, #11]
 80096a6:	697a      	ldr	r2, [r7, #20]
 80096a8:	2134      	movs	r1, #52	; 0x34
 80096aa:	fb01 f303 	mul.w	r3, r1, r3
 80096ae:	4413      	add	r3, r2
 80096b0:	3390      	adds	r3, #144	; 0x90
 80096b2:	2206      	movs	r2, #6
 80096b4:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80096b6:	7afb      	ldrb	r3, [r7, #11]
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80096c0:	7af9      	ldrb	r1, [r7, #11]
 80096c2:	6a3b      	ldr	r3, [r7, #32]
 80096c4:	9300      	str	r3, [sp, #0]
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f000 fd7b 	bl	800a1c6 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80096d6:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80096d8:	e016      	b.n	8009708 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	1ad2      	subs	r2, r2, r3
 80096e4:	6a3b      	ldr	r3, [r7, #32]
 80096e6:	f242 7110 	movw	r1, #10000	; 0x2710
 80096ea:	fb01 f303 	mul.w	r3, r1, r3
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d805      	bhi.n	80096fe <USBH_MSC_Read+0xa8>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d104      	bne.n	8009708 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	2201      	movs	r2, #1
 8009702:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009704:	2302      	movs	r3, #2
 8009706:	e00b      	b.n	8009720 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009708:	7afb      	ldrb	r3, [r7, #11]
 800970a:	4619      	mov	r1, r3
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f7ff fe8e 	bl	800942e <USBH_MSC_RdWrProcess>
 8009712:	4603      	mov	r3, r0
 8009714:	2b01      	cmp	r3, #1
 8009716:	d0e0      	beq.n	80096da <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	2201      	movs	r2, #1
 800971c:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b088      	sub	sp, #32
 800972c:	af02      	add	r7, sp, #8
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	607a      	str	r2, [r7, #4]
 8009732:	603b      	str	r3, [r7, #0]
 8009734:	460b      	mov	r3, r1
 8009736:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800973e:	69db      	ldr	r3, [r3, #28]
 8009740:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00e      	beq.n	800976c <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009754:	2b0b      	cmp	r3, #11
 8009756:	d109      	bne.n	800976c <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009758:	7afb      	ldrb	r3, [r7, #11]
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	2134      	movs	r1, #52	; 0x34
 800975e:	fb01 f303 	mul.w	r3, r1, r3
 8009762:	4413      	add	r3, r2
 8009764:	3390      	adds	r3, #144	; 0x90
 8009766:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009768:	2b01      	cmp	r3, #1
 800976a:	d001      	beq.n	8009770 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800976c:	2302      	movs	r3, #2
 800976e:	e040      	b.n	80097f2 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	2207      	movs	r2, #7
 8009774:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009776:	7afb      	ldrb	r3, [r7, #11]
 8009778:	697a      	ldr	r2, [r7, #20]
 800977a:	2134      	movs	r1, #52	; 0x34
 800977c:	fb01 f303 	mul.w	r3, r1, r3
 8009780:	4413      	add	r3, r2
 8009782:	3390      	adds	r3, #144	; 0x90
 8009784:	2207      	movs	r2, #7
 8009786:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009788:	7afb      	ldrb	r3, [r7, #11]
 800978a:	b29a      	uxth	r2, r3
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009792:	7af9      	ldrb	r1, [r7, #11]
 8009794:	6a3b      	ldr	r3, [r7, #32]
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f000 fca7 	bl	800a0f0 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80097a8:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80097aa:	e016      	b.n	80097da <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	1ad2      	subs	r2, r2, r3
 80097b6:	6a3b      	ldr	r3, [r7, #32]
 80097b8:	f242 7110 	movw	r1, #10000	; 0x2710
 80097bc:	fb01 f303 	mul.w	r3, r1, r3
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d805      	bhi.n	80097d0 <USBH_MSC_Write+0xa8>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d104      	bne.n	80097da <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	2201      	movs	r2, #1
 80097d4:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80097d6:	2302      	movs	r3, #2
 80097d8:	e00b      	b.n	80097f2 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80097da:	7afb      	ldrb	r3, [r7, #11]
 80097dc:	4619      	mov	r1, r3
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f7ff fe25 	bl	800942e <USBH_MSC_RdWrProcess>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d0e0      	beq.n	80097ac <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	2201      	movs	r2, #1
 80097ee:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3718      	adds	r7, #24
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b082      	sub	sp, #8
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2221      	movs	r2, #33	; 0x21
 8009806:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	22ff      	movs	r2, #255	; 0xff
 800980c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8009820:	2200      	movs	r2, #0
 8009822:	2100      	movs	r1, #0
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f001 fdae 	bl	800b386 <USBH_CtlReq>
 800982a:	4603      	mov	r3, r0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	22a1      	movs	r2, #161	; 0xa1
 8009842:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	22fe      	movs	r2, #254	; 0xfe
 8009848:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2201      	movs	r2, #1
 800985a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800985c:	2201      	movs	r2, #1
 800985e:	6839      	ldr	r1, [r7, #0]
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f001 fd90 	bl	800b386 <USBH_CtlReq>
 8009866:	4603      	mov	r3, r0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3708      	adds	r7, #8
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800987e:	69db      	ldr	r3, [r3, #28]
 8009880:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	4a09      	ldr	r2, [pc, #36]	; (80098ac <USBH_MSC_BOT_Init+0x3c>)
 8009886:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	4a09      	ldr	r2, [pc, #36]	; (80098b0 <USBH_MSC_BOT_Init+0x40>)
 800988c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3714      	adds	r7, #20
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	43425355 	.word	0x43425355
 80098b0:	20304050 	.word	0x20304050

080098b4 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b088      	sub	sp, #32
 80098b8:	af02      	add	r7, sp, #8
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	460b      	mov	r3, r1
 80098be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80098c0:	2301      	movs	r3, #1
 80098c2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80098c4:	2301      	movs	r3, #1
 80098c6:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80098c8:	2301      	movs	r3, #1
 80098ca:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80098cc:	2300      	movs	r3, #0
 80098ce:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098d6:	69db      	ldr	r3, [r3, #28]
 80098d8:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80098da:	2300      	movs	r3, #0
 80098dc:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80098e4:	3b01      	subs	r3, #1
 80098e6:	2b0a      	cmp	r3, #10
 80098e8:	f200 81a1 	bhi.w	8009c2e <USBH_MSC_BOT_Process+0x37a>
 80098ec:	a201      	add	r2, pc, #4	; (adr r2, 80098f4 <USBH_MSC_BOT_Process+0x40>)
 80098ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f2:	bf00      	nop
 80098f4:	08009921 	.word	0x08009921
 80098f8:	0800994b 	.word	0x0800994b
 80098fc:	080099b5 	.word	0x080099b5
 8009900:	080099d3 	.word	0x080099d3
 8009904:	08009a57 	.word	0x08009a57
 8009908:	08009a7b 	.word	0x08009a7b
 800990c:	08009b15 	.word	0x08009b15
 8009910:	08009b31 	.word	0x08009b31
 8009914:	08009b83 	.word	0x08009b83
 8009918:	08009bb3 	.word	0x08009bb3
 800991c:	08009c15 	.word	0x08009c15
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	78fa      	ldrb	r2, [r7, #3]
 8009924:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	2202      	movs	r2, #2
 800992c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	795a      	ldrb	r2, [r3, #5]
 800993a:	2301      	movs	r3, #1
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	4613      	mov	r3, r2
 8009940:	221f      	movs	r2, #31
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f001 ff2f 	bl	800b7a6 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009948:	e180      	b.n	8009c4c <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	795b      	ldrb	r3, [r3, #5]
 800994e:	4619      	mov	r1, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f004 fcb5 	bl	800e2c0 <USBH_LL_GetURBState>
 8009956:	4603      	mov	r3, r0
 8009958:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800995a:	7d3b      	ldrb	r3, [r7, #20]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d118      	bne.n	8009992 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00f      	beq.n	8009988 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800996e:	b25b      	sxtb	r3, r3
 8009970:	2b00      	cmp	r3, #0
 8009972:	da04      	bge.n	800997e <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	2203      	movs	r2, #3
 8009978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800997c:	e159      	b.n	8009c32 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	2205      	movs	r2, #5
 8009982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009986:	e154      	b.n	8009c32 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	2207      	movs	r2, #7
 800998c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009990:	e14f      	b.n	8009c32 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009992:	7d3b      	ldrb	r3, [r7, #20]
 8009994:	2b02      	cmp	r3, #2
 8009996:	d104      	bne.n	80099a2 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80099a0:	e147      	b.n	8009c32 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 80099a2:	7d3b      	ldrb	r3, [r7, #20]
 80099a4:	2b05      	cmp	r3, #5
 80099a6:	f040 8144 	bne.w	8009c32 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	220a      	movs	r2, #10
 80099ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80099b2:	e13e      	b.n	8009c32 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	895a      	ldrh	r2, [r3, #10]
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	791b      	ldrb	r3, [r3, #4]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f001 ff14 	bl	800b7f0 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	2204      	movs	r2, #4
 80099cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80099d0:	e13c      	b.n	8009c4c <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	791b      	ldrb	r3, [r3, #4]
 80099d6:	4619      	mov	r1, r3
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f004 fc71 	bl	800e2c0 <USBH_LL_GetURBState>
 80099de:	4603      	mov	r3, r0
 80099e0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80099e2:	7d3b      	ldrb	r3, [r7, #20]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d12d      	bne.n	8009a44 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099ec:	693a      	ldr	r2, [r7, #16]
 80099ee:	8952      	ldrh	r2, [r2, #10]
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d910      	bls.n	8009a16 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099fa:	693a      	ldr	r2, [r7, #16]
 80099fc:	8952      	ldrh	r2, [r2, #10]
 80099fe:	441a      	add	r2, r3
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	8952      	ldrh	r2, [r2, #10]
 8009a0e:	1a9a      	subs	r2, r3, r2
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a14:	e002      	b.n	8009a1c <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00a      	beq.n	8009a3a <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	895a      	ldrh	r2, [r3, #10]
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	791b      	ldrb	r3, [r3, #4]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f001 fedc 	bl	800b7f0 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009a38:	e0fd      	b.n	8009c36 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	2207      	movs	r2, #7
 8009a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a42:	e0f8      	b.n	8009c36 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8009a44:	7d3b      	ldrb	r3, [r7, #20]
 8009a46:	2b05      	cmp	r3, #5
 8009a48:	f040 80f5 	bne.w	8009c36 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	2209      	movs	r2, #9
 8009a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a54:	e0ef      	b.n	8009c36 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	891a      	ldrh	r2, [r3, #8]
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	7958      	ldrb	r0, [r3, #5]
 8009a64:	2301      	movs	r3, #1
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	4603      	mov	r3, r0
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f001 fe9b 	bl	800b7a6 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	2206      	movs	r2, #6
 8009a74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a78:	e0e8      	b.n	8009c4c <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	795b      	ldrb	r3, [r3, #5]
 8009a7e:	4619      	mov	r1, r3
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f004 fc1d 	bl	800e2c0 <USBH_LL_GetURBState>
 8009a86:	4603      	mov	r3, r0
 8009a88:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009a8a:	7d3b      	ldrb	r3, [r7, #20]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d130      	bne.n	8009af2 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a94:	693a      	ldr	r2, [r7, #16]
 8009a96:	8912      	ldrh	r2, [r2, #8]
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d910      	bls.n	8009abe <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	8912      	ldrh	r2, [r2, #8]
 8009aa6:	441a      	add	r2, r3
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	8912      	ldrh	r2, [r2, #8]
 8009ab6:	1a9a      	subs	r2, r3, r2
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	65da      	str	r2, [r3, #92]	; 0x5c
 8009abc:	e002      	b.n	8009ac4 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00d      	beq.n	8009ae8 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	891a      	ldrh	r2, [r3, #8]
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	7958      	ldrb	r0, [r3, #5]
 8009ada:	2301      	movs	r3, #1
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	4603      	mov	r3, r0
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f001 fe60 	bl	800b7a6 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009ae6:	e0a8      	b.n	8009c3a <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	2207      	movs	r2, #7
 8009aec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009af0:	e0a3      	b.n	8009c3a <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009af2:	7d3b      	ldrb	r3, [r7, #20]
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	d104      	bne.n	8009b02 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	2205      	movs	r2, #5
 8009afc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b00:	e09b      	b.n	8009c3a <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8009b02:	7d3b      	ldrb	r3, [r7, #20]
 8009b04:	2b05      	cmp	r3, #5
 8009b06:	f040 8098 	bne.w	8009c3a <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	220a      	movs	r2, #10
 8009b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b12:	e092      	b.n	8009c3a <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	791b      	ldrb	r3, [r3, #4]
 8009b1e:	220d      	movs	r2, #13
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f001 fe65 	bl	800b7f0 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	2208      	movs	r2, #8
 8009b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b2e:	e08d      	b.n	8009c4c <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	791b      	ldrb	r3, [r3, #4]
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f004 fbc2 	bl	800e2c0 <USBH_LL_GetURBState>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009b40:	7d3b      	ldrb	r3, [r7, #20]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d115      	bne.n	8009b72 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f8aa 	bl	8009cb0 <USBH_MSC_DecodeCSW>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009b60:	7d7b      	ldrb	r3, [r7, #21]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d102      	bne.n	8009b6c <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8009b66:	2300      	movs	r3, #0
 8009b68:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009b6a:	e068      	b.n	8009c3e <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b70:	e065      	b.n	8009c3e <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8009b72:	7d3b      	ldrb	r3, [r7, #20]
 8009b74:	2b05      	cmp	r3, #5
 8009b76:	d162      	bne.n	8009c3e <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	2209      	movs	r2, #9
 8009b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b80:	e05d      	b.n	8009c3e <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009b82:	78fb      	ldrb	r3, [r7, #3]
 8009b84:	2200      	movs	r2, #0
 8009b86:	4619      	mov	r1, r3
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 f865 	bl	8009c58 <USBH_MSC_BOT_Abort>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009b92:	7dbb      	ldrb	r3, [r7, #22]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d104      	bne.n	8009ba2 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	2207      	movs	r2, #7
 8009b9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009ba0:	e04f      	b.n	8009c42 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009ba2:	7dbb      	ldrb	r3, [r7, #22]
 8009ba4:	2b04      	cmp	r3, #4
 8009ba6:	d14c      	bne.n	8009c42 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	220b      	movs	r2, #11
 8009bac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009bb0:	e047      	b.n	8009c42 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009bb2:	78fb      	ldrb	r3, [r7, #3]
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 f84d 	bl	8009c58 <USBH_MSC_BOT_Abort>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009bc2:	7dbb      	ldrb	r3, [r7, #22]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d11d      	bne.n	8009c04 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	795b      	ldrb	r3, [r3, #5]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f004 fbd3 	bl	800e37a <USBH_LL_GetToggle>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	7959      	ldrb	r1, [r3, #5]
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
 8009bde:	f1c3 0301 	rsb	r3, r3, #1
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	461a      	mov	r2, r3
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f004 fb94 	bl	800e314 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	791b      	ldrb	r3, [r3, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f004 fb8d 	bl	800e314 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	2209      	movs	r2, #9
 8009bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009c02:	e020      	b.n	8009c46 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8009c04:	7dbb      	ldrb	r3, [r7, #22]
 8009c06:	2b04      	cmp	r3, #4
 8009c08:	d11d      	bne.n	8009c46 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	220b      	movs	r2, #11
 8009c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c12:	e018      	b.n	8009c46 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f7ff fdf0 	bl	80097fa <USBH_MSC_BOT_REQ_Reset>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d112      	bne.n	8009c4a <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	2201      	movs	r2, #1
 8009c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009c2c:	e00d      	b.n	8009c4a <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8009c2e:	bf00      	nop
 8009c30:	e00c      	b.n	8009c4c <USBH_MSC_BOT_Process+0x398>
      break;
 8009c32:	bf00      	nop
 8009c34:	e00a      	b.n	8009c4c <USBH_MSC_BOT_Process+0x398>
      break;
 8009c36:	bf00      	nop
 8009c38:	e008      	b.n	8009c4c <USBH_MSC_BOT_Process+0x398>
      break;
 8009c3a:	bf00      	nop
 8009c3c:	e006      	b.n	8009c4c <USBH_MSC_BOT_Process+0x398>
      break;
 8009c3e:	bf00      	nop
 8009c40:	e004      	b.n	8009c4c <USBH_MSC_BOT_Process+0x398>
      break;
 8009c42:	bf00      	nop
 8009c44:	e002      	b.n	8009c4c <USBH_MSC_BOT_Process+0x398>
      break;
 8009c46:	bf00      	nop
 8009c48:	e000      	b.n	8009c4c <USBH_MSC_BOT_Process+0x398>
      break;
 8009c4a:	bf00      	nop
  }
  return status;
 8009c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3718      	adds	r7, #24
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop

08009c58 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	460b      	mov	r3, r1
 8009c62:	70fb      	strb	r3, [r7, #3]
 8009c64:	4613      	mov	r3, r2
 8009c66:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009c68:	2302      	movs	r3, #2
 8009c6a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c72:	69db      	ldr	r3, [r3, #28]
 8009c74:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009c76:	78bb      	ldrb	r3, [r7, #2]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d002      	beq.n	8009c82 <USBH_MSC_BOT_Abort+0x2a>
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d009      	beq.n	8009c94 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009c80:	e011      	b.n	8009ca6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	79db      	ldrb	r3, [r3, #7]
 8009c86:	4619      	mov	r1, r3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f001 f99c 	bl	800afc6 <USBH_ClrFeature>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	73fb      	strb	r3, [r7, #15]
      break;
 8009c92:	e008      	b.n	8009ca6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	799b      	ldrb	r3, [r3, #6]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f001 f993 	bl	800afc6 <USBH_ClrFeature>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ca4:	bf00      	nop
  }
  return status;
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cbe:	69db      	ldr	r3, [r3, #28]
 8009cc0:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	791b      	ldrb	r3, [r3, #4]
 8009cca:	4619      	mov	r1, r3
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f004 fa65 	bl	800e19c <USBH_LL_GetLastXferSize>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b0d      	cmp	r3, #13
 8009cd6:	d002      	beq.n	8009cde <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009cd8:	2302      	movs	r3, #2
 8009cda:	73fb      	strb	r3, [r7, #15]
 8009cdc:	e024      	b.n	8009d28 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ce2:	4a14      	ldr	r2, [pc, #80]	; (8009d34 <USBH_MSC_DecodeCSW+0x84>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d11d      	bne.n	8009d24 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d119      	bne.n	8009d28 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d102      	bne.n	8009d04 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	73fb      	strb	r3, [r7, #15]
 8009d02:	e011      	b.n	8009d28 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d102      	bne.n	8009d14 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	73fb      	strb	r3, [r7, #15]
 8009d12:	e009      	b.n	8009d28 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	d104      	bne.n	8009d28 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009d1e:	2302      	movs	r3, #2
 8009d20:	73fb      	strb	r3, [r7, #15]
 8009d22:	e001      	b.n	8009d28 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009d24:	2302      	movs	r3, #2
 8009d26:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	53425355 	.word	0x53425355

08009d38 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	460b      	mov	r3, r1
 8009d42:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009d44:	2302      	movs	r3, #2
 8009d46:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d4e:	69db      	ldr	r3, [r3, #28]
 8009d50:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d002      	beq.n	8009d62 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d021      	beq.n	8009da4 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009d60:	e028      	b.n	8009db4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	2200      	movs	r2, #0
 8009d66:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	220a      	movs	r2, #10
 8009d74:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	3363      	adds	r3, #99	; 0x63
 8009d7c:	2210      	movs	r2, #16
 8009d7e:	2100      	movs	r1, #0
 8009d80:	4618      	mov	r0, r3
 8009d82:	f006 f8b4 	bl	800feee <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	2201      	movs	r2, #1
 8009d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	2202      	movs	r2, #2
 8009d9a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	73fb      	strb	r3, [r7, #15]
      break;
 8009da2:	e007      	b.n	8009db4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009da4:	78fb      	ldrb	r3, [r7, #3]
 8009da6:	4619      	mov	r1, r3
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f7ff fd83 	bl	80098b4 <USBH_MSC_BOT_Process>
 8009dae:	4603      	mov	r3, r0
 8009db0:	73fb      	strb	r3, [r7, #15]
      break;
 8009db2:	bf00      	nop
  }

  return error;
 8009db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b086      	sub	sp, #24
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	60f8      	str	r0, [r7, #12]
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	607a      	str	r2, [r7, #4]
 8009dca:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dd6:	69db      	ldr	r3, [r3, #28]
 8009dd8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d002      	beq.n	8009dea <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d027      	beq.n	8009e38 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009de8:	e05f      	b.n	8009eaa <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	2208      	movs	r2, #8
 8009dee:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	2280      	movs	r2, #128	; 0x80
 8009df4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	220a      	movs	r2, #10
 8009dfc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	3363      	adds	r3, #99	; 0x63
 8009e04:	2210      	movs	r2, #16
 8009e06:	2100      	movs	r1, #0
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f006 f870 	bl	800feee <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	2225      	movs	r2, #37	; 0x25
 8009e12:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	2202      	movs	r2, #2
 8009e22:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	f103 0210 	add.w	r2, r3, #16
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009e32:	2301      	movs	r3, #1
 8009e34:	75fb      	strb	r3, [r7, #23]
      break;
 8009e36:	e038      	b.n	8009eaa <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009e38:	7afb      	ldrb	r3, [r7, #11]
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f7ff fd39 	bl	80098b4 <USBH_MSC_BOT_Process>
 8009e42:	4603      	mov	r3, r0
 8009e44:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009e46:	7dfb      	ldrb	r3, [r7, #23]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d12d      	bne.n	8009ea8 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e52:	3303      	adds	r3, #3
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	461a      	mov	r2, r3
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e5e:	3302      	adds	r3, #2
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	021b      	lsls	r3, r3, #8
 8009e64:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009e72:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	061b      	lsls	r3, r3, #24
 8009e7e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e8a:	3307      	adds	r3, #7
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e96:	3306      	adds	r3, #6
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	021b      	lsls	r3, r3, #8
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	809a      	strh	r2, [r3, #4]
      break;
 8009ea8:	bf00      	nop
  }

  return error;
 8009eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3718      	adds	r7, #24
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b086      	sub	sp, #24
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	607a      	str	r2, [r7, #4]
 8009ec0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ecc:	69db      	ldr	r3, [r3, #28]
 8009ece:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d002      	beq.n	8009ee0 <USBH_MSC_SCSI_Inquiry+0x2c>
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	d03d      	beq.n	8009f5a <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009ede:	e089      	b.n	8009ff4 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	2224      	movs	r2, #36	; 0x24
 8009ee4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	2280      	movs	r2, #128	; 0x80
 8009eea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	220a      	movs	r2, #10
 8009ef2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	3363      	adds	r3, #99	; 0x63
 8009efa:	220a      	movs	r2, #10
 8009efc:	2100      	movs	r1, #0
 8009efe:	4618      	mov	r0, r3
 8009f00:	f005 fff5 	bl	800feee <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	2212      	movs	r2, #18
 8009f08:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009f0c:	7afb      	ldrb	r3, [r7, #11]
 8009f0e:	015b      	lsls	r3, r3, #5
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	2224      	movs	r2, #36	; 0x24
 8009f2c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	2202      	movs	r2, #2
 8009f44:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	f103 0210 	add.w	r2, r3, #16
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009f54:	2301      	movs	r3, #1
 8009f56:	75fb      	strb	r3, [r7, #23]
      break;
 8009f58:	e04c      	b.n	8009ff4 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009f5a:	7afb      	ldrb	r3, [r7, #11]
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f7ff fca8 	bl	80098b4 <USBH_MSC_BOT_Process>
 8009f64:	4603      	mov	r3, r0
 8009f66:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009f68:	7dfb      	ldrb	r3, [r7, #23]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d141      	bne.n	8009ff2 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009f6e:	2222      	movs	r2, #34	; 0x22
 8009f70:	2100      	movs	r1, #0
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f005 ffbb 	bl	800feee <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	f003 031f 	and.w	r3, r3, #31
 8009f84:	b2da      	uxtb	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	095b      	lsrs	r3, r3, #5
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	b25b      	sxtb	r3, r3
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	da03      	bge.n	8009fb2 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2201      	movs	r2, #1
 8009fae:	709a      	strb	r2, [r3, #2]
 8009fb0:	e002      	b.n	8009fb8 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	1cd8      	adds	r0, r3, #3
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fc2:	3308      	adds	r3, #8
 8009fc4:	2208      	movs	r2, #8
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	f005 ff86 	bl	800fed8 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f103 000c 	add.w	r0, r3, #12
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fd8:	3310      	adds	r3, #16
 8009fda:	2210      	movs	r2, #16
 8009fdc:	4619      	mov	r1, r3
 8009fde:	f005 ff7b 	bl	800fed8 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	331d      	adds	r3, #29
 8009fe6:	693a      	ldr	r2, [r7, #16]
 8009fe8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8009fec:	3220      	adds	r2, #32
 8009fee:	6812      	ldr	r2, [r2, #0]
 8009ff0:	601a      	str	r2, [r3, #0]
      break;
 8009ff2:	bf00      	nop
  }

  return error;
 8009ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3718      	adds	r7, #24
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b086      	sub	sp, #24
 800a002:	af00      	add	r7, sp, #0
 800a004:	60f8      	str	r0, [r7, #12]
 800a006:	460b      	mov	r3, r1
 800a008:	607a      	str	r2, [r7, #4]
 800a00a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a00c:	2302      	movs	r3, #2
 800a00e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a016:	69db      	ldr	r3, [r3, #28]
 800a018:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a020:	2b01      	cmp	r3, #1
 800a022:	d002      	beq.n	800a02a <USBH_MSC_SCSI_RequestSense+0x2c>
 800a024:	2b02      	cmp	r3, #2
 800a026:	d03d      	beq.n	800a0a4 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a028:	e05d      	b.n	800a0e6 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	220e      	movs	r2, #14
 800a02e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	2280      	movs	r2, #128	; 0x80
 800a034:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	220a      	movs	r2, #10
 800a03c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	3363      	adds	r3, #99	; 0x63
 800a044:	2210      	movs	r2, #16
 800a046:	2100      	movs	r1, #0
 800a048:	4618      	mov	r0, r3
 800a04a:	f005 ff50 	bl	800feee <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	2203      	movs	r2, #3
 800a052:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a056:	7afb      	ldrb	r3, [r7, #11]
 800a058:	015b      	lsls	r3, r3, #5
 800a05a:	b2da      	uxtb	r2, r3
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	220e      	movs	r2, #14
 800a076:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	2202      	movs	r2, #2
 800a08e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	f103 0210 	add.w	r2, r3, #16
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	75fb      	strb	r3, [r7, #23]
      break;
 800a0a2:	e020      	b.n	800a0e6 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a0a4:	7afb      	ldrb	r3, [r7, #11]
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f7ff fc03 	bl	80098b4 <USBH_MSC_BOT_Process>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a0b2:	7dfb      	ldrb	r3, [r7, #23]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d115      	bne.n	800a0e4 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0be:	3302      	adds	r3, #2
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	f003 030f 	and.w	r3, r3, #15
 800a0c6:	b2da      	uxtb	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0d2:	7b1a      	ldrb	r2, [r3, #12]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0de:	7b5a      	ldrb	r2, [r3, #13]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	709a      	strb	r2, [r3, #2]
      break;
 800a0e4:	bf00      	nop
  }

  return error;
 800a0e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3718      	adds	r7, #24
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b086      	sub	sp, #24
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	607a      	str	r2, [r7, #4]
 800a0fa:	603b      	str	r3, [r7, #0]
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a100:	2302      	movs	r3, #2
 800a102:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a10a:	69db      	ldr	r3, [r3, #28]
 800a10c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a114:	2b01      	cmp	r3, #1
 800a116:	d002      	beq.n	800a11e <USBH_MSC_SCSI_Write+0x2e>
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d047      	beq.n	800a1ac <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a11c:	e04e      	b.n	800a1bc <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a124:	461a      	mov	r2, r3
 800a126:	6a3b      	ldr	r3, [r7, #32]
 800a128:	fb03 f202 	mul.w	r2, r3, r2
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	220a      	movs	r2, #10
 800a13c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	3363      	adds	r3, #99	; 0x63
 800a144:	2210      	movs	r2, #16
 800a146:	2100      	movs	r1, #0
 800a148:	4618      	mov	r0, r3
 800a14a:	f005 fed0 	bl	800feee <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	222a      	movs	r2, #42	; 0x2a
 800a152:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a156:	79fa      	ldrb	r2, [r7, #7]
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a15e:	79ba      	ldrb	r2, [r7, #6]
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a166:	797a      	ldrb	r2, [r7, #5]
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a16e:	1d3b      	adds	r3, r7, #4
 800a170:	781a      	ldrb	r2, [r3, #0]
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a178:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a182:	f107 0320 	add.w	r3, r7, #32
 800a186:	781a      	ldrb	r2, [r3, #0]
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	2201      	movs	r2, #1
 800a192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	2202      	movs	r2, #2
 800a19a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	683a      	ldr	r2, [r7, #0]
 800a1a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	75fb      	strb	r3, [r7, #23]
      break;
 800a1aa:	e007      	b.n	800a1bc <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a1ac:	7afb      	ldrb	r3, [r7, #11]
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f7ff fb7f 	bl	80098b4 <USBH_MSC_BOT_Process>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	75fb      	strb	r3, [r7, #23]
      break;
 800a1ba:	bf00      	nop
  }

  return error;
 800a1bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3718      	adds	r7, #24
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b086      	sub	sp, #24
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	60f8      	str	r0, [r7, #12]
 800a1ce:	607a      	str	r2, [r7, #4]
 800a1d0:	603b      	str	r3, [r7, #0]
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a1d6:	2302      	movs	r3, #2
 800a1d8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1e0:	69db      	ldr	r3, [r3, #28]
 800a1e2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d002      	beq.n	800a1f4 <USBH_MSC_SCSI_Read+0x2e>
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d047      	beq.n	800a282 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a1f2:	e04e      	b.n	800a292 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	fb03 f202 	mul.w	r2, r3, r2
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	2280      	movs	r2, #128	; 0x80
 800a20a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	220a      	movs	r2, #10
 800a212:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	3363      	adds	r3, #99	; 0x63
 800a21a:	2210      	movs	r2, #16
 800a21c:	2100      	movs	r1, #0
 800a21e:	4618      	mov	r0, r3
 800a220:	f005 fe65 	bl	800feee <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	2228      	movs	r2, #40	; 0x28
 800a228:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a22c:	79fa      	ldrb	r2, [r7, #7]
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a234:	79ba      	ldrb	r2, [r7, #6]
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a23c:	797a      	ldrb	r2, [r7, #5]
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a244:	1d3b      	adds	r3, r7, #4
 800a246:	781a      	ldrb	r2, [r3, #0]
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a24e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a258:	f107 0320 	add.w	r3, r7, #32
 800a25c:	781a      	ldrb	r2, [r3, #0]
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	2202      	movs	r2, #2
 800a270:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	683a      	ldr	r2, [r7, #0]
 800a278:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a27c:	2301      	movs	r3, #1
 800a27e:	75fb      	strb	r3, [r7, #23]
      break;
 800a280:	e007      	b.n	800a292 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a282:	7afb      	ldrb	r3, [r7, #11]
 800a284:	4619      	mov	r1, r3
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f7ff fb14 	bl	80098b4 <USBH_MSC_BOT_Process>
 800a28c:	4603      	mov	r3, r0
 800a28e:	75fb      	strb	r3, [r7, #23]
      break;
 800a290:	bf00      	nop
  }

  return error;
 800a292:	7dfb      	ldrb	r3, [r7, #23]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d101      	bne.n	800a2b4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	e029      	b.n	800a308 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	79fa      	ldrb	r2, [r7, #7]
 800a2b8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f000 f81f 	bl	800a310 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d003      	beq.n	800a300 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f003 fe99 	bl	800e038 <USBH_LL_Init>

  return USBH_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a310:	b480      	push	{r7}
 800a312:	b085      	sub	sp, #20
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a318:	2300      	movs	r3, #0
 800a31a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a31c:	2300      	movs	r3, #0
 800a31e:	60fb      	str	r3, [r7, #12]
 800a320:	e009      	b.n	800a336 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	33e0      	adds	r3, #224	; 0xe0
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4413      	add	r3, r2
 800a32c:	2200      	movs	r2, #0
 800a32e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	3301      	adds	r3, #1
 800a334:	60fb      	str	r3, [r7, #12]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2b0e      	cmp	r3, #14
 800a33a:	d9f2      	bls.n	800a322 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a33c:	2300      	movs	r3, #0
 800a33e:	60fb      	str	r3, [r7, #12]
 800a340:	e009      	b.n	800a356 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	4413      	add	r3, r2
 800a348:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a34c:	2200      	movs	r2, #0
 800a34e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	3301      	adds	r3, #1
 800a354:	60fb      	str	r3, [r7, #12]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a35c:	d3f1      	bcc.n	800a342 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2201      	movs	r2, #1
 800a36e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2201      	movs	r2, #1
 800a37c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2240      	movs	r2, #64	; 0x40
 800a382:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2201      	movs	r2, #1
 800a396:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3714      	adds	r7, #20
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d016      	beq.n	800a3fa <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d10e      	bne.n	800a3f4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a3dc:	1c59      	adds	r1, r3, #1
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	33de      	adds	r3, #222	; 0xde
 800a3e8:	6839      	ldr	r1, [r7, #0]
 800a3ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	73fb      	strb	r3, [r7, #15]
 800a3f2:	e004      	b.n	800a3fe <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	73fb      	strb	r3, [r7, #15]
 800a3f8:	e001      	b.n	800a3fe <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a3fa:	2302      	movs	r3, #2
 800a3fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a400:	4618      	mov	r0, r3
 800a402:	3714      	adds	r7, #20
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	460b      	mov	r3, r1
 800a416:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a418:	2300      	movs	r3, #0
 800a41a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a422:	78fa      	ldrb	r2, [r7, #3]
 800a424:	429a      	cmp	r2, r3
 800a426:	d204      	bcs.n	800a432 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	78fa      	ldrb	r2, [r7, #3]
 800a42c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a430:	e001      	b.n	800a436 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a432:	2302      	movs	r3, #2
 800a434:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a436:	7bfb      	ldrb	r3, [r7, #15]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a444:	b480      	push	{r7}
 800a446:	b087      	sub	sp, #28
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	4608      	mov	r0, r1
 800a44e:	4611      	mov	r1, r2
 800a450:	461a      	mov	r2, r3
 800a452:	4603      	mov	r3, r0
 800a454:	70fb      	strb	r3, [r7, #3]
 800a456:	460b      	mov	r3, r1
 800a458:	70bb      	strb	r3, [r7, #2]
 800a45a:	4613      	mov	r3, r2
 800a45c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a45e:	2300      	movs	r3, #0
 800a460:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a462:	2300      	movs	r3, #0
 800a464:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a46c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a46e:	e025      	b.n	800a4bc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a470:	7dfb      	ldrb	r3, [r7, #23]
 800a472:	221a      	movs	r2, #26
 800a474:	fb02 f303 	mul.w	r3, r2, r3
 800a478:	3308      	adds	r3, #8
 800a47a:	68fa      	ldr	r2, [r7, #12]
 800a47c:	4413      	add	r3, r2
 800a47e:	3302      	adds	r3, #2
 800a480:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	795b      	ldrb	r3, [r3, #5]
 800a486:	78fa      	ldrb	r2, [r7, #3]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d002      	beq.n	800a492 <USBH_FindInterface+0x4e>
 800a48c:	78fb      	ldrb	r3, [r7, #3]
 800a48e:	2bff      	cmp	r3, #255	; 0xff
 800a490:	d111      	bne.n	800a4b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a496:	78ba      	ldrb	r2, [r7, #2]
 800a498:	429a      	cmp	r2, r3
 800a49a:	d002      	beq.n	800a4a2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a49c:	78bb      	ldrb	r3, [r7, #2]
 800a49e:	2bff      	cmp	r3, #255	; 0xff
 800a4a0:	d109      	bne.n	800a4b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a4a6:	787a      	ldrb	r2, [r7, #1]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d002      	beq.n	800a4b2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a4ac:	787b      	ldrb	r3, [r7, #1]
 800a4ae:	2bff      	cmp	r3, #255	; 0xff
 800a4b0:	d101      	bne.n	800a4b6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a4b2:	7dfb      	ldrb	r3, [r7, #23]
 800a4b4:	e006      	b.n	800a4c4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a4b6:	7dfb      	ldrb	r3, [r7, #23]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a4bc:	7dfb      	ldrb	r3, [r7, #23]
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d9d6      	bls.n	800a470 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a4c2:	23ff      	movs	r3, #255	; 0xff
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	371c      	adds	r7, #28
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f003 fde9 	bl	800e0b0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a4de:	2101      	movs	r1, #1
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f003 ff00 	bl	800e2e6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3708      	adds	r7, #8
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b088      	sub	sp, #32
 800a4f4:	af04      	add	r7, sp, #16
 800a4f6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a4f8:	2302      	movs	r3, #2
 800a4fa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a506:	b2db      	uxtb	r3, r3
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d102      	bne.n	800a512 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2203      	movs	r2, #3
 800a510:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	b2db      	uxtb	r3, r3
 800a518:	2b0b      	cmp	r3, #11
 800a51a:	f200 81b3 	bhi.w	800a884 <USBH_Process+0x394>
 800a51e:	a201      	add	r2, pc, #4	; (adr r2, 800a524 <USBH_Process+0x34>)
 800a520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a524:	0800a555 	.word	0x0800a555
 800a528:	0800a587 	.word	0x0800a587
 800a52c:	0800a5ef 	.word	0x0800a5ef
 800a530:	0800a81f 	.word	0x0800a81f
 800a534:	0800a885 	.word	0x0800a885
 800a538:	0800a693 	.word	0x0800a693
 800a53c:	0800a7c5 	.word	0x0800a7c5
 800a540:	0800a6c9 	.word	0x0800a6c9
 800a544:	0800a6e9 	.word	0x0800a6e9
 800a548:	0800a709 	.word	0x0800a709
 800a54c:	0800a737 	.word	0x0800a737
 800a550:	0800a807 	.word	0x0800a807
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f000 8193 	beq.w	800a888 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2201      	movs	r2, #1
 800a566:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a568:	20c8      	movs	r0, #200	; 0xc8
 800a56a:	f003 ff39 	bl	800e3e0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f003 fdf9 	bl	800e166 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a584:	e180      	b.n	800a888 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d107      	bne.n	800a5a0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2202      	movs	r2, #2
 800a59c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a59e:	e182      	b.n	800a8a6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a5a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5aa:	d914      	bls.n	800a5d6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a5c2:	2b03      	cmp	r3, #3
 800a5c4:	d903      	bls.n	800a5ce <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	220d      	movs	r2, #13
 800a5ca:	701a      	strb	r2, [r3, #0]
      break;
 800a5cc:	e16b      	b.n	800a8a6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	701a      	strb	r2, [r3, #0]
      break;
 800a5d4:	e167      	b.n	800a8a6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a5dc:	f103 020a 	add.w	r2, r3, #10
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a5e6:	200a      	movs	r0, #10
 800a5e8:	f003 fefa 	bl	800e3e0 <USBH_Delay>
      break;
 800a5ec:	e15b      	b.n	800a8a6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d005      	beq.n	800a604 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a5fe:	2104      	movs	r1, #4
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a604:	2064      	movs	r0, #100	; 0x64
 800a606:	f003 feeb 	bl	800e3e0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f003 fd86 	bl	800e11c <USBH_LL_GetSpeed>
 800a610:	4603      	mov	r3, r0
 800a612:	461a      	mov	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2205      	movs	r2, #5
 800a61e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a620:	2100      	movs	r1, #0
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f001 f931 	bl	800b88a <USBH_AllocPipe>
 800a628:	4603      	mov	r3, r0
 800a62a:	461a      	mov	r2, r3
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a630:	2180      	movs	r1, #128	; 0x80
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f001 f929 	bl	800b88a <USBH_AllocPipe>
 800a638:	4603      	mov	r3, r0
 800a63a:	461a      	mov	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	7919      	ldrb	r1, [r3, #4]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a654:	b292      	uxth	r2, r2
 800a656:	9202      	str	r2, [sp, #8]
 800a658:	2200      	movs	r2, #0
 800a65a:	9201      	str	r2, [sp, #4]
 800a65c:	9300      	str	r3, [sp, #0]
 800a65e:	4603      	mov	r3, r0
 800a660:	2280      	movs	r2, #128	; 0x80
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f001 f8e2 	bl	800b82c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	7959      	ldrb	r1, [r3, #5]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a67c:	b292      	uxth	r2, r2
 800a67e:	9202      	str	r2, [sp, #8]
 800a680:	2200      	movs	r2, #0
 800a682:	9201      	str	r2, [sp, #4]
 800a684:	9300      	str	r3, [sp, #0]
 800a686:	4603      	mov	r3, r0
 800a688:	2200      	movs	r2, #0
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f001 f8ce 	bl	800b82c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a690:	e109      	b.n	800a8a6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f90c 	bl	800a8b0 <USBH_HandleEnum>
 800a698:	4603      	mov	r3, r0
 800a69a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a69c:	7bbb      	ldrb	r3, [r7, #14]
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f040 80f3 	bne.w	800a88c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d103      	bne.n	800a6c0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2208      	movs	r2, #8
 800a6bc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a6be:	e0e5      	b.n	800a88c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2207      	movs	r2, #7
 800a6c4:	701a      	strb	r2, [r3, #0]
      break;
 800a6c6:	e0e1      	b.n	800a88c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	f000 80de 	beq.w	800a890 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6da:	2101      	movs	r1, #1
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2208      	movs	r2, #8
 800a6e4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a6e6:	e0d3      	b.n	800a890 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fc20 	bl	800af38 <USBH_SetCfg>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f040 80ca 	bne.w	800a894 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2209      	movs	r2, #9
 800a704:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a706:	e0c5      	b.n	800a894 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a70e:	f003 0320 	and.w	r3, r3, #32
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00b      	beq.n	800a72e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a716:	2101      	movs	r1, #1
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 fc30 	bl	800af7e <USBH_SetFeature>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	f040 80b9 	bne.w	800a898 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	220a      	movs	r2, #10
 800a72a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a72c:	e0b4      	b.n	800a898 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	220a      	movs	r2, #10
 800a732:	701a      	strb	r2, [r3, #0]
      break;
 800a734:	e0b0      	b.n	800a898 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f000 80ad 	beq.w	800a89c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a74a:	2300      	movs	r3, #0
 800a74c:	73fb      	strb	r3, [r7, #15]
 800a74e:	e016      	b.n	800a77e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a750:	7bfa      	ldrb	r2, [r7, #15]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	32de      	adds	r2, #222	; 0xde
 800a756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a75a:	791a      	ldrb	r2, [r3, #4]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a762:	429a      	cmp	r2, r3
 800a764:	d108      	bne.n	800a778 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a766:	7bfa      	ldrb	r2, [r7, #15]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	32de      	adds	r2, #222	; 0xde
 800a76c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a776:	e005      	b.n	800a784 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a778:	7bfb      	ldrb	r3, [r7, #15]
 800a77a:	3301      	adds	r3, #1
 800a77c:	73fb      	strb	r3, [r7, #15]
 800a77e:	7bfb      	ldrb	r3, [r7, #15]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d0e5      	beq.n	800a750 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d016      	beq.n	800a7bc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	4798      	blx	r3
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d109      	bne.n	800a7b4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2206      	movs	r2, #6
 800a7a4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7ac:	2103      	movs	r1, #3
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a7b2:	e073      	b.n	800a89c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	220d      	movs	r2, #13
 800a7b8:	701a      	strb	r2, [r3, #0]
      break;
 800a7ba:	e06f      	b.n	800a89c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	220d      	movs	r2, #13
 800a7c0:	701a      	strb	r2, [r3, #0]
      break;
 800a7c2:	e06b      	b.n	800a89c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d017      	beq.n	800a7fe <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	4798      	blx	r3
 800a7da:	4603      	mov	r3, r0
 800a7dc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a7de:	7bbb      	ldrb	r3, [r7, #14]
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d103      	bne.n	800a7ee <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	220b      	movs	r2, #11
 800a7ea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a7ec:	e058      	b.n	800a8a0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a7ee:	7bbb      	ldrb	r3, [r7, #14]
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	d154      	bne.n	800a8a0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	220d      	movs	r2, #13
 800a7fa:	701a      	strb	r2, [r3, #0]
      break;
 800a7fc:	e050      	b.n	800a8a0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	220d      	movs	r2, #13
 800a802:	701a      	strb	r2, [r3, #0]
      break;
 800a804:	e04c      	b.n	800a8a0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d049      	beq.n	800a8a4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a816:	695b      	ldr	r3, [r3, #20]
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	4798      	blx	r3
      }
      break;
 800a81c:	e042      	b.n	800a8a4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f7ff fd72 	bl	800a310 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a832:	2b00      	cmp	r3, #0
 800a834:	d009      	beq.n	800a84a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a850:	2b00      	cmp	r3, #0
 800a852:	d005      	beq.n	800a860 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a85a:	2105      	movs	r1, #5
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a866:	b2db      	uxtb	r3, r3
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d107      	bne.n	800a87c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f7ff fe2b 	bl	800a4d0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a87a:	e014      	b.n	800a8a6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f003 fc17 	bl	800e0b0 <USBH_LL_Start>
      break;
 800a882:	e010      	b.n	800a8a6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a884:	bf00      	nop
 800a886:	e00e      	b.n	800a8a6 <USBH_Process+0x3b6>
      break;
 800a888:	bf00      	nop
 800a88a:	e00c      	b.n	800a8a6 <USBH_Process+0x3b6>
      break;
 800a88c:	bf00      	nop
 800a88e:	e00a      	b.n	800a8a6 <USBH_Process+0x3b6>
    break;
 800a890:	bf00      	nop
 800a892:	e008      	b.n	800a8a6 <USBH_Process+0x3b6>
      break;
 800a894:	bf00      	nop
 800a896:	e006      	b.n	800a8a6 <USBH_Process+0x3b6>
      break;
 800a898:	bf00      	nop
 800a89a:	e004      	b.n	800a8a6 <USBH_Process+0x3b6>
      break;
 800a89c:	bf00      	nop
 800a89e:	e002      	b.n	800a8a6 <USBH_Process+0x3b6>
      break;
 800a8a0:	bf00      	nop
 800a8a2:	e000      	b.n	800a8a6 <USBH_Process+0x3b6>
      break;
 800a8a4:	bf00      	nop
  }
  return USBH_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b088      	sub	sp, #32
 800a8b4:	af04      	add	r7, sp, #16
 800a8b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	785b      	ldrb	r3, [r3, #1]
 800a8c4:	2b07      	cmp	r3, #7
 800a8c6:	f200 81c1 	bhi.w	800ac4c <USBH_HandleEnum+0x39c>
 800a8ca:	a201      	add	r2, pc, #4	; (adr r2, 800a8d0 <USBH_HandleEnum+0x20>)
 800a8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d0:	0800a8f1 	.word	0x0800a8f1
 800a8d4:	0800a9af 	.word	0x0800a9af
 800a8d8:	0800aa19 	.word	0x0800aa19
 800a8dc:	0800aaa7 	.word	0x0800aaa7
 800a8e0:	0800ab11 	.word	0x0800ab11
 800a8e4:	0800ab81 	.word	0x0800ab81
 800a8e8:	0800abc7 	.word	0x0800abc7
 800a8ec:	0800ac0d 	.word	0x0800ac0d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a8f0:	2108      	movs	r1, #8
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 fa50 	bl	800ad98 <USBH_Get_DevDesc>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a8fc:	7bbb      	ldrb	r3, [r7, #14]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d130      	bne.n	800a964 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	7919      	ldrb	r1, [r3, #4]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a926:	b292      	uxth	r2, r2
 800a928:	9202      	str	r2, [sp, #8]
 800a92a:	2200      	movs	r2, #0
 800a92c:	9201      	str	r2, [sp, #4]
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	4603      	mov	r3, r0
 800a932:	2280      	movs	r2, #128	; 0x80
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 ff79 	bl	800b82c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	7959      	ldrb	r1, [r3, #5]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a94e:	b292      	uxth	r2, r2
 800a950:	9202      	str	r2, [sp, #8]
 800a952:	2200      	movs	r2, #0
 800a954:	9201      	str	r2, [sp, #4]
 800a956:	9300      	str	r3, [sp, #0]
 800a958:	4603      	mov	r3, r0
 800a95a:	2200      	movs	r2, #0
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 ff65 	bl	800b82c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a962:	e175      	b.n	800ac50 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a964:	7bbb      	ldrb	r3, [r7, #14]
 800a966:	2b03      	cmp	r3, #3
 800a968:	f040 8172 	bne.w	800ac50 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a972:	3301      	adds	r3, #1
 800a974:	b2da      	uxtb	r2, r3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a982:	2b03      	cmp	r3, #3
 800a984:	d903      	bls.n	800a98e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	220d      	movs	r2, #13
 800a98a:	701a      	strb	r2, [r3, #0]
      break;
 800a98c:	e160      	b.n	800ac50 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	795b      	ldrb	r3, [r3, #5]
 800a992:	4619      	mov	r1, r3
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 ff99 	bl	800b8cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	791b      	ldrb	r3, [r3, #4]
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 ff93 	bl	800b8cc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	701a      	strb	r2, [r3, #0]
      break;
 800a9ac:	e150      	b.n	800ac50 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a9ae:	2112      	movs	r1, #18
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 f9f1 	bl	800ad98 <USBH_Get_DevDesc>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a9ba:	7bbb      	ldrb	r3, [r7, #14]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d103      	bne.n	800a9c8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2202      	movs	r2, #2
 800a9c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a9c6:	e145      	b.n	800ac54 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9c8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ca:	2b03      	cmp	r3, #3
 800a9cc:	f040 8142 	bne.w	800ac54 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	b2da      	uxtb	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a9e6:	2b03      	cmp	r3, #3
 800a9e8:	d903      	bls.n	800a9f2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	220d      	movs	r2, #13
 800a9ee:	701a      	strb	r2, [r3, #0]
      break;
 800a9f0:	e130      	b.n	800ac54 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	795b      	ldrb	r3, [r3, #5]
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 ff67 	bl	800b8cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	791b      	ldrb	r3, [r3, #4]
 800aa02:	4619      	mov	r1, r3
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 ff61 	bl	800b8cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	701a      	strb	r2, [r3, #0]
      break;
 800aa16:	e11d      	b.n	800ac54 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800aa18:	2101      	movs	r1, #1
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 fa68 	bl	800aef0 <USBH_SetAddress>
 800aa20:	4603      	mov	r3, r0
 800aa22:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa24:	7bbb      	ldrb	r3, [r7, #14]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d132      	bne.n	800aa90 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800aa2a:	2002      	movs	r0, #2
 800aa2c:	f003 fcd8 	bl	800e3e0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2203      	movs	r2, #3
 800aa3c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	7919      	ldrb	r1, [r3, #4]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aa52:	b292      	uxth	r2, r2
 800aa54:	9202      	str	r2, [sp, #8]
 800aa56:	2200      	movs	r2, #0
 800aa58:	9201      	str	r2, [sp, #4]
 800aa5a:	9300      	str	r3, [sp, #0]
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2280      	movs	r2, #128	; 0x80
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 fee3 	bl	800b82c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	7959      	ldrb	r1, [r3, #5]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa7a:	b292      	uxth	r2, r2
 800aa7c:	9202      	str	r2, [sp, #8]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	9201      	str	r2, [sp, #4]
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	4603      	mov	r3, r0
 800aa86:	2200      	movs	r2, #0
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 fecf 	bl	800b82c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aa8e:	e0e3      	b.n	800ac58 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa90:	7bbb      	ldrb	r3, [r7, #14]
 800aa92:	2b03      	cmp	r3, #3
 800aa94:	f040 80e0 	bne.w	800ac58 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	220d      	movs	r2, #13
 800aa9c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	705a      	strb	r2, [r3, #1]
      break;
 800aaa4:	e0d8      	b.n	800ac58 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800aaa6:	2109      	movs	r1, #9
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f99d 	bl	800ade8 <USBH_Get_CfgDesc>
 800aaae:	4603      	mov	r3, r0
 800aab0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aab2:	7bbb      	ldrb	r3, [r7, #14]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d103      	bne.n	800aac0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2204      	movs	r2, #4
 800aabc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aabe:	e0cd      	b.n	800ac5c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aac0:	7bbb      	ldrb	r3, [r7, #14]
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	f040 80ca 	bne.w	800ac5c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aace:	3301      	adds	r3, #1
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d903      	bls.n	800aaea <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	220d      	movs	r2, #13
 800aae6:	701a      	strb	r2, [r3, #0]
      break;
 800aae8:	e0b8      	b.n	800ac5c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	795b      	ldrb	r3, [r3, #5]
 800aaee:	4619      	mov	r1, r3
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 feeb 	bl	800b8cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	791b      	ldrb	r3, [r3, #4]
 800aafa:	4619      	mov	r1, r3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 fee5 	bl	800b8cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	701a      	strb	r2, [r3, #0]
      break;
 800ab0e:	e0a5      	b.n	800ac5c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ab16:	4619      	mov	r1, r3
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 f965 	bl	800ade8 <USBH_Get_CfgDesc>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ab22:	7bbb      	ldrb	r3, [r7, #14]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d103      	bne.n	800ab30 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2205      	movs	r2, #5
 800ab2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ab2e:	e097      	b.n	800ac60 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab30:	7bbb      	ldrb	r3, [r7, #14]
 800ab32:	2b03      	cmp	r3, #3
 800ab34:	f040 8094 	bne.w	800ac60 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab3e:	3301      	adds	r3, #1
 800ab40:	b2da      	uxtb	r2, r3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab4e:	2b03      	cmp	r3, #3
 800ab50:	d903      	bls.n	800ab5a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	220d      	movs	r2, #13
 800ab56:	701a      	strb	r2, [r3, #0]
      break;
 800ab58:	e082      	b.n	800ac60 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	795b      	ldrb	r3, [r3, #5]
 800ab5e:	4619      	mov	r1, r3
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 feb3 	bl	800b8cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	791b      	ldrb	r3, [r3, #4]
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 fead 	bl	800b8cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	701a      	strb	r2, [r3, #0]
      break;
 800ab7e:	e06f      	b.n	800ac60 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d019      	beq.n	800abbe <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab96:	23ff      	movs	r3, #255	; 0xff
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 f949 	bl	800ae30 <USBH_Get_StringDesc>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aba2:	7bbb      	ldrb	r3, [r7, #14]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d103      	bne.n	800abb0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2206      	movs	r2, #6
 800abac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800abae:	e059      	b.n	800ac64 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abb0:	7bbb      	ldrb	r3, [r7, #14]
 800abb2:	2b03      	cmp	r3, #3
 800abb4:	d156      	bne.n	800ac64 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2206      	movs	r2, #6
 800abba:	705a      	strb	r2, [r3, #1]
      break;
 800abbc:	e052      	b.n	800ac64 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2206      	movs	r2, #6
 800abc2:	705a      	strb	r2, [r3, #1]
      break;
 800abc4:	e04e      	b.n	800ac64 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d019      	beq.n	800ac04 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800abdc:	23ff      	movs	r3, #255	; 0xff
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f926 	bl	800ae30 <USBH_Get_StringDesc>
 800abe4:	4603      	mov	r3, r0
 800abe6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800abe8:	7bbb      	ldrb	r3, [r7, #14]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d103      	bne.n	800abf6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2207      	movs	r2, #7
 800abf2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800abf4:	e038      	b.n	800ac68 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abf6:	7bbb      	ldrb	r3, [r7, #14]
 800abf8:	2b03      	cmp	r3, #3
 800abfa:	d135      	bne.n	800ac68 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2207      	movs	r2, #7
 800ac00:	705a      	strb	r2, [r3, #1]
      break;
 800ac02:	e031      	b.n	800ac68 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2207      	movs	r2, #7
 800ac08:	705a      	strb	r2, [r3, #1]
      break;
 800ac0a:	e02d      	b.n	800ac68 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d017      	beq.n	800ac46 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ac22:	23ff      	movs	r3, #255	; 0xff
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 f903 	bl	800ae30 <USBH_Get_StringDesc>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ac2e:	7bbb      	ldrb	r3, [r7, #14]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d102      	bne.n	800ac3a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ac34:	2300      	movs	r3, #0
 800ac36:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ac38:	e018      	b.n	800ac6c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac3a:	7bbb      	ldrb	r3, [r7, #14]
 800ac3c:	2b03      	cmp	r3, #3
 800ac3e:	d115      	bne.n	800ac6c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	73fb      	strb	r3, [r7, #15]
      break;
 800ac44:	e012      	b.n	800ac6c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800ac46:	2300      	movs	r3, #0
 800ac48:	73fb      	strb	r3, [r7, #15]
      break;
 800ac4a:	e00f      	b.n	800ac6c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800ac4c:	bf00      	nop
 800ac4e:	e00e      	b.n	800ac6e <USBH_HandleEnum+0x3be>
      break;
 800ac50:	bf00      	nop
 800ac52:	e00c      	b.n	800ac6e <USBH_HandleEnum+0x3be>
      break;
 800ac54:	bf00      	nop
 800ac56:	e00a      	b.n	800ac6e <USBH_HandleEnum+0x3be>
      break;
 800ac58:	bf00      	nop
 800ac5a:	e008      	b.n	800ac6e <USBH_HandleEnum+0x3be>
      break;
 800ac5c:	bf00      	nop
 800ac5e:	e006      	b.n	800ac6e <USBH_HandleEnum+0x3be>
      break;
 800ac60:	bf00      	nop
 800ac62:	e004      	b.n	800ac6e <USBH_HandleEnum+0x3be>
      break;
 800ac64:	bf00      	nop
 800ac66:	e002      	b.n	800ac6e <USBH_HandleEnum+0x3be>
      break;
 800ac68:	bf00      	nop
 800ac6a:	e000      	b.n	800ac6e <USBH_HandleEnum+0x3be>
      break;
 800ac6c:	bf00      	nop
  }
  return Status;
 800ac6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b083      	sub	sp, #12
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	683a      	ldr	r2, [r7, #0]
 800ac86:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ac8a:	bf00      	nop
 800ac8c:	370c      	adds	r7, #12
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b082      	sub	sp, #8
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aca4:	1c5a      	adds	r2, r3, #1
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 f804 	bl	800acba <USBH_HandleSof>
}
 800acb2:	bf00      	nop
 800acb4:	3708      	adds	r7, #8
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b082      	sub	sp, #8
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	2b0b      	cmp	r3, #11
 800acca:	d10a      	bne.n	800ace2 <USBH_HandleSof+0x28>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d005      	beq.n	800ace2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acdc:	699b      	ldr	r3, [r3, #24]
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	4798      	blx	r3
  }
}
 800ace2:	bf00      	nop
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800acea:	b480      	push	{r7}
 800acec:	b083      	sub	sp, #12
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2201      	movs	r2, #1
 800acf6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800acfa:	bf00      	nop
}
 800acfc:	370c      	adds	r7, #12
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr

0800ad06 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ad06:	b480      	push	{r7}
 800ad08:	b083      	sub	sp, #12
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ad16:	bf00      	nop
}
 800ad18:	370c      	adds	r7, #12
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr

0800ad22 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ad22:	b480      	push	{r7}
 800ad24:	b083      	sub	sp, #12
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	370c      	adds	r7, #12
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f003 f9b8 	bl	800e0e6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	791b      	ldrb	r3, [r3, #4]
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 fda5 	bl	800b8cc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	795b      	ldrb	r3, [r3, #5]
 800ad86:	4619      	mov	r1, r3
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 fd9f 	bl	800b8cc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3708      	adds	r7, #8
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b086      	sub	sp, #24
 800ad9c:	af02      	add	r7, sp, #8
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	460b      	mov	r3, r1
 800ada2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800adaa:	78fb      	ldrb	r3, [r7, #3]
 800adac:	b29b      	uxth	r3, r3
 800adae:	9300      	str	r3, [sp, #0]
 800adb0:	4613      	mov	r3, r2
 800adb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800adb6:	2100      	movs	r1, #0
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 f864 	bl	800ae86 <USBH_GetDescriptor>
 800adbe:	4603      	mov	r3, r0
 800adc0:	73fb      	strb	r3, [r7, #15]
 800adc2:	7bfb      	ldrb	r3, [r7, #15]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d10a      	bne.n	800adde <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f203 3026 	addw	r0, r3, #806	; 0x326
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800add4:	78fa      	ldrb	r2, [r7, #3]
 800add6:	b292      	uxth	r2, r2
 800add8:	4619      	mov	r1, r3
 800adda:	f000 f918 	bl	800b00e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800adde:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3710      	adds	r7, #16
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b086      	sub	sp, #24
 800adec:	af02      	add	r7, sp, #8
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	460b      	mov	r3, r1
 800adf2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	331c      	adds	r3, #28
 800adf8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800adfa:	887b      	ldrh	r3, [r7, #2]
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae04:	2100      	movs	r1, #0
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 f83d 	bl	800ae86 <USBH_GetDescriptor>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	72fb      	strb	r3, [r7, #11]
 800ae10:	7afb      	ldrb	r3, [r7, #11]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d107      	bne.n	800ae26 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ae1c:	887a      	ldrh	r2, [r7, #2]
 800ae1e:	68f9      	ldr	r1, [r7, #12]
 800ae20:	4618      	mov	r0, r3
 800ae22:	f000 f964 	bl	800b0ee <USBH_ParseCfgDesc>
  }

  return status;
 800ae26:	7afb      	ldrb	r3, [r7, #11]
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b088      	sub	sp, #32
 800ae34:	af02      	add	r7, sp, #8
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	607a      	str	r2, [r7, #4]
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	72fb      	strb	r3, [r7, #11]
 800ae40:	4613      	mov	r3, r2
 800ae42:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ae44:	7afb      	ldrb	r3, [r7, #11]
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ae4c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ae54:	893b      	ldrh	r3, [r7, #8]
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	460b      	mov	r3, r1
 800ae5a:	2100      	movs	r1, #0
 800ae5c:	68f8      	ldr	r0, [r7, #12]
 800ae5e:	f000 f812 	bl	800ae86 <USBH_GetDescriptor>
 800ae62:	4603      	mov	r3, r0
 800ae64:	75fb      	strb	r3, [r7, #23]
 800ae66:	7dfb      	ldrb	r3, [r7, #23]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d107      	bne.n	800ae7c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ae72:	893a      	ldrh	r2, [r7, #8]
 800ae74:	6879      	ldr	r1, [r7, #4]
 800ae76:	4618      	mov	r0, r3
 800ae78:	f000 fa37 	bl	800b2ea <USBH_ParseStringDesc>
  }

  return status;
 800ae7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3718      	adds	r7, #24
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b084      	sub	sp, #16
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	60f8      	str	r0, [r7, #12]
 800ae8e:	607b      	str	r3, [r7, #4]
 800ae90:	460b      	mov	r3, r1
 800ae92:	72fb      	strb	r3, [r7, #11]
 800ae94:	4613      	mov	r3, r2
 800ae96:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	789b      	ldrb	r3, [r3, #2]
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d11c      	bne.n	800aeda <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800aea0:	7afb      	ldrb	r3, [r7, #11]
 800aea2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aea6:	b2da      	uxtb	r2, r3
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2206      	movs	r2, #6
 800aeb0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	893a      	ldrh	r2, [r7, #8]
 800aeb6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800aeb8:	893b      	ldrh	r3, [r7, #8]
 800aeba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aec2:	d104      	bne.n	800aece <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f240 4209 	movw	r2, #1033	; 0x409
 800aeca:	829a      	strh	r2, [r3, #20]
 800aecc:	e002      	b.n	800aed4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2200      	movs	r2, #0
 800aed2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	8b3a      	ldrh	r2, [r7, #24]
 800aed8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800aeda:	8b3b      	ldrh	r3, [r7, #24]
 800aedc:	461a      	mov	r2, r3
 800aede:	6879      	ldr	r1, [r7, #4]
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f000 fa50 	bl	800b386 <USBH_CtlReq>
 800aee6:	4603      	mov	r3, r0
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3710      	adds	r7, #16
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	460b      	mov	r3, r1
 800aefa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	789b      	ldrb	r3, [r3, #2]
 800af00:	2b01      	cmp	r3, #1
 800af02:	d10f      	bne.n	800af24 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2205      	movs	r2, #5
 800af0e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800af10:	78fb      	ldrb	r3, [r7, #3]
 800af12:	b29a      	uxth	r2, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800af24:	2200      	movs	r2, #0
 800af26:	2100      	movs	r1, #0
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 fa2c 	bl	800b386 <USBH_CtlReq>
 800af2e:	4603      	mov	r3, r0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	460b      	mov	r3, r1
 800af42:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	789b      	ldrb	r3, [r3, #2]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d10e      	bne.n	800af6a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2209      	movs	r2, #9
 800af56:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	887a      	ldrh	r2, [r7, #2]
 800af5c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800af6a:	2200      	movs	r2, #0
 800af6c:	2100      	movs	r1, #0
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 fa09 	bl	800b386 <USBH_CtlReq>
 800af74:	4603      	mov	r3, r0
}
 800af76:	4618      	mov	r0, r3
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b082      	sub	sp, #8
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
 800af86:	460b      	mov	r3, r1
 800af88:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	789b      	ldrb	r3, [r3, #2]
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d10f      	bne.n	800afb2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2203      	movs	r2, #3
 800af9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800af9e:	78fb      	ldrb	r3, [r7, #3]
 800afa0:	b29a      	uxth	r2, r3
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800afb2:	2200      	movs	r2, #0
 800afb4:	2100      	movs	r1, #0
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 f9e5 	bl	800b386 <USBH_CtlReq>
 800afbc:	4603      	mov	r3, r0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3708      	adds	r7, #8
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b082      	sub	sp, #8
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
 800afce:	460b      	mov	r3, r1
 800afd0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	789b      	ldrb	r3, [r3, #2]
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d10f      	bne.n	800affa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2202      	movs	r2, #2
 800afde:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2201      	movs	r2, #1
 800afe4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800afec:	78fb      	ldrb	r3, [r7, #3]
 800afee:	b29a      	uxth	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800affa:	2200      	movs	r2, #0
 800affc:	2100      	movs	r1, #0
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 f9c1 	bl	800b386 <USBH_CtlReq>
 800b004:	4603      	mov	r3, r0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3708      	adds	r7, #8
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b00e:	b480      	push	{r7}
 800b010:	b085      	sub	sp, #20
 800b012:	af00      	add	r7, sp, #0
 800b014:	60f8      	str	r0, [r7, #12]
 800b016:	60b9      	str	r1, [r7, #8]
 800b018:	4613      	mov	r3, r2
 800b01a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	781a      	ldrb	r2, [r3, #0]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	785a      	ldrb	r2, [r3, #1]
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	3302      	adds	r3, #2
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	b29a      	uxth	r2, r3
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	3303      	adds	r3, #3
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	021b      	lsls	r3, r3, #8
 800b03e:	b29b      	uxth	r3, r3
 800b040:	4313      	orrs	r3, r2
 800b042:	b29a      	uxth	r2, r3
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	791a      	ldrb	r2, [r3, #4]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	795a      	ldrb	r2, [r3, #5]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	799a      	ldrb	r2, [r3, #6]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	79da      	ldrb	r2, [r3, #7]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b068:	88fb      	ldrh	r3, [r7, #6]
 800b06a:	2b08      	cmp	r3, #8
 800b06c:	d939      	bls.n	800b0e2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	3308      	adds	r3, #8
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	b29a      	uxth	r2, r3
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	3309      	adds	r3, #9
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	021b      	lsls	r3, r3, #8
 800b080:	b29b      	uxth	r3, r3
 800b082:	4313      	orrs	r3, r2
 800b084:	b29a      	uxth	r2, r3
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	330a      	adds	r3, #10
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	b29a      	uxth	r2, r3
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	330b      	adds	r3, #11
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	b29b      	uxth	r3, r3
 800b09a:	021b      	lsls	r3, r3, #8
 800b09c:	b29b      	uxth	r3, r3
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	b29a      	uxth	r2, r3
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	330c      	adds	r3, #12
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	b29a      	uxth	r2, r3
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	330d      	adds	r3, #13
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	021b      	lsls	r3, r3, #8
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	7b9a      	ldrb	r2, [r3, #14]
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	7bda      	ldrb	r2, [r3, #15]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	7c1a      	ldrb	r2, [r3, #16]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	7c5a      	ldrb	r2, [r3, #17]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	745a      	strb	r2, [r3, #17]
  }
}
 800b0e2:	bf00      	nop
 800b0e4:	3714      	adds	r7, #20
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr

0800b0ee <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b08a      	sub	sp, #40	; 0x28
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	60f8      	str	r0, [r7, #12]
 800b0f6:	60b9      	str	r1, [r7, #8]
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b100:	2300      	movs	r3, #0
 800b102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b106:	2300      	movs	r3, #0
 800b108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	781a      	ldrb	r2, [r3, #0]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	785a      	ldrb	r2, [r3, #1]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	3302      	adds	r3, #2
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	b29a      	uxth	r2, r3
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	3303      	adds	r3, #3
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	b29b      	uxth	r3, r3
 800b130:	021b      	lsls	r3, r3, #8
 800b132:	b29b      	uxth	r3, r3
 800b134:	4313      	orrs	r3, r2
 800b136:	b29a      	uxth	r2, r3
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	791a      	ldrb	r2, [r3, #4]
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	795a      	ldrb	r2, [r3, #5]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	799a      	ldrb	r2, [r3, #6]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	79da      	ldrb	r2, [r3, #7]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	7a1a      	ldrb	r2, [r3, #8]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b164:	88fb      	ldrh	r3, [r7, #6]
 800b166:	2b09      	cmp	r3, #9
 800b168:	d95f      	bls.n	800b22a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b16a:	2309      	movs	r3, #9
 800b16c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b16e:	2300      	movs	r3, #0
 800b170:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b172:	e051      	b.n	800b218 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b174:	f107 0316 	add.w	r3, r7, #22
 800b178:	4619      	mov	r1, r3
 800b17a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b17c:	f000 f8e8 	bl	800b350 <USBH_GetNextDesc>
 800b180:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b184:	785b      	ldrb	r3, [r3, #1]
 800b186:	2b04      	cmp	r3, #4
 800b188:	d146      	bne.n	800b218 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b18a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b18e:	221a      	movs	r2, #26
 800b190:	fb02 f303 	mul.w	r3, r2, r3
 800b194:	3308      	adds	r3, #8
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	4413      	add	r3, r2
 800b19a:	3302      	adds	r3, #2
 800b19c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b19e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1a0:	69f8      	ldr	r0, [r7, #28]
 800b1a2:	f000 f846 	bl	800b232 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b1b0:	e022      	b.n	800b1f8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b1b2:	f107 0316 	add.w	r3, r7, #22
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1ba:	f000 f8c9 	bl	800b350 <USBH_GetNextDesc>
 800b1be:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c2:	785b      	ldrb	r3, [r3, #1]
 800b1c4:	2b05      	cmp	r3, #5
 800b1c6:	d117      	bne.n	800b1f8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b1c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1cc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b1d0:	3201      	adds	r2, #1
 800b1d2:	00d2      	lsls	r2, r2, #3
 800b1d4:	211a      	movs	r1, #26
 800b1d6:	fb01 f303 	mul.w	r3, r1, r3
 800b1da:	4413      	add	r3, r2
 800b1dc:	3308      	adds	r3, #8
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	3304      	adds	r3, #4
 800b1e4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b1e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1e8:	69b8      	ldr	r0, [r7, #24]
 800b1ea:	f000 f851 	bl	800b290 <USBH_ParseEPDesc>
            ep_ix++;
 800b1ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	791b      	ldrb	r3, [r3, #4]
 800b1fc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b200:	429a      	cmp	r2, r3
 800b202:	d204      	bcs.n	800b20e <USBH_ParseCfgDesc+0x120>
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	885a      	ldrh	r2, [r3, #2]
 800b208:	8afb      	ldrh	r3, [r7, #22]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d8d1      	bhi.n	800b1b2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b20e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b212:	3301      	adds	r3, #1
 800b214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b218:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d804      	bhi.n	800b22a <USBH_ParseCfgDesc+0x13c>
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	885a      	ldrh	r2, [r3, #2]
 800b224:	8afb      	ldrh	r3, [r7, #22]
 800b226:	429a      	cmp	r2, r3
 800b228:	d8a4      	bhi.n	800b174 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b22a:	bf00      	nop
 800b22c:	3728      	adds	r7, #40	; 0x28
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b232:	b480      	push	{r7}
 800b234:	b083      	sub	sp, #12
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
 800b23a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	781a      	ldrb	r2, [r3, #0]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	785a      	ldrb	r2, [r3, #1]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	789a      	ldrb	r2, [r3, #2]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	78da      	ldrb	r2, [r3, #3]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	791a      	ldrb	r2, [r3, #4]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	795a      	ldrb	r2, [r3, #5]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	799a      	ldrb	r2, [r3, #6]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	79da      	ldrb	r2, [r3, #7]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	7a1a      	ldrb	r2, [r3, #8]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	721a      	strb	r2, [r3, #8]
}
 800b284:	bf00      	nop
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	781a      	ldrb	r2, [r3, #0]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	785a      	ldrb	r2, [r3, #1]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	789a      	ldrb	r2, [r3, #2]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	78da      	ldrb	r2, [r3, #3]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	3304      	adds	r3, #4
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	3305      	adds	r3, #5
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	021b      	lsls	r3, r3, #8
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	b29a      	uxth	r2, r3
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	799a      	ldrb	r2, [r3, #6]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	719a      	strb	r2, [r3, #6]
}
 800b2de:	bf00      	nop
 800b2e0:	370c      	adds	r7, #12
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e8:	4770      	bx	lr

0800b2ea <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b2ea:	b480      	push	{r7}
 800b2ec:	b087      	sub	sp, #28
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	60f8      	str	r0, [r7, #12]
 800b2f2:	60b9      	str	r1, [r7, #8]
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	2b03      	cmp	r3, #3
 800b300:	d120      	bne.n	800b344 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	1e9a      	subs	r2, r3, #2
 800b308:	88fb      	ldrh	r3, [r7, #6]
 800b30a:	4293      	cmp	r3, r2
 800b30c:	bf28      	it	cs
 800b30e:	4613      	movcs	r3, r2
 800b310:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	3302      	adds	r3, #2
 800b316:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b318:	2300      	movs	r3, #0
 800b31a:	82fb      	strh	r3, [r7, #22]
 800b31c:	e00b      	b.n	800b336 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b31e:	8afb      	ldrh	r3, [r7, #22]
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	4413      	add	r3, r2
 800b324:	781a      	ldrb	r2, [r3, #0]
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	3301      	adds	r3, #1
 800b32e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b330:	8afb      	ldrh	r3, [r7, #22]
 800b332:	3302      	adds	r3, #2
 800b334:	82fb      	strh	r3, [r7, #22]
 800b336:	8afa      	ldrh	r2, [r7, #22]
 800b338:	8abb      	ldrh	r3, [r7, #20]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d3ef      	bcc.n	800b31e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	2200      	movs	r2, #0
 800b342:	701a      	strb	r2, [r3, #0]
  }
}
 800b344:	bf00      	nop
 800b346:	371c      	adds	r7, #28
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	881a      	ldrh	r2, [r3, #0]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	b29b      	uxth	r3, r3
 800b364:	4413      	add	r3, r2
 800b366:	b29a      	uxth	r2, r3
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4413      	add	r3, r2
 800b376:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b378:	68fb      	ldr	r3, [r7, #12]
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3714      	adds	r7, #20
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr

0800b386 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b086      	sub	sp, #24
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	60f8      	str	r0, [r7, #12]
 800b38e:	60b9      	str	r1, [r7, #8]
 800b390:	4613      	mov	r3, r2
 800b392:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b394:	2301      	movs	r3, #1
 800b396:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	789b      	ldrb	r3, [r3, #2]
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d002      	beq.n	800b3a6 <USBH_CtlReq+0x20>
 800b3a0:	2b02      	cmp	r3, #2
 800b3a2:	d00f      	beq.n	800b3c4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b3a4:	e027      	b.n	800b3f6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	68ba      	ldr	r2, [r7, #8]
 800b3aa:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	88fa      	ldrh	r2, [r7, #6]
 800b3b0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2202      	movs	r2, #2
 800b3bc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	75fb      	strb	r3, [r7, #23]
      break;
 800b3c2:	e018      	b.n	800b3f6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f000 f81b 	bl	800b400 <USBH_HandleControl>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b3ce:	7dfb      	ldrb	r3, [r7, #23]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d002      	beq.n	800b3da <USBH_CtlReq+0x54>
 800b3d4:	7dfb      	ldrb	r3, [r7, #23]
 800b3d6:	2b03      	cmp	r3, #3
 800b3d8:	d106      	bne.n	800b3e8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2201      	movs	r2, #1
 800b3de:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	761a      	strb	r2, [r3, #24]
      break;
 800b3e6:	e005      	b.n	800b3f4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b3e8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	d102      	bne.n	800b3f4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	709a      	strb	r2, [r3, #2]
      break;
 800b3f4:	bf00      	nop
  }
  return status;
 800b3f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3718      	adds	r7, #24
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b086      	sub	sp, #24
 800b404:	af02      	add	r7, sp, #8
 800b406:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b408:	2301      	movs	r3, #1
 800b40a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b40c:	2300      	movs	r3, #0
 800b40e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	7e1b      	ldrb	r3, [r3, #24]
 800b414:	3b01      	subs	r3, #1
 800b416:	2b0a      	cmp	r3, #10
 800b418:	f200 8158 	bhi.w	800b6cc <USBH_HandleControl+0x2cc>
 800b41c:	a201      	add	r2, pc, #4	; (adr r2, 800b424 <USBH_HandleControl+0x24>)
 800b41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b422:	bf00      	nop
 800b424:	0800b451 	.word	0x0800b451
 800b428:	0800b46b 	.word	0x0800b46b
 800b42c:	0800b4d5 	.word	0x0800b4d5
 800b430:	0800b4fb 	.word	0x0800b4fb
 800b434:	0800b533 	.word	0x0800b533
 800b438:	0800b55f 	.word	0x0800b55f
 800b43c:	0800b5b1 	.word	0x0800b5b1
 800b440:	0800b5d3 	.word	0x0800b5d3
 800b444:	0800b60f 	.word	0x0800b60f
 800b448:	0800b637 	.word	0x0800b637
 800b44c:	0800b675 	.word	0x0800b675
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f103 0110 	add.w	r1, r3, #16
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	795b      	ldrb	r3, [r3, #5]
 800b45a:	461a      	mov	r2, r3
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 f945 	bl	800b6ec <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2202      	movs	r2, #2
 800b466:	761a      	strb	r2, [r3, #24]
      break;
 800b468:	e13b      	b.n	800b6e2 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	795b      	ldrb	r3, [r3, #5]
 800b46e:	4619      	mov	r1, r3
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f002 ff25 	bl	800e2c0 <USBH_LL_GetURBState>
 800b476:	4603      	mov	r3, r0
 800b478:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b47a:	7bbb      	ldrb	r3, [r7, #14]
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d11e      	bne.n	800b4be <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	7c1b      	ldrb	r3, [r3, #16]
 800b484:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b488:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	8adb      	ldrh	r3, [r3, #22]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00a      	beq.n	800b4a8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b492:	7b7b      	ldrb	r3, [r7, #13]
 800b494:	2b80      	cmp	r3, #128	; 0x80
 800b496:	d103      	bne.n	800b4a0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2203      	movs	r2, #3
 800b49c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b49e:	e117      	b.n	800b6d0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2205      	movs	r2, #5
 800b4a4:	761a      	strb	r2, [r3, #24]
      break;
 800b4a6:	e113      	b.n	800b6d0 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800b4a8:	7b7b      	ldrb	r3, [r7, #13]
 800b4aa:	2b80      	cmp	r3, #128	; 0x80
 800b4ac:	d103      	bne.n	800b4b6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2209      	movs	r2, #9
 800b4b2:	761a      	strb	r2, [r3, #24]
      break;
 800b4b4:	e10c      	b.n	800b6d0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2207      	movs	r2, #7
 800b4ba:	761a      	strb	r2, [r3, #24]
      break;
 800b4bc:	e108      	b.n	800b6d0 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b4be:	7bbb      	ldrb	r3, [r7, #14]
 800b4c0:	2b04      	cmp	r3, #4
 800b4c2:	d003      	beq.n	800b4cc <USBH_HandleControl+0xcc>
 800b4c4:	7bbb      	ldrb	r3, [r7, #14]
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	f040 8102 	bne.w	800b6d0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	220b      	movs	r2, #11
 800b4d0:	761a      	strb	r2, [r3, #24]
      break;
 800b4d2:	e0fd      	b.n	800b6d0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b4da:	b29a      	uxth	r2, r3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6899      	ldr	r1, [r3, #8]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	899a      	ldrh	r2, [r3, #12]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	791b      	ldrb	r3, [r3, #4]
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f93c 	bl	800b76a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2204      	movs	r2, #4
 800b4f6:	761a      	strb	r2, [r3, #24]
      break;
 800b4f8:	e0f3      	b.n	800b6e2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	791b      	ldrb	r3, [r3, #4]
 800b4fe:	4619      	mov	r1, r3
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f002 fedd 	bl	800e2c0 <USBH_LL_GetURBState>
 800b506:	4603      	mov	r3, r0
 800b508:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b50a:	7bbb      	ldrb	r3, [r7, #14]
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d102      	bne.n	800b516 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2209      	movs	r2, #9
 800b514:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b516:	7bbb      	ldrb	r3, [r7, #14]
 800b518:	2b05      	cmp	r3, #5
 800b51a:	d102      	bne.n	800b522 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b51c:	2303      	movs	r3, #3
 800b51e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b520:	e0d8      	b.n	800b6d4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b522:	7bbb      	ldrb	r3, [r7, #14]
 800b524:	2b04      	cmp	r3, #4
 800b526:	f040 80d5 	bne.w	800b6d4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	220b      	movs	r2, #11
 800b52e:	761a      	strb	r2, [r3, #24]
      break;
 800b530:	e0d0      	b.n	800b6d4 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6899      	ldr	r1, [r3, #8]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	899a      	ldrh	r2, [r3, #12]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	7958      	ldrb	r0, [r3, #5]
 800b53e:	2301      	movs	r3, #1
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	4603      	mov	r3, r0
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 f8eb 	bl	800b720 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b550:	b29a      	uxth	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2206      	movs	r2, #6
 800b55a:	761a      	strb	r2, [r3, #24]
      break;
 800b55c:	e0c1      	b.n	800b6e2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	795b      	ldrb	r3, [r3, #5]
 800b562:	4619      	mov	r1, r3
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f002 feab 	bl	800e2c0 <USBH_LL_GetURBState>
 800b56a:	4603      	mov	r3, r0
 800b56c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b56e:	7bbb      	ldrb	r3, [r7, #14]
 800b570:	2b01      	cmp	r3, #1
 800b572:	d103      	bne.n	800b57c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2207      	movs	r2, #7
 800b578:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b57a:	e0ad      	b.n	800b6d8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800b57c:	7bbb      	ldrb	r3, [r7, #14]
 800b57e:	2b05      	cmp	r3, #5
 800b580:	d105      	bne.n	800b58e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	220c      	movs	r2, #12
 800b586:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b588:	2303      	movs	r3, #3
 800b58a:	73fb      	strb	r3, [r7, #15]
      break;
 800b58c:	e0a4      	b.n	800b6d8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b58e:	7bbb      	ldrb	r3, [r7, #14]
 800b590:	2b02      	cmp	r3, #2
 800b592:	d103      	bne.n	800b59c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2205      	movs	r2, #5
 800b598:	761a      	strb	r2, [r3, #24]
      break;
 800b59a:	e09d      	b.n	800b6d8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800b59c:	7bbb      	ldrb	r3, [r7, #14]
 800b59e:	2b04      	cmp	r3, #4
 800b5a0:	f040 809a 	bne.w	800b6d8 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	220b      	movs	r2, #11
 800b5a8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b5aa:	2302      	movs	r3, #2
 800b5ac:	73fb      	strb	r3, [r7, #15]
      break;
 800b5ae:	e093      	b.n	800b6d8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	791b      	ldrb	r3, [r3, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f8d6 	bl	800b76a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b5c4:	b29a      	uxth	r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2208      	movs	r2, #8
 800b5ce:	761a      	strb	r2, [r3, #24]

      break;
 800b5d0:	e087      	b.n	800b6e2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	791b      	ldrb	r3, [r3, #4]
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f002 fe71 	bl	800e2c0 <USBH_LL_GetURBState>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b5e2:	7bbb      	ldrb	r3, [r7, #14]
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d105      	bne.n	800b5f4 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	220d      	movs	r2, #13
 800b5ec:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b5f2:	e073      	b.n	800b6dc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800b5f4:	7bbb      	ldrb	r3, [r7, #14]
 800b5f6:	2b04      	cmp	r3, #4
 800b5f8:	d103      	bne.n	800b602 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	220b      	movs	r2, #11
 800b5fe:	761a      	strb	r2, [r3, #24]
      break;
 800b600:	e06c      	b.n	800b6dc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800b602:	7bbb      	ldrb	r3, [r7, #14]
 800b604:	2b05      	cmp	r3, #5
 800b606:	d169      	bne.n	800b6dc <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800b608:	2303      	movs	r3, #3
 800b60a:	73fb      	strb	r3, [r7, #15]
      break;
 800b60c:	e066      	b.n	800b6dc <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	795a      	ldrb	r2, [r3, #5]
 800b612:	2301      	movs	r3, #1
 800b614:	9300      	str	r3, [sp, #0]
 800b616:	4613      	mov	r3, r2
 800b618:	2200      	movs	r2, #0
 800b61a:	2100      	movs	r1, #0
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 f87f 	bl	800b720 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b628:	b29a      	uxth	r2, r3
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	220a      	movs	r2, #10
 800b632:	761a      	strb	r2, [r3, #24]
      break;
 800b634:	e055      	b.n	800b6e2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	795b      	ldrb	r3, [r3, #5]
 800b63a:	4619      	mov	r1, r3
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f002 fe3f 	bl	800e2c0 <USBH_LL_GetURBState>
 800b642:	4603      	mov	r3, r0
 800b644:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b646:	7bbb      	ldrb	r3, [r7, #14]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d105      	bne.n	800b658 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800b64c:	2300      	movs	r3, #0
 800b64e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	220d      	movs	r2, #13
 800b654:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b656:	e043      	b.n	800b6e0 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b658:	7bbb      	ldrb	r3, [r7, #14]
 800b65a:	2b02      	cmp	r3, #2
 800b65c:	d103      	bne.n	800b666 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2209      	movs	r2, #9
 800b662:	761a      	strb	r2, [r3, #24]
      break;
 800b664:	e03c      	b.n	800b6e0 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800b666:	7bbb      	ldrb	r3, [r7, #14]
 800b668:	2b04      	cmp	r3, #4
 800b66a:	d139      	bne.n	800b6e0 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	220b      	movs	r2, #11
 800b670:	761a      	strb	r2, [r3, #24]
      break;
 800b672:	e035      	b.n	800b6e0 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	7e5b      	ldrb	r3, [r3, #25]
 800b678:	3301      	adds	r3, #1
 800b67a:	b2da      	uxtb	r2, r3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	765a      	strb	r2, [r3, #25]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	7e5b      	ldrb	r3, [r3, #25]
 800b684:	2b02      	cmp	r3, #2
 800b686:	d806      	bhi.n	800b696 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2201      	movs	r2, #1
 800b68c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2201      	movs	r2, #1
 800b692:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b694:	e025      	b.n	800b6e2 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b69c:	2106      	movs	r1, #6
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	795b      	ldrb	r3, [r3, #5]
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 f90c 	bl	800b8cc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	791b      	ldrb	r3, [r3, #4]
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 f906 	bl	800b8cc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b6c6:	2302      	movs	r3, #2
 800b6c8:	73fb      	strb	r3, [r7, #15]
      break;
 800b6ca:	e00a      	b.n	800b6e2 <USBH_HandleControl+0x2e2>

    default:
      break;
 800b6cc:	bf00      	nop
 800b6ce:	e008      	b.n	800b6e2 <USBH_HandleControl+0x2e2>
      break;
 800b6d0:	bf00      	nop
 800b6d2:	e006      	b.n	800b6e2 <USBH_HandleControl+0x2e2>
      break;
 800b6d4:	bf00      	nop
 800b6d6:	e004      	b.n	800b6e2 <USBH_HandleControl+0x2e2>
      break;
 800b6d8:	bf00      	nop
 800b6da:	e002      	b.n	800b6e2 <USBH_HandleControl+0x2e2>
      break;
 800b6dc:	bf00      	nop
 800b6de:	e000      	b.n	800b6e2 <USBH_HandleControl+0x2e2>
      break;
 800b6e0:	bf00      	nop
  }

  return status;
 800b6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b088      	sub	sp, #32
 800b6f0:	af04      	add	r7, sp, #16
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b6fa:	79f9      	ldrb	r1, [r7, #7]
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	9303      	str	r3, [sp, #12]
 800b700:	2308      	movs	r3, #8
 800b702:	9302      	str	r3, [sp, #8]
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	9301      	str	r3, [sp, #4]
 800b708:	2300      	movs	r3, #0
 800b70a:	9300      	str	r3, [sp, #0]
 800b70c:	2300      	movs	r3, #0
 800b70e:	2200      	movs	r2, #0
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f002 fda4 	bl	800e25e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b716:	2300      	movs	r3, #0
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b088      	sub	sp, #32
 800b724:	af04      	add	r7, sp, #16
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	4611      	mov	r1, r2
 800b72c:	461a      	mov	r2, r3
 800b72e:	460b      	mov	r3, r1
 800b730:	80fb      	strh	r3, [r7, #6]
 800b732:	4613      	mov	r3, r2
 800b734:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d001      	beq.n	800b744 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b740:	2300      	movs	r3, #0
 800b742:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b744:	7979      	ldrb	r1, [r7, #5]
 800b746:	7e3b      	ldrb	r3, [r7, #24]
 800b748:	9303      	str	r3, [sp, #12]
 800b74a:	88fb      	ldrh	r3, [r7, #6]
 800b74c:	9302      	str	r3, [sp, #8]
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	9301      	str	r3, [sp, #4]
 800b752:	2301      	movs	r3, #1
 800b754:	9300      	str	r3, [sp, #0]
 800b756:	2300      	movs	r3, #0
 800b758:	2200      	movs	r2, #0
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f002 fd7f 	bl	800e25e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b760:	2300      	movs	r3, #0
}
 800b762:	4618      	mov	r0, r3
 800b764:	3710      	adds	r7, #16
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b088      	sub	sp, #32
 800b76e:	af04      	add	r7, sp, #16
 800b770:	60f8      	str	r0, [r7, #12]
 800b772:	60b9      	str	r1, [r7, #8]
 800b774:	4611      	mov	r1, r2
 800b776:	461a      	mov	r2, r3
 800b778:	460b      	mov	r3, r1
 800b77a:	80fb      	strh	r3, [r7, #6]
 800b77c:	4613      	mov	r3, r2
 800b77e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b780:	7979      	ldrb	r1, [r7, #5]
 800b782:	2300      	movs	r3, #0
 800b784:	9303      	str	r3, [sp, #12]
 800b786:	88fb      	ldrh	r3, [r7, #6]
 800b788:	9302      	str	r3, [sp, #8]
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	9301      	str	r3, [sp, #4]
 800b78e:	2301      	movs	r3, #1
 800b790:	9300      	str	r3, [sp, #0]
 800b792:	2300      	movs	r3, #0
 800b794:	2201      	movs	r2, #1
 800b796:	68f8      	ldr	r0, [r7, #12]
 800b798:	f002 fd61 	bl	800e25e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b79c:	2300      	movs	r3, #0

}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b088      	sub	sp, #32
 800b7aa:	af04      	add	r7, sp, #16
 800b7ac:	60f8      	str	r0, [r7, #12]
 800b7ae:	60b9      	str	r1, [r7, #8]
 800b7b0:	4611      	mov	r1, r2
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	80fb      	strh	r3, [r7, #6]
 800b7b8:	4613      	mov	r3, r2
 800b7ba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d001      	beq.n	800b7ca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b7ca:	7979      	ldrb	r1, [r7, #5]
 800b7cc:	7e3b      	ldrb	r3, [r7, #24]
 800b7ce:	9303      	str	r3, [sp, #12]
 800b7d0:	88fb      	ldrh	r3, [r7, #6]
 800b7d2:	9302      	str	r3, [sp, #8]
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	9301      	str	r3, [sp, #4]
 800b7d8:	2301      	movs	r3, #1
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	2302      	movs	r3, #2
 800b7de:	2200      	movs	r2, #0
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f002 fd3c 	bl	800e25e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b7e6:	2300      	movs	r3, #0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b088      	sub	sp, #32
 800b7f4:	af04      	add	r7, sp, #16
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	4611      	mov	r1, r2
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	460b      	mov	r3, r1
 800b800:	80fb      	strh	r3, [r7, #6]
 800b802:	4613      	mov	r3, r2
 800b804:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b806:	7979      	ldrb	r1, [r7, #5]
 800b808:	2300      	movs	r3, #0
 800b80a:	9303      	str	r3, [sp, #12]
 800b80c:	88fb      	ldrh	r3, [r7, #6]
 800b80e:	9302      	str	r3, [sp, #8]
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	9301      	str	r3, [sp, #4]
 800b814:	2301      	movs	r3, #1
 800b816:	9300      	str	r3, [sp, #0]
 800b818:	2302      	movs	r3, #2
 800b81a:	2201      	movs	r2, #1
 800b81c:	68f8      	ldr	r0, [r7, #12]
 800b81e:	f002 fd1e 	bl	800e25e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b822:	2300      	movs	r3, #0
}
 800b824:	4618      	mov	r0, r3
 800b826:	3710      	adds	r7, #16
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b086      	sub	sp, #24
 800b830:	af04      	add	r7, sp, #16
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	4608      	mov	r0, r1
 800b836:	4611      	mov	r1, r2
 800b838:	461a      	mov	r2, r3
 800b83a:	4603      	mov	r3, r0
 800b83c:	70fb      	strb	r3, [r7, #3]
 800b83e:	460b      	mov	r3, r1
 800b840:	70bb      	strb	r3, [r7, #2]
 800b842:	4613      	mov	r3, r2
 800b844:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b846:	7878      	ldrb	r0, [r7, #1]
 800b848:	78ba      	ldrb	r2, [r7, #2]
 800b84a:	78f9      	ldrb	r1, [r7, #3]
 800b84c:	8b3b      	ldrh	r3, [r7, #24]
 800b84e:	9302      	str	r3, [sp, #8]
 800b850:	7d3b      	ldrb	r3, [r7, #20]
 800b852:	9301      	str	r3, [sp, #4]
 800b854:	7c3b      	ldrb	r3, [r7, #16]
 800b856:	9300      	str	r3, [sp, #0]
 800b858:	4603      	mov	r3, r0
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f002 fcb1 	bl	800e1c2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b860:	2300      	movs	r3, #0
}
 800b862:	4618      	mov	r0, r3
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}

0800b86a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b082      	sub	sp, #8
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	460b      	mov	r3, r1
 800b874:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b876:	78fb      	ldrb	r3, [r7, #3]
 800b878:	4619      	mov	r1, r3
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f002 fcd0 	bl	800e220 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b880:	2300      	movs	r3, #0
}
 800b882:	4618      	mov	r0, r3
 800b884:	3708      	adds	r7, #8
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b88a:	b580      	push	{r7, lr}
 800b88c:	b084      	sub	sp, #16
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
 800b892:	460b      	mov	r3, r1
 800b894:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 f836 	bl	800b908 <USBH_GetFreePipe>
 800b89c:	4603      	mov	r3, r0
 800b89e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b8a0:	89fb      	ldrh	r3, [r7, #14]
 800b8a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d00a      	beq.n	800b8c0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b8aa:	78fa      	ldrb	r2, [r7, #3]
 800b8ac:	89fb      	ldrh	r3, [r7, #14]
 800b8ae:	f003 030f 	and.w	r3, r3, #15
 800b8b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b8b6:	6879      	ldr	r1, [r7, #4]
 800b8b8:	33e0      	adds	r3, #224	; 0xe0
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	440b      	add	r3, r1
 800b8be:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b8c0:	89fb      	ldrh	r3, [r7, #14]
 800b8c2:	b2db      	uxtb	r3, r3
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3710      	adds	r7, #16
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b8d8:	78fb      	ldrb	r3, [r7, #3]
 800b8da:	2b0a      	cmp	r3, #10
 800b8dc:	d80d      	bhi.n	800b8fa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b8de:	78fb      	ldrb	r3, [r7, #3]
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	33e0      	adds	r3, #224	; 0xe0
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	4413      	add	r3, r2
 800b8e8:	685a      	ldr	r2, [r3, #4]
 800b8ea:	78fb      	ldrb	r3, [r7, #3]
 800b8ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b8f0:	6879      	ldr	r1, [r7, #4]
 800b8f2:	33e0      	adds	r3, #224	; 0xe0
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	440b      	add	r3, r1
 800b8f8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b8fa:	2300      	movs	r3, #0
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	370c      	adds	r7, #12
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b910:	2300      	movs	r3, #0
 800b912:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b914:	2300      	movs	r3, #0
 800b916:	73fb      	strb	r3, [r7, #15]
 800b918:	e00f      	b.n	800b93a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b91a:	7bfb      	ldrb	r3, [r7, #15]
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	33e0      	adds	r3, #224	; 0xe0
 800b920:	009b      	lsls	r3, r3, #2
 800b922:	4413      	add	r3, r2
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d102      	bne.n	800b934 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b92e:	7bfb      	ldrb	r3, [r7, #15]
 800b930:	b29b      	uxth	r3, r3
 800b932:	e007      	b.n	800b944 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b934:	7bfb      	ldrb	r3, [r7, #15]
 800b936:	3301      	adds	r3, #1
 800b938:	73fb      	strb	r3, [r7, #15]
 800b93a:	7bfb      	ldrb	r3, [r7, #15]
 800b93c:	2b0a      	cmp	r3, #10
 800b93e:	d9ec      	bls.n	800b91a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b940:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b944:	4618      	mov	r0, r3
 800b946:	3714      	adds	r7, #20
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	4603      	mov	r3, r0
 800b958:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b95a:	79fb      	ldrb	r3, [r7, #7]
 800b95c:	4a08      	ldr	r2, [pc, #32]	; (800b980 <disk_status+0x30>)
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	4413      	add	r3, r2
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	79fa      	ldrb	r2, [r7, #7]
 800b968:	4905      	ldr	r1, [pc, #20]	; (800b980 <disk_status+0x30>)
 800b96a:	440a      	add	r2, r1
 800b96c:	7a12      	ldrb	r2, [r2, #8]
 800b96e:	4610      	mov	r0, r2
 800b970:	4798      	blx	r3
 800b972:	4603      	mov	r3, r0
 800b974:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b976:	7bfb      	ldrb	r3, [r7, #15]
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3710      	adds	r7, #16
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	240008e8 	.word	0x240008e8

0800b984 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	4603      	mov	r3, r0
 800b98c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b98e:	2300      	movs	r3, #0
 800b990:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b992:	79fb      	ldrb	r3, [r7, #7]
 800b994:	4a0d      	ldr	r2, [pc, #52]	; (800b9cc <disk_initialize+0x48>)
 800b996:	5cd3      	ldrb	r3, [r2, r3]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d111      	bne.n	800b9c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b99c:	79fb      	ldrb	r3, [r7, #7]
 800b99e:	4a0b      	ldr	r2, [pc, #44]	; (800b9cc <disk_initialize+0x48>)
 800b9a0:	2101      	movs	r1, #1
 800b9a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b9a4:	79fb      	ldrb	r3, [r7, #7]
 800b9a6:	4a09      	ldr	r2, [pc, #36]	; (800b9cc <disk_initialize+0x48>)
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	4413      	add	r3, r2
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	79fa      	ldrb	r2, [r7, #7]
 800b9b2:	4906      	ldr	r1, [pc, #24]	; (800b9cc <disk_initialize+0x48>)
 800b9b4:	440a      	add	r2, r1
 800b9b6:	7a12      	ldrb	r2, [r2, #8]
 800b9b8:	4610      	mov	r0, r2
 800b9ba:	4798      	blx	r3
 800b9bc:	4603      	mov	r3, r0
 800b9be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3710      	adds	r7, #16
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	240008e8 	.word	0x240008e8

0800b9d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b9d0:	b590      	push	{r4, r7, lr}
 800b9d2:	b087      	sub	sp, #28
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60b9      	str	r1, [r7, #8]
 800b9d8:	607a      	str	r2, [r7, #4]
 800b9da:	603b      	str	r3, [r7, #0]
 800b9dc:	4603      	mov	r3, r0
 800b9de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b9e0:	7bfb      	ldrb	r3, [r7, #15]
 800b9e2:	4a0a      	ldr	r2, [pc, #40]	; (800ba0c <disk_read+0x3c>)
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	4413      	add	r3, r2
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	689c      	ldr	r4, [r3, #8]
 800b9ec:	7bfb      	ldrb	r3, [r7, #15]
 800b9ee:	4a07      	ldr	r2, [pc, #28]	; (800ba0c <disk_read+0x3c>)
 800b9f0:	4413      	add	r3, r2
 800b9f2:	7a18      	ldrb	r0, [r3, #8]
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	68b9      	ldr	r1, [r7, #8]
 800b9fa:	47a0      	blx	r4
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800ba00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	371c      	adds	r7, #28
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd90      	pop	{r4, r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	240008e8 	.word	0x240008e8

0800ba10 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ba10:	b590      	push	{r4, r7, lr}
 800ba12:	b087      	sub	sp, #28
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60b9      	str	r1, [r7, #8]
 800ba18:	607a      	str	r2, [r7, #4]
 800ba1a:	603b      	str	r3, [r7, #0]
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ba20:	7bfb      	ldrb	r3, [r7, #15]
 800ba22:	4a0a      	ldr	r2, [pc, #40]	; (800ba4c <disk_write+0x3c>)
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	4413      	add	r3, r2
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	68dc      	ldr	r4, [r3, #12]
 800ba2c:	7bfb      	ldrb	r3, [r7, #15]
 800ba2e:	4a07      	ldr	r2, [pc, #28]	; (800ba4c <disk_write+0x3c>)
 800ba30:	4413      	add	r3, r2
 800ba32:	7a18      	ldrb	r0, [r3, #8]
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	68b9      	ldr	r1, [r7, #8]
 800ba3a:	47a0      	blx	r4
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	75fb      	strb	r3, [r7, #23]
  return res;
 800ba40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	371c      	adds	r7, #28
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd90      	pop	{r4, r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	240008e8 	.word	0x240008e8

0800ba50 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b084      	sub	sp, #16
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	4603      	mov	r3, r0
 800ba58:	603a      	str	r2, [r7, #0]
 800ba5a:	71fb      	strb	r3, [r7, #7]
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ba60:	79fb      	ldrb	r3, [r7, #7]
 800ba62:	4a09      	ldr	r2, [pc, #36]	; (800ba88 <disk_ioctl+0x38>)
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	4413      	add	r3, r2
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	691b      	ldr	r3, [r3, #16]
 800ba6c:	79fa      	ldrb	r2, [r7, #7]
 800ba6e:	4906      	ldr	r1, [pc, #24]	; (800ba88 <disk_ioctl+0x38>)
 800ba70:	440a      	add	r2, r1
 800ba72:	7a10      	ldrb	r0, [r2, #8]
 800ba74:	79b9      	ldrb	r1, [r7, #6]
 800ba76:	683a      	ldr	r2, [r7, #0]
 800ba78:	4798      	blx	r3
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	73fb      	strb	r3, [r7, #15]
  return res;
 800ba7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3710      	adds	r7, #16
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	240008e8 	.word	0x240008e8

0800ba8c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b085      	sub	sp, #20
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	3301      	adds	r3, #1
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ba9c:	89fb      	ldrh	r3, [r7, #14]
 800ba9e:	021b      	lsls	r3, r3, #8
 800baa0:	b21a      	sxth	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	b21b      	sxth	r3, r3
 800baa8:	4313      	orrs	r3, r2
 800baaa:	b21b      	sxth	r3, r3
 800baac:	81fb      	strh	r3, [r7, #14]
	return rv;
 800baae:	89fb      	ldrh	r3, [r7, #14]
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3714      	adds	r7, #20
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800babc:	b480      	push	{r7}
 800babe:	b085      	sub	sp, #20
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	3303      	adds	r3, #3
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	021b      	lsls	r3, r3, #8
 800bad0:	687a      	ldr	r2, [r7, #4]
 800bad2:	3202      	adds	r2, #2
 800bad4:	7812      	ldrb	r2, [r2, #0]
 800bad6:	4313      	orrs	r3, r2
 800bad8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	021b      	lsls	r3, r3, #8
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	3201      	adds	r2, #1
 800bae2:	7812      	ldrb	r2, [r2, #0]
 800bae4:	4313      	orrs	r3, r2
 800bae6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	021b      	lsls	r3, r3, #8
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	7812      	ldrb	r2, [r2, #0]
 800baf0:	4313      	orrs	r3, r2
 800baf2:	60fb      	str	r3, [r7, #12]
	return rv;
 800baf4:	68fb      	ldr	r3, [r7, #12]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3714      	adds	r7, #20
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr

0800bb02 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bb02:	b480      	push	{r7}
 800bb04:	b083      	sub	sp, #12
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	1c5a      	adds	r2, r3, #1
 800bb12:	607a      	str	r2, [r7, #4]
 800bb14:	887a      	ldrh	r2, [r7, #2]
 800bb16:	b2d2      	uxtb	r2, r2
 800bb18:	701a      	strb	r2, [r3, #0]
 800bb1a:	887b      	ldrh	r3, [r7, #2]
 800bb1c:	0a1b      	lsrs	r3, r3, #8
 800bb1e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	1c5a      	adds	r2, r3, #1
 800bb24:	607a      	str	r2, [r7, #4]
 800bb26:	887a      	ldrh	r2, [r7, #2]
 800bb28:	b2d2      	uxtb	r2, r2
 800bb2a:	701a      	strb	r2, [r3, #0]
}
 800bb2c:	bf00      	nop
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b083      	sub	sp, #12
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	1c5a      	adds	r2, r3, #1
 800bb46:	607a      	str	r2, [r7, #4]
 800bb48:	683a      	ldr	r2, [r7, #0]
 800bb4a:	b2d2      	uxtb	r2, r2
 800bb4c:	701a      	strb	r2, [r3, #0]
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	0a1b      	lsrs	r3, r3, #8
 800bb52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	1c5a      	adds	r2, r3, #1
 800bb58:	607a      	str	r2, [r7, #4]
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	b2d2      	uxtb	r2, r2
 800bb5e:	701a      	strb	r2, [r3, #0]
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	0a1b      	lsrs	r3, r3, #8
 800bb64:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	1c5a      	adds	r2, r3, #1
 800bb6a:	607a      	str	r2, [r7, #4]
 800bb6c:	683a      	ldr	r2, [r7, #0]
 800bb6e:	b2d2      	uxtb	r2, r2
 800bb70:	701a      	strb	r2, [r3, #0]
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	0a1b      	lsrs	r3, r3, #8
 800bb76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	1c5a      	adds	r2, r3, #1
 800bb7c:	607a      	str	r2, [r7, #4]
 800bb7e:	683a      	ldr	r2, [r7, #0]
 800bb80:	b2d2      	uxtb	r2, r2
 800bb82:	701a      	strb	r2, [r3, #0]
}
 800bb84:	bf00      	nop
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bb90:	b480      	push	{r7}
 800bb92:	b087      	sub	sp, #28
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00d      	beq.n	800bbc6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bbaa:	693a      	ldr	r2, [r7, #16]
 800bbac:	1c53      	adds	r3, r2, #1
 800bbae:	613b      	str	r3, [r7, #16]
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	1c59      	adds	r1, r3, #1
 800bbb4:	6179      	str	r1, [r7, #20]
 800bbb6:	7812      	ldrb	r2, [r2, #0]
 800bbb8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	607b      	str	r3, [r7, #4]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d1f1      	bne.n	800bbaa <mem_cpy+0x1a>
	}
}
 800bbc6:	bf00      	nop
 800bbc8:	371c      	adds	r7, #28
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr

0800bbd2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bbd2:	b480      	push	{r7}
 800bbd4:	b087      	sub	sp, #28
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	60f8      	str	r0, [r7, #12]
 800bbda:	60b9      	str	r1, [r7, #8]
 800bbdc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	1c5a      	adds	r2, r3, #1
 800bbe6:	617a      	str	r2, [r7, #20]
 800bbe8:	68ba      	ldr	r2, [r7, #8]
 800bbea:	b2d2      	uxtb	r2, r2
 800bbec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	3b01      	subs	r3, #1
 800bbf2:	607b      	str	r3, [r7, #4]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d1f3      	bne.n	800bbe2 <mem_set+0x10>
}
 800bbfa:	bf00      	nop
 800bbfc:	371c      	adds	r7, #28
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr

0800bc06 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bc06:	b480      	push	{r7}
 800bc08:	b089      	sub	sp, #36	; 0x24
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	60f8      	str	r0, [r7, #12]
 800bc0e:	60b9      	str	r1, [r7, #8]
 800bc10:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	61fb      	str	r3, [r7, #28]
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bc1e:	69fb      	ldr	r3, [r7, #28]
 800bc20:	1c5a      	adds	r2, r3, #1
 800bc22:	61fa      	str	r2, [r7, #28]
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	4619      	mov	r1, r3
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	1c5a      	adds	r2, r3, #1
 800bc2c:	61ba      	str	r2, [r7, #24]
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	1acb      	subs	r3, r1, r3
 800bc32:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	3b01      	subs	r3, #1
 800bc38:	607b      	str	r3, [r7, #4]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d002      	beq.n	800bc46 <mem_cmp+0x40>
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d0eb      	beq.n	800bc1e <mem_cmp+0x18>

	return r;
 800bc46:	697b      	ldr	r3, [r7, #20]
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3724      	adds	r7, #36	; 0x24
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bc5e:	e002      	b.n	800bc66 <chk_chr+0x12>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	3301      	adds	r3, #1
 800bc64:	607b      	str	r3, [r7, #4]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d005      	beq.n	800bc7a <chk_chr+0x26>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	461a      	mov	r2, r3
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d1f2      	bne.n	800bc60 <chk_chr+0xc>
	return *str;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	781b      	ldrb	r3, [r3, #0]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	370c      	adds	r7, #12
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr
	...

0800bc8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bc96:	2300      	movs	r3, #0
 800bc98:	60bb      	str	r3, [r7, #8]
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	60fb      	str	r3, [r7, #12]
 800bc9e:	e029      	b.n	800bcf4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bca0:	4a27      	ldr	r2, [pc, #156]	; (800bd40 <chk_lock+0xb4>)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	011b      	lsls	r3, r3, #4
 800bca6:	4413      	add	r3, r2
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d01d      	beq.n	800bcea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bcae:	4a24      	ldr	r2, [pc, #144]	; (800bd40 <chk_lock+0xb4>)
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	011b      	lsls	r3, r3, #4
 800bcb4:	4413      	add	r3, r2
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d116      	bne.n	800bcee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bcc0:	4a1f      	ldr	r2, [pc, #124]	; (800bd40 <chk_lock+0xb4>)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	011b      	lsls	r3, r3, #4
 800bcc6:	4413      	add	r3, r2
 800bcc8:	3304      	adds	r3, #4
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d10c      	bne.n	800bcee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bcd4:	4a1a      	ldr	r2, [pc, #104]	; (800bd40 <chk_lock+0xb4>)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	011b      	lsls	r3, r3, #4
 800bcda:	4413      	add	r3, r2
 800bcdc:	3308      	adds	r3, #8
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d102      	bne.n	800bcee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bce8:	e007      	b.n	800bcfa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bcea:	2301      	movs	r3, #1
 800bcec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	60fb      	str	r3, [r7, #12]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d9d2      	bls.n	800bca0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	d109      	bne.n	800bd14 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d102      	bne.n	800bd0c <chk_lock+0x80>
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	2b02      	cmp	r3, #2
 800bd0a:	d101      	bne.n	800bd10 <chk_lock+0x84>
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	e010      	b.n	800bd32 <chk_lock+0xa6>
 800bd10:	2312      	movs	r3, #18
 800bd12:	e00e      	b.n	800bd32 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d108      	bne.n	800bd2c <chk_lock+0xa0>
 800bd1a:	4a09      	ldr	r2, [pc, #36]	; (800bd40 <chk_lock+0xb4>)
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	011b      	lsls	r3, r3, #4
 800bd20:	4413      	add	r3, r2
 800bd22:	330c      	adds	r3, #12
 800bd24:	881b      	ldrh	r3, [r3, #0]
 800bd26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd2a:	d101      	bne.n	800bd30 <chk_lock+0xa4>
 800bd2c:	2310      	movs	r3, #16
 800bd2e:	e000      	b.n	800bd32 <chk_lock+0xa6>
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3714      	adds	r7, #20
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr
 800bd3e:	bf00      	nop
 800bd40:	240008c8 	.word	0x240008c8

0800bd44 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	607b      	str	r3, [r7, #4]
 800bd4e:	e002      	b.n	800bd56 <enq_lock+0x12>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	3301      	adds	r3, #1
 800bd54:	607b      	str	r3, [r7, #4]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d806      	bhi.n	800bd6a <enq_lock+0x26>
 800bd5c:	4a09      	ldr	r2, [pc, #36]	; (800bd84 <enq_lock+0x40>)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	011b      	lsls	r3, r3, #4
 800bd62:	4413      	add	r3, r2
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d1f2      	bne.n	800bd50 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2b02      	cmp	r3, #2
 800bd6e:	bf14      	ite	ne
 800bd70:	2301      	movne	r3, #1
 800bd72:	2300      	moveq	r3, #0
 800bd74:	b2db      	uxtb	r3, r3
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	370c      	adds	r7, #12
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	240008c8 	.word	0x240008c8

0800bd88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bd92:	2300      	movs	r3, #0
 800bd94:	60fb      	str	r3, [r7, #12]
 800bd96:	e01f      	b.n	800bdd8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bd98:	4a41      	ldr	r2, [pc, #260]	; (800bea0 <inc_lock+0x118>)
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	011b      	lsls	r3, r3, #4
 800bd9e:	4413      	add	r3, r2
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d113      	bne.n	800bdd2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bdaa:	4a3d      	ldr	r2, [pc, #244]	; (800bea0 <inc_lock+0x118>)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	011b      	lsls	r3, r3, #4
 800bdb0:	4413      	add	r3, r2
 800bdb2:	3304      	adds	r3, #4
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d109      	bne.n	800bdd2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bdbe:	4a38      	ldr	r2, [pc, #224]	; (800bea0 <inc_lock+0x118>)
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	011b      	lsls	r3, r3, #4
 800bdc4:	4413      	add	r3, r2
 800bdc6:	3308      	adds	r3, #8
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d006      	beq.n	800bde0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	60fb      	str	r3, [r7, #12]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d9dc      	bls.n	800bd98 <inc_lock+0x10>
 800bdde:	e000      	b.n	800bde2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bde0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2b02      	cmp	r3, #2
 800bde6:	d132      	bne.n	800be4e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bde8:	2300      	movs	r3, #0
 800bdea:	60fb      	str	r3, [r7, #12]
 800bdec:	e002      	b.n	800bdf4 <inc_lock+0x6c>
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	60fb      	str	r3, [r7, #12]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d806      	bhi.n	800be08 <inc_lock+0x80>
 800bdfa:	4a29      	ldr	r2, [pc, #164]	; (800bea0 <inc_lock+0x118>)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	011b      	lsls	r3, r3, #4
 800be00:	4413      	add	r3, r2
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d1f2      	bne.n	800bdee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2b02      	cmp	r3, #2
 800be0c:	d101      	bne.n	800be12 <inc_lock+0x8a>
 800be0e:	2300      	movs	r3, #0
 800be10:	e040      	b.n	800be94 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681a      	ldr	r2, [r3, #0]
 800be16:	4922      	ldr	r1, [pc, #136]	; (800bea0 <inc_lock+0x118>)
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	011b      	lsls	r3, r3, #4
 800be1c:	440b      	add	r3, r1
 800be1e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	689a      	ldr	r2, [r3, #8]
 800be24:	491e      	ldr	r1, [pc, #120]	; (800bea0 <inc_lock+0x118>)
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	011b      	lsls	r3, r3, #4
 800be2a:	440b      	add	r3, r1
 800be2c:	3304      	adds	r3, #4
 800be2e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	695a      	ldr	r2, [r3, #20]
 800be34:	491a      	ldr	r1, [pc, #104]	; (800bea0 <inc_lock+0x118>)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	011b      	lsls	r3, r3, #4
 800be3a:	440b      	add	r3, r1
 800be3c:	3308      	adds	r3, #8
 800be3e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800be40:	4a17      	ldr	r2, [pc, #92]	; (800bea0 <inc_lock+0x118>)
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	011b      	lsls	r3, r3, #4
 800be46:	4413      	add	r3, r2
 800be48:	330c      	adds	r3, #12
 800be4a:	2200      	movs	r2, #0
 800be4c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d009      	beq.n	800be68 <inc_lock+0xe0>
 800be54:	4a12      	ldr	r2, [pc, #72]	; (800bea0 <inc_lock+0x118>)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	011b      	lsls	r3, r3, #4
 800be5a:	4413      	add	r3, r2
 800be5c:	330c      	adds	r3, #12
 800be5e:	881b      	ldrh	r3, [r3, #0]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d001      	beq.n	800be68 <inc_lock+0xe0>
 800be64:	2300      	movs	r3, #0
 800be66:	e015      	b.n	800be94 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d108      	bne.n	800be80 <inc_lock+0xf8>
 800be6e:	4a0c      	ldr	r2, [pc, #48]	; (800bea0 <inc_lock+0x118>)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	011b      	lsls	r3, r3, #4
 800be74:	4413      	add	r3, r2
 800be76:	330c      	adds	r3, #12
 800be78:	881b      	ldrh	r3, [r3, #0]
 800be7a:	3301      	adds	r3, #1
 800be7c:	b29a      	uxth	r2, r3
 800be7e:	e001      	b.n	800be84 <inc_lock+0xfc>
 800be80:	f44f 7280 	mov.w	r2, #256	; 0x100
 800be84:	4906      	ldr	r1, [pc, #24]	; (800bea0 <inc_lock+0x118>)
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	011b      	lsls	r3, r3, #4
 800be8a:	440b      	add	r3, r1
 800be8c:	330c      	adds	r3, #12
 800be8e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	3301      	adds	r3, #1
}
 800be94:	4618      	mov	r0, r3
 800be96:	3714      	adds	r7, #20
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr
 800bea0:	240008c8 	.word	0x240008c8

0800bea4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b085      	sub	sp, #20
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	3b01      	subs	r3, #1
 800beb0:	607b      	str	r3, [r7, #4]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d825      	bhi.n	800bf04 <dec_lock+0x60>
		n = Files[i].ctr;
 800beb8:	4a17      	ldr	r2, [pc, #92]	; (800bf18 <dec_lock+0x74>)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	011b      	lsls	r3, r3, #4
 800bebe:	4413      	add	r3, r2
 800bec0:	330c      	adds	r3, #12
 800bec2:	881b      	ldrh	r3, [r3, #0]
 800bec4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bec6:	89fb      	ldrh	r3, [r7, #14]
 800bec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800becc:	d101      	bne.n	800bed2 <dec_lock+0x2e>
 800bece:	2300      	movs	r3, #0
 800bed0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bed2:	89fb      	ldrh	r3, [r7, #14]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d002      	beq.n	800bede <dec_lock+0x3a>
 800bed8:	89fb      	ldrh	r3, [r7, #14]
 800beda:	3b01      	subs	r3, #1
 800bedc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bede:	4a0e      	ldr	r2, [pc, #56]	; (800bf18 <dec_lock+0x74>)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	011b      	lsls	r3, r3, #4
 800bee4:	4413      	add	r3, r2
 800bee6:	330c      	adds	r3, #12
 800bee8:	89fa      	ldrh	r2, [r7, #14]
 800beea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800beec:	89fb      	ldrh	r3, [r7, #14]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d105      	bne.n	800befe <dec_lock+0x5a>
 800bef2:	4a09      	ldr	r2, [pc, #36]	; (800bf18 <dec_lock+0x74>)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	011b      	lsls	r3, r3, #4
 800bef8:	4413      	add	r3, r2
 800befa:	2200      	movs	r2, #0
 800befc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800befe:	2300      	movs	r3, #0
 800bf00:	737b      	strb	r3, [r7, #13]
 800bf02:	e001      	b.n	800bf08 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bf04:	2302      	movs	r3, #2
 800bf06:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bf08:	7b7b      	ldrb	r3, [r7, #13]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3714      	adds	r7, #20
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr
 800bf16:	bf00      	nop
 800bf18:	240008c8 	.word	0x240008c8

0800bf1c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b085      	sub	sp, #20
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bf24:	2300      	movs	r3, #0
 800bf26:	60fb      	str	r3, [r7, #12]
 800bf28:	e010      	b.n	800bf4c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bf2a:	4a0d      	ldr	r2, [pc, #52]	; (800bf60 <clear_lock+0x44>)
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	011b      	lsls	r3, r3, #4
 800bf30:	4413      	add	r3, r2
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d105      	bne.n	800bf46 <clear_lock+0x2a>
 800bf3a:	4a09      	ldr	r2, [pc, #36]	; (800bf60 <clear_lock+0x44>)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	011b      	lsls	r3, r3, #4
 800bf40:	4413      	add	r3, r2
 800bf42:	2200      	movs	r2, #0
 800bf44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	60fb      	str	r3, [r7, #12]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d9eb      	bls.n	800bf2a <clear_lock+0xe>
	}
}
 800bf52:	bf00      	nop
 800bf54:	3714      	adds	r7, #20
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop
 800bf60:	240008c8 	.word	0x240008c8

0800bf64 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b086      	sub	sp, #24
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	78db      	ldrb	r3, [r3, #3]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d034      	beq.n	800bfe2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	7858      	ldrb	r0, [r3, #1]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf88:	2301      	movs	r3, #1
 800bf8a:	697a      	ldr	r2, [r7, #20]
 800bf8c:	f7ff fd40 	bl	800ba10 <disk_write>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d002      	beq.n	800bf9c <sync_window+0x38>
			res = FR_DISK_ERR;
 800bf96:	2301      	movs	r3, #1
 800bf98:	73fb      	strb	r3, [r7, #15]
 800bf9a:	e022      	b.n	800bfe2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a1b      	ldr	r3, [r3, #32]
 800bfa6:	697a      	ldr	r2, [r7, #20]
 800bfa8:	1ad2      	subs	r2, r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	699b      	ldr	r3, [r3, #24]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d217      	bcs.n	800bfe2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	789b      	ldrb	r3, [r3, #2]
 800bfb6:	613b      	str	r3, [r7, #16]
 800bfb8:	e010      	b.n	800bfdc <sync_window+0x78>
					wsect += fs->fsize;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	699b      	ldr	r3, [r3, #24]
 800bfbe:	697a      	ldr	r2, [r7, #20]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	7858      	ldrb	r0, [r3, #1]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bfce:	2301      	movs	r3, #1
 800bfd0:	697a      	ldr	r2, [r7, #20]
 800bfd2:	f7ff fd1d 	bl	800ba10 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	3b01      	subs	r3, #1
 800bfda:	613b      	str	r3, [r7, #16]
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d8eb      	bhi.n	800bfba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bfe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3718      	adds	r7, #24
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bff6:	2300      	movs	r3, #0
 800bff8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bffe:	683a      	ldr	r2, [r7, #0]
 800c000:	429a      	cmp	r2, r3
 800c002:	d01b      	beq.n	800c03c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f7ff ffad 	bl	800bf64 <sync_window>
 800c00a:	4603      	mov	r3, r0
 800c00c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c00e:	7bfb      	ldrb	r3, [r7, #15]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d113      	bne.n	800c03c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	7858      	ldrb	r0, [r3, #1]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c01e:	2301      	movs	r3, #1
 800c020:	683a      	ldr	r2, [r7, #0]
 800c022:	f7ff fcd5 	bl	800b9d0 <disk_read>
 800c026:	4603      	mov	r3, r0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d004      	beq.n	800c036 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c02c:	f04f 33ff 	mov.w	r3, #4294967295
 800c030:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c032:	2301      	movs	r3, #1
 800c034:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	683a      	ldr	r2, [r7, #0]
 800c03a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800c03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
	...

0800c048 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b084      	sub	sp, #16
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f7ff ff87 	bl	800bf64 <sync_window>
 800c056:	4603      	mov	r3, r0
 800c058:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c05a:	7bfb      	ldrb	r3, [r7, #15]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d158      	bne.n	800c112 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	2b03      	cmp	r3, #3
 800c066:	d148      	bne.n	800c0fa <sync_fs+0xb2>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	791b      	ldrb	r3, [r3, #4]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d144      	bne.n	800c0fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	3330      	adds	r3, #48	; 0x30
 800c074:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c078:	2100      	movs	r1, #0
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7ff fda9 	bl	800bbd2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	3330      	adds	r3, #48	; 0x30
 800c084:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c088:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7ff fd38 	bl	800bb02 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	3330      	adds	r3, #48	; 0x30
 800c096:	4921      	ldr	r1, [pc, #132]	; (800c11c <sync_fs+0xd4>)
 800c098:	4618      	mov	r0, r3
 800c09a:	f7ff fd4d 	bl	800bb38 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	3330      	adds	r3, #48	; 0x30
 800c0a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c0a6:	491e      	ldr	r1, [pc, #120]	; (800c120 <sync_fs+0xd8>)
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7ff fd45 	bl	800bb38 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	3330      	adds	r3, #48	; 0x30
 800c0b2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	4610      	mov	r0, r2
 800c0be:	f7ff fd3b 	bl	800bb38 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	3330      	adds	r3, #48	; 0x30
 800c0c6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	68db      	ldr	r3, [r3, #12]
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	4610      	mov	r0, r2
 800c0d2:	f7ff fd31 	bl	800bb38 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	69db      	ldr	r3, [r3, #28]
 800c0da:	1c5a      	adds	r2, r3, #1
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	7858      	ldrb	r0, [r3, #1]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	f7ff fc8e 	bl	800ba10 <disk_write>
			fs->fsi_flag = 0;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	785b      	ldrb	r3, [r3, #1]
 800c0fe:	2200      	movs	r2, #0
 800c100:	2100      	movs	r1, #0
 800c102:	4618      	mov	r0, r3
 800c104:	f7ff fca4 	bl	800ba50 <disk_ioctl>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d001      	beq.n	800c112 <sync_fs+0xca>
 800c10e:	2301      	movs	r3, #1
 800c110:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c112:	7bfb      	ldrb	r3, [r7, #15]
}
 800c114:	4618      	mov	r0, r3
 800c116:	3710      	adds	r7, #16
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	41615252 	.word	0x41615252
 800c120:	61417272 	.word	0x61417272

0800c124 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	3b02      	subs	r3, #2
 800c132:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	695b      	ldr	r3, [r3, #20]
 800c138:	3b02      	subs	r3, #2
 800c13a:	683a      	ldr	r2, [r7, #0]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d301      	bcc.n	800c144 <clust2sect+0x20>
 800c140:	2300      	movs	r3, #0
 800c142:	e008      	b.n	800c156 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	895b      	ldrh	r3, [r3, #10]
 800c148:	461a      	mov	r2, r3
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	fb03 f202 	mul.w	r2, r3, r2
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c154:	4413      	add	r3, r2
}
 800c156:	4618      	mov	r0, r3
 800c158:	370c      	adds	r7, #12
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr

0800c162 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c162:	b580      	push	{r7, lr}
 800c164:	b086      	sub	sp, #24
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
 800c16a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	2b01      	cmp	r3, #1
 800c176:	d904      	bls.n	800c182 <get_fat+0x20>
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	695b      	ldr	r3, [r3, #20]
 800c17c:	683a      	ldr	r2, [r7, #0]
 800c17e:	429a      	cmp	r2, r3
 800c180:	d302      	bcc.n	800c188 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c182:	2301      	movs	r3, #1
 800c184:	617b      	str	r3, [r7, #20]
 800c186:	e08c      	b.n	800c2a2 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c188:	f04f 33ff 	mov.w	r3, #4294967295
 800c18c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	2b02      	cmp	r3, #2
 800c194:	d045      	beq.n	800c222 <get_fat+0xc0>
 800c196:	2b03      	cmp	r3, #3
 800c198:	d05d      	beq.n	800c256 <get_fat+0xf4>
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d177      	bne.n	800c28e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	60fb      	str	r3, [r7, #12]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	085b      	lsrs	r3, r3, #1
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	6a1a      	ldr	r2, [r3, #32]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	0a5b      	lsrs	r3, r3, #9
 800c1b4:	4413      	add	r3, r2
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	6938      	ldr	r0, [r7, #16]
 800c1ba:	f7ff ff17 	bl	800bfec <move_window>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d167      	bne.n	800c294 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	1c5a      	adds	r2, r3, #1
 800c1c8:	60fa      	str	r2, [r7, #12]
 800c1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ce:	693a      	ldr	r2, [r7, #16]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c1d6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	6a1a      	ldr	r2, [r3, #32]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	0a5b      	lsrs	r3, r3, #9
 800c1e0:	4413      	add	r3, r2
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	6938      	ldr	r0, [r7, #16]
 800c1e6:	f7ff ff01 	bl	800bfec <move_window>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d153      	bne.n	800c298 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1f6:	693a      	ldr	r2, [r7, #16]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c1fe:	021b      	lsls	r3, r3, #8
 800c200:	461a      	mov	r2, r3
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	4313      	orrs	r3, r2
 800c206:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	f003 0301 	and.w	r3, r3, #1
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d002      	beq.n	800c218 <get_fat+0xb6>
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	091b      	lsrs	r3, r3, #4
 800c216:	e002      	b.n	800c21e <get_fat+0xbc>
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c21e:	617b      	str	r3, [r7, #20]
			break;
 800c220:	e03f      	b.n	800c2a2 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	6a1a      	ldr	r2, [r3, #32]
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	0a1b      	lsrs	r3, r3, #8
 800c22a:	4413      	add	r3, r2
 800c22c:	4619      	mov	r1, r3
 800c22e:	6938      	ldr	r0, [r7, #16]
 800c230:	f7ff fedc 	bl	800bfec <move_window>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d130      	bne.n	800c29c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	005b      	lsls	r3, r3, #1
 800c244:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c248:	4413      	add	r3, r2
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7ff fc1e 	bl	800ba8c <ld_word>
 800c250:	4603      	mov	r3, r0
 800c252:	617b      	str	r3, [r7, #20]
			break;
 800c254:	e025      	b.n	800c2a2 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	6a1a      	ldr	r2, [r3, #32]
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	09db      	lsrs	r3, r3, #7
 800c25e:	4413      	add	r3, r2
 800c260:	4619      	mov	r1, r3
 800c262:	6938      	ldr	r0, [r7, #16]
 800c264:	f7ff fec2 	bl	800bfec <move_window>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d118      	bne.n	800c2a0 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c27c:	4413      	add	r3, r2
 800c27e:	4618      	mov	r0, r3
 800c280:	f7ff fc1c 	bl	800babc <ld_dword>
 800c284:	4603      	mov	r3, r0
 800c286:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c28a:	617b      	str	r3, [r7, #20]
			break;
 800c28c:	e009      	b.n	800c2a2 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c28e:	2301      	movs	r3, #1
 800c290:	617b      	str	r3, [r7, #20]
 800c292:	e006      	b.n	800c2a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c294:	bf00      	nop
 800c296:	e004      	b.n	800c2a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c298:	bf00      	nop
 800c29a:	e002      	b.n	800c2a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c29c:	bf00      	nop
 800c29e:	e000      	b.n	800c2a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c2a0:	bf00      	nop
		}
	}

	return val;
 800c2a2:	697b      	ldr	r3, [r7, #20]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3718      	adds	r7, #24
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c2ac:	b590      	push	{r4, r7, lr}
 800c2ae:	b089      	sub	sp, #36	; 0x24
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	60b9      	str	r1, [r7, #8]
 800c2b6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c2b8:	2302      	movs	r3, #2
 800c2ba:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	f240 80d6 	bls.w	800c470 <put_fat+0x1c4>
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	695b      	ldr	r3, [r3, #20]
 800c2c8:	68ba      	ldr	r2, [r7, #8]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	f080 80d0 	bcs.w	800c470 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	d073      	beq.n	800c3c0 <put_fat+0x114>
 800c2d8:	2b03      	cmp	r3, #3
 800c2da:	f000 8091 	beq.w	800c400 <put_fat+0x154>
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	f040 80c6 	bne.w	800c470 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	61bb      	str	r3, [r7, #24]
 800c2e8:	69bb      	ldr	r3, [r7, #24]
 800c2ea:	085b      	lsrs	r3, r3, #1
 800c2ec:	69ba      	ldr	r2, [r7, #24]
 800c2ee:	4413      	add	r3, r2
 800c2f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	6a1a      	ldr	r2, [r3, #32]
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	0a5b      	lsrs	r3, r3, #9
 800c2fa:	4413      	add	r3, r2
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	68f8      	ldr	r0, [r7, #12]
 800c300:	f7ff fe74 	bl	800bfec <move_window>
 800c304:	4603      	mov	r3, r0
 800c306:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c308:	7ffb      	ldrb	r3, [r7, #31]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	f040 80a9 	bne.w	800c462 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	1c59      	adds	r1, r3, #1
 800c31a:	61b9      	str	r1, [r7, #24]
 800c31c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c320:	4413      	add	r3, r2
 800c322:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	f003 0301 	and.w	r3, r3, #1
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d00d      	beq.n	800c34a <put_fat+0x9e>
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	b25b      	sxtb	r3, r3
 800c334:	f003 030f 	and.w	r3, r3, #15
 800c338:	b25a      	sxtb	r2, r3
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	011b      	lsls	r3, r3, #4
 800c340:	b25b      	sxtb	r3, r3
 800c342:	4313      	orrs	r3, r2
 800c344:	b25b      	sxtb	r3, r3
 800c346:	b2db      	uxtb	r3, r3
 800c348:	e001      	b.n	800c34e <put_fat+0xa2>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	697a      	ldr	r2, [r7, #20]
 800c350:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2201      	movs	r2, #1
 800c356:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	6a1a      	ldr	r2, [r3, #32]
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	0a5b      	lsrs	r3, r3, #9
 800c360:	4413      	add	r3, r2
 800c362:	4619      	mov	r1, r3
 800c364:	68f8      	ldr	r0, [r7, #12]
 800c366:	f7ff fe41 	bl	800bfec <move_window>
 800c36a:	4603      	mov	r3, r0
 800c36c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c36e:	7ffb      	ldrb	r3, [r7, #31]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d178      	bne.n	800c466 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c380:	4413      	add	r3, r2
 800c382:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	f003 0301 	and.w	r3, r3, #1
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d003      	beq.n	800c396 <put_fat+0xea>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	091b      	lsrs	r3, r3, #4
 800c392:	b2db      	uxtb	r3, r3
 800c394:	e00e      	b.n	800c3b4 <put_fat+0x108>
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	b25b      	sxtb	r3, r3
 800c39c:	f023 030f 	bic.w	r3, r3, #15
 800c3a0:	b25a      	sxtb	r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	0a1b      	lsrs	r3, r3, #8
 800c3a6:	b25b      	sxtb	r3, r3
 800c3a8:	f003 030f 	and.w	r3, r3, #15
 800c3ac:	b25b      	sxtb	r3, r3
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	b25b      	sxtb	r3, r3
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	697a      	ldr	r2, [r7, #20]
 800c3b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	70da      	strb	r2, [r3, #3]
			break;
 800c3be:	e057      	b.n	800c470 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6a1a      	ldr	r2, [r3, #32]
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	0a1b      	lsrs	r3, r3, #8
 800c3c8:	4413      	add	r3, r2
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	68f8      	ldr	r0, [r7, #12]
 800c3ce:	f7ff fe0d 	bl	800bfec <move_window>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c3d6:	7ffb      	ldrb	r3, [r7, #31]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d146      	bne.n	800c46a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	005b      	lsls	r3, r3, #1
 800c3e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c3ea:	4413      	add	r3, r2
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	b292      	uxth	r2, r2
 800c3f0:	4611      	mov	r1, r2
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7ff fb85 	bl	800bb02 <st_word>
			fs->wflag = 1;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	70da      	strb	r2, [r3, #3]
			break;
 800c3fe:	e037      	b.n	800c470 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	6a1a      	ldr	r2, [r3, #32]
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	09db      	lsrs	r3, r3, #7
 800c408:	4413      	add	r3, r2
 800c40a:	4619      	mov	r1, r3
 800c40c:	68f8      	ldr	r0, [r7, #12]
 800c40e:	f7ff fded 	bl	800bfec <move_window>
 800c412:	4603      	mov	r3, r0
 800c414:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c416:	7ffb      	ldrb	r3, [r7, #31]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d128      	bne.n	800c46e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	009b      	lsls	r3, r3, #2
 800c42c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c430:	4413      	add	r3, r2
 800c432:	4618      	mov	r0, r3
 800c434:	f7ff fb42 	bl	800babc <ld_dword>
 800c438:	4603      	mov	r3, r0
 800c43a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c43e:	4323      	orrs	r3, r4
 800c440:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c450:	4413      	add	r3, r2
 800c452:	6879      	ldr	r1, [r7, #4]
 800c454:	4618      	mov	r0, r3
 800c456:	f7ff fb6f 	bl	800bb38 <st_dword>
			fs->wflag = 1;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	2201      	movs	r2, #1
 800c45e:	70da      	strb	r2, [r3, #3]
			break;
 800c460:	e006      	b.n	800c470 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c462:	bf00      	nop
 800c464:	e004      	b.n	800c470 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c466:	bf00      	nop
 800c468:	e002      	b.n	800c470 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c46a:	bf00      	nop
 800c46c:	e000      	b.n	800c470 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c46e:	bf00      	nop
		}
	}
	return res;
 800c470:	7ffb      	ldrb	r3, [r7, #31]
}
 800c472:	4618      	mov	r0, r3
 800c474:	3724      	adds	r7, #36	; 0x24
 800c476:	46bd      	mov	sp, r7
 800c478:	bd90      	pop	{r4, r7, pc}

0800c47a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b088      	sub	sp, #32
 800c47e:	af00      	add	r7, sp, #0
 800c480:	60f8      	str	r0, [r7, #12]
 800c482:	60b9      	str	r1, [r7, #8]
 800c484:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c486:	2300      	movs	r3, #0
 800c488:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	2b01      	cmp	r3, #1
 800c494:	d904      	bls.n	800c4a0 <remove_chain+0x26>
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	695b      	ldr	r3, [r3, #20]
 800c49a:	68ba      	ldr	r2, [r7, #8]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d301      	bcc.n	800c4a4 <remove_chain+0x2a>
 800c4a0:	2302      	movs	r3, #2
 800c4a2:	e04b      	b.n	800c53c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00c      	beq.n	800c4c4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c4aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ae:	6879      	ldr	r1, [r7, #4]
 800c4b0:	69b8      	ldr	r0, [r7, #24]
 800c4b2:	f7ff fefb 	bl	800c2ac <put_fat>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c4ba:	7ffb      	ldrb	r3, [r7, #31]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d001      	beq.n	800c4c4 <remove_chain+0x4a>
 800c4c0:	7ffb      	ldrb	r3, [r7, #31]
 800c4c2:	e03b      	b.n	800c53c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c4c4:	68b9      	ldr	r1, [r7, #8]
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	f7ff fe4b 	bl	800c162 <get_fat>
 800c4cc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d031      	beq.n	800c538 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d101      	bne.n	800c4de <remove_chain+0x64>
 800c4da:	2302      	movs	r3, #2
 800c4dc:	e02e      	b.n	800c53c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4e4:	d101      	bne.n	800c4ea <remove_chain+0x70>
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	e028      	b.n	800c53c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	68b9      	ldr	r1, [r7, #8]
 800c4ee:	69b8      	ldr	r0, [r7, #24]
 800c4f0:	f7ff fedc 	bl	800c2ac <put_fat>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c4f8:	7ffb      	ldrb	r3, [r7, #31]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d001      	beq.n	800c502 <remove_chain+0x88>
 800c4fe:	7ffb      	ldrb	r3, [r7, #31]
 800c500:	e01c      	b.n	800c53c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c502:	69bb      	ldr	r3, [r7, #24]
 800c504:	691a      	ldr	r2, [r3, #16]
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	695b      	ldr	r3, [r3, #20]
 800c50a:	3b02      	subs	r3, #2
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d20b      	bcs.n	800c528 <remove_chain+0xae>
			fs->free_clst++;
 800c510:	69bb      	ldr	r3, [r7, #24]
 800c512:	691b      	ldr	r3, [r3, #16]
 800c514:	1c5a      	adds	r2, r3, #1
 800c516:	69bb      	ldr	r3, [r7, #24]
 800c518:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c51a:	69bb      	ldr	r3, [r7, #24]
 800c51c:	791b      	ldrb	r3, [r3, #4]
 800c51e:	f043 0301 	orr.w	r3, r3, #1
 800c522:	b2da      	uxtb	r2, r3
 800c524:	69bb      	ldr	r3, [r7, #24]
 800c526:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	695b      	ldr	r3, [r3, #20]
 800c530:	68ba      	ldr	r2, [r7, #8]
 800c532:	429a      	cmp	r2, r3
 800c534:	d3c6      	bcc.n	800c4c4 <remove_chain+0x4a>
 800c536:	e000      	b.n	800c53a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c538:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c53a:	2300      	movs	r3, #0
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3720      	adds	r7, #32
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b088      	sub	sp, #32
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d10d      	bne.n	800c576 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	68db      	ldr	r3, [r3, #12]
 800c55e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d004      	beq.n	800c570 <create_chain+0x2c>
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	695b      	ldr	r3, [r3, #20]
 800c56a:	69ba      	ldr	r2, [r7, #24]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d31b      	bcc.n	800c5a8 <create_chain+0x64>
 800c570:	2301      	movs	r3, #1
 800c572:	61bb      	str	r3, [r7, #24]
 800c574:	e018      	b.n	800c5a8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c576:	6839      	ldr	r1, [r7, #0]
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f7ff fdf2 	bl	800c162 <get_fat>
 800c57e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2b01      	cmp	r3, #1
 800c584:	d801      	bhi.n	800c58a <create_chain+0x46>
 800c586:	2301      	movs	r3, #1
 800c588:	e070      	b.n	800c66c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c590:	d101      	bne.n	800c596 <create_chain+0x52>
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	e06a      	b.n	800c66c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	695b      	ldr	r3, [r3, #20]
 800c59a:	68fa      	ldr	r2, [r7, #12]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d201      	bcs.n	800c5a4 <create_chain+0x60>
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	e063      	b.n	800c66c <create_chain+0x128>
		scl = clst;
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c5a8:	69bb      	ldr	r3, [r7, #24]
 800c5aa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	695b      	ldr	r3, [r3, #20]
 800c5b6:	69fa      	ldr	r2, [r7, #28]
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d307      	bcc.n	800c5cc <create_chain+0x88>
				ncl = 2;
 800c5bc:	2302      	movs	r3, #2
 800c5be:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c5c0:	69fa      	ldr	r2, [r7, #28]
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d901      	bls.n	800c5cc <create_chain+0x88>
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	e04f      	b.n	800c66c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c5cc:	69f9      	ldr	r1, [r7, #28]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f7ff fdc7 	bl	800c162 <get_fat>
 800c5d4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d00e      	beq.n	800c5fa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d003      	beq.n	800c5ea <create_chain+0xa6>
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5e8:	d101      	bne.n	800c5ee <create_chain+0xaa>
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	e03e      	b.n	800c66c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c5ee:	69fa      	ldr	r2, [r7, #28]
 800c5f0:	69bb      	ldr	r3, [r7, #24]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d1da      	bne.n	800c5ac <create_chain+0x68>
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	e038      	b.n	800c66c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c5fa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c5fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c600:	69f9      	ldr	r1, [r7, #28]
 800c602:	6938      	ldr	r0, [r7, #16]
 800c604:	f7ff fe52 	bl	800c2ac <put_fat>
 800c608:	4603      	mov	r3, r0
 800c60a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c60c:	7dfb      	ldrb	r3, [r7, #23]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d109      	bne.n	800c626 <create_chain+0xe2>
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d006      	beq.n	800c626 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c618:	69fa      	ldr	r2, [r7, #28]
 800c61a:	6839      	ldr	r1, [r7, #0]
 800c61c:	6938      	ldr	r0, [r7, #16]
 800c61e:	f7ff fe45 	bl	800c2ac <put_fat>
 800c622:	4603      	mov	r3, r0
 800c624:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c626:	7dfb      	ldrb	r3, [r7, #23]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d116      	bne.n	800c65a <create_chain+0x116>
		fs->last_clst = ncl;
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	69fa      	ldr	r2, [r7, #28]
 800c630:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	691a      	ldr	r2, [r3, #16]
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	695b      	ldr	r3, [r3, #20]
 800c63a:	3b02      	subs	r3, #2
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d804      	bhi.n	800c64a <create_chain+0x106>
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	691b      	ldr	r3, [r3, #16]
 800c644:	1e5a      	subs	r2, r3, #1
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	791b      	ldrb	r3, [r3, #4]
 800c64e:	f043 0301 	orr.w	r3, r3, #1
 800c652:	b2da      	uxtb	r2, r3
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	711a      	strb	r2, [r3, #4]
 800c658:	e007      	b.n	800c66a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c65a:	7dfb      	ldrb	r3, [r7, #23]
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d102      	bne.n	800c666 <create_chain+0x122>
 800c660:	f04f 33ff 	mov.w	r3, #4294967295
 800c664:	e000      	b.n	800c668 <create_chain+0x124>
 800c666:	2301      	movs	r3, #1
 800c668:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c66a:	69fb      	ldr	r3, [r7, #28]
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3720      	adds	r7, #32
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c674:	b480      	push	{r7}
 800c676:	b087      	sub	sp, #28
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c688:	3304      	adds	r3, #4
 800c68a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	0a5b      	lsrs	r3, r3, #9
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	8952      	ldrh	r2, [r2, #10]
 800c694:	fbb3 f3f2 	udiv	r3, r3, r2
 800c698:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	1d1a      	adds	r2, r3, #4
 800c69e:	613a      	str	r2, [r7, #16]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d101      	bne.n	800c6ae <clmt_clust+0x3a>
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	e010      	b.n	800c6d0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c6ae:	697a      	ldr	r2, [r7, #20]
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d307      	bcc.n	800c6c6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c6b6:	697a      	ldr	r2, [r7, #20]
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	1ad3      	subs	r3, r2, r3
 800c6bc:	617b      	str	r3, [r7, #20]
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	3304      	adds	r3, #4
 800c6c2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c6c4:	e7e9      	b.n	800c69a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c6c6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	681a      	ldr	r2, [r3, #0]
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	4413      	add	r3, r2
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	371c      	adds	r7, #28
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b086      	sub	sp, #24
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c6f2:	d204      	bcs.n	800c6fe <dir_sdi+0x22>
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	f003 031f 	and.w	r3, r3, #31
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d001      	beq.n	800c702 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c6fe:	2302      	movs	r3, #2
 800c700:	e063      	b.n	800c7ca <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	683a      	ldr	r2, [r7, #0]
 800c706:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d106      	bne.n	800c722 <dir_sdi+0x46>
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	2b02      	cmp	r3, #2
 800c71a:	d902      	bls.n	800c722 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c720:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d10c      	bne.n	800c742 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	095b      	lsrs	r3, r3, #5
 800c72c:	693a      	ldr	r2, [r7, #16]
 800c72e:	8912      	ldrh	r2, [r2, #8]
 800c730:	4293      	cmp	r3, r2
 800c732:	d301      	bcc.n	800c738 <dir_sdi+0x5c>
 800c734:	2302      	movs	r3, #2
 800c736:	e048      	b.n	800c7ca <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	61da      	str	r2, [r3, #28]
 800c740:	e029      	b.n	800c796 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	895b      	ldrh	r3, [r3, #10]
 800c746:	025b      	lsls	r3, r3, #9
 800c748:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c74a:	e019      	b.n	800c780 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6979      	ldr	r1, [r7, #20]
 800c750:	4618      	mov	r0, r3
 800c752:	f7ff fd06 	bl	800c162 <get_fat>
 800c756:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c75e:	d101      	bne.n	800c764 <dir_sdi+0x88>
 800c760:	2301      	movs	r3, #1
 800c762:	e032      	b.n	800c7ca <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	2b01      	cmp	r3, #1
 800c768:	d904      	bls.n	800c774 <dir_sdi+0x98>
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	695b      	ldr	r3, [r3, #20]
 800c76e:	697a      	ldr	r2, [r7, #20]
 800c770:	429a      	cmp	r2, r3
 800c772:	d301      	bcc.n	800c778 <dir_sdi+0x9c>
 800c774:	2302      	movs	r3, #2
 800c776:	e028      	b.n	800c7ca <dir_sdi+0xee>
			ofs -= csz;
 800c778:	683a      	ldr	r2, [r7, #0]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	1ad3      	subs	r3, r2, r3
 800c77e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c780:	683a      	ldr	r2, [r7, #0]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	429a      	cmp	r2, r3
 800c786:	d2e1      	bcs.n	800c74c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c788:	6979      	ldr	r1, [r7, #20]
 800c78a:	6938      	ldr	r0, [r7, #16]
 800c78c:	f7ff fcca 	bl	800c124 <clust2sect>
 800c790:	4602      	mov	r2, r0
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	697a      	ldr	r2, [r7, #20]
 800c79a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	69db      	ldr	r3, [r3, #28]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d101      	bne.n	800c7a8 <dir_sdi+0xcc>
 800c7a4:	2302      	movs	r3, #2
 800c7a6:	e010      	b.n	800c7ca <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	69da      	ldr	r2, [r3, #28]
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	0a5b      	lsrs	r3, r3, #9
 800c7b0:	441a      	add	r2, r3
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7c2:	441a      	add	r2, r3
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c7c8:	2300      	movs	r3, #0
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3718      	adds	r7, #24
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b086      	sub	sp, #24
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
 800c7da:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	695b      	ldr	r3, [r3, #20]
 800c7e6:	3320      	adds	r3, #32
 800c7e8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	69db      	ldr	r3, [r3, #28]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d003      	beq.n	800c7fa <dir_next+0x28>
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c7f8:	d301      	bcc.n	800c7fe <dir_next+0x2c>
 800c7fa:	2304      	movs	r3, #4
 800c7fc:	e0aa      	b.n	800c954 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c804:	2b00      	cmp	r3, #0
 800c806:	f040 8098 	bne.w	800c93a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	69db      	ldr	r3, [r3, #28]
 800c80e:	1c5a      	adds	r2, r3, #1
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	699b      	ldr	r3, [r3, #24]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d10b      	bne.n	800c834 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	095b      	lsrs	r3, r3, #5
 800c820:	68fa      	ldr	r2, [r7, #12]
 800c822:	8912      	ldrh	r2, [r2, #8]
 800c824:	4293      	cmp	r3, r2
 800c826:	f0c0 8088 	bcc.w	800c93a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	61da      	str	r2, [r3, #28]
 800c830:	2304      	movs	r3, #4
 800c832:	e08f      	b.n	800c954 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	0a5b      	lsrs	r3, r3, #9
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	8952      	ldrh	r2, [r2, #10]
 800c83c:	3a01      	subs	r2, #1
 800c83e:	4013      	ands	r3, r2
 800c840:	2b00      	cmp	r3, #0
 800c842:	d17a      	bne.n	800c93a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	699b      	ldr	r3, [r3, #24]
 800c84a:	4619      	mov	r1, r3
 800c84c:	4610      	mov	r0, r2
 800c84e:	f7ff fc88 	bl	800c162 <get_fat>
 800c852:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	2b01      	cmp	r3, #1
 800c858:	d801      	bhi.n	800c85e <dir_next+0x8c>
 800c85a:	2302      	movs	r3, #2
 800c85c:	e07a      	b.n	800c954 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c864:	d101      	bne.n	800c86a <dir_next+0x98>
 800c866:	2301      	movs	r3, #1
 800c868:	e074      	b.n	800c954 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	695b      	ldr	r3, [r3, #20]
 800c86e:	697a      	ldr	r2, [r7, #20]
 800c870:	429a      	cmp	r2, r3
 800c872:	d358      	bcc.n	800c926 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d104      	bne.n	800c884 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2200      	movs	r2, #0
 800c87e:	61da      	str	r2, [r3, #28]
 800c880:	2304      	movs	r3, #4
 800c882:	e067      	b.n	800c954 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	699b      	ldr	r3, [r3, #24]
 800c88a:	4619      	mov	r1, r3
 800c88c:	4610      	mov	r0, r2
 800c88e:	f7ff fe59 	bl	800c544 <create_chain>
 800c892:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d101      	bne.n	800c89e <dir_next+0xcc>
 800c89a:	2307      	movs	r3, #7
 800c89c:	e05a      	b.n	800c954 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d101      	bne.n	800c8a8 <dir_next+0xd6>
 800c8a4:	2302      	movs	r3, #2
 800c8a6:	e055      	b.n	800c954 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ae:	d101      	bne.n	800c8b4 <dir_next+0xe2>
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	e04f      	b.n	800c954 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c8b4:	68f8      	ldr	r0, [r7, #12]
 800c8b6:	f7ff fb55 	bl	800bf64 <sync_window>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d001      	beq.n	800c8c4 <dir_next+0xf2>
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	e047      	b.n	800c954 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	3330      	adds	r3, #48	; 0x30
 800c8c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8cc:	2100      	movs	r1, #0
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7ff f97f 	bl	800bbd2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	613b      	str	r3, [r7, #16]
 800c8d8:	6979      	ldr	r1, [r7, #20]
 800c8da:	68f8      	ldr	r0, [r7, #12]
 800c8dc:	f7ff fc22 	bl	800c124 <clust2sect>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	62da      	str	r2, [r3, #44]	; 0x2c
 800c8e6:	e012      	b.n	800c90e <dir_next+0x13c>
						fs->wflag = 1;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c8ee:	68f8      	ldr	r0, [r7, #12]
 800c8f0:	f7ff fb38 	bl	800bf64 <sync_window>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d001      	beq.n	800c8fe <dir_next+0x12c>
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	e02a      	b.n	800c954 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	3301      	adds	r3, #1
 800c902:	613b      	str	r3, [r7, #16]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c908:	1c5a      	adds	r2, r3, #1
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	895b      	ldrh	r3, [r3, #10]
 800c912:	461a      	mov	r2, r3
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	4293      	cmp	r3, r2
 800c918:	d3e6      	bcc.n	800c8e8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	1ad2      	subs	r2, r2, r3
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	697a      	ldr	r2, [r7, #20]
 800c92a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c92c:	6979      	ldr	r1, [r7, #20]
 800c92e:	68f8      	ldr	r0, [r7, #12]
 800c930:	f7ff fbf8 	bl	800c124 <clust2sect>
 800c934:	4602      	mov	r2, r0
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	68ba      	ldr	r2, [r7, #8]
 800c93e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c94c:	441a      	add	r2, r3
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c952:	2300      	movs	r3, #0
}
 800c954:	4618      	mov	r0, r3
 800c956:	3718      	adds	r7, #24
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b086      	sub	sp, #24
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c96c:	2100      	movs	r1, #0
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f7ff feb4 	bl	800c6dc <dir_sdi>
 800c974:	4603      	mov	r3, r0
 800c976:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c978:	7dfb      	ldrb	r3, [r7, #23]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d12b      	bne.n	800c9d6 <dir_alloc+0x7a>
		n = 0;
 800c97e:	2300      	movs	r3, #0
 800c980:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	69db      	ldr	r3, [r3, #28]
 800c986:	4619      	mov	r1, r3
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f7ff fb2f 	bl	800bfec <move_window>
 800c98e:	4603      	mov	r3, r0
 800c990:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c992:	7dfb      	ldrb	r3, [r7, #23]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d11d      	bne.n	800c9d4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6a1b      	ldr	r3, [r3, #32]
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	2be5      	cmp	r3, #229	; 0xe5
 800c9a0:	d004      	beq.n	800c9ac <dir_alloc+0x50>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6a1b      	ldr	r3, [r3, #32]
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d107      	bne.n	800c9bc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	613b      	str	r3, [r7, #16]
 800c9b2:	693a      	ldr	r2, [r7, #16]
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d102      	bne.n	800c9c0 <dir_alloc+0x64>
 800c9ba:	e00c      	b.n	800c9d6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c9bc:	2300      	movs	r3, #0
 800c9be:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c9c0:	2101      	movs	r1, #1
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f7ff ff05 	bl	800c7d2 <dir_next>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c9cc:	7dfb      	ldrb	r3, [r7, #23]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d0d7      	beq.n	800c982 <dir_alloc+0x26>
 800c9d2:	e000      	b.n	800c9d6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c9d4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c9d6:	7dfb      	ldrb	r3, [r7, #23]
 800c9d8:	2b04      	cmp	r3, #4
 800c9da:	d101      	bne.n	800c9e0 <dir_alloc+0x84>
 800c9dc:	2307      	movs	r3, #7
 800c9de:	75fb      	strb	r3, [r7, #23]
	return res;
 800c9e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3718      	adds	r7, #24
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b084      	sub	sp, #16
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
 800c9f2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	331a      	adds	r3, #26
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7ff f847 	bl	800ba8c <ld_word>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	2b03      	cmp	r3, #3
 800ca08:	d109      	bne.n	800ca1e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	3314      	adds	r3, #20
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7ff f83c 	bl	800ba8c <ld_word>
 800ca14:	4603      	mov	r3, r0
 800ca16:	041b      	lsls	r3, r3, #16
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3710      	adds	r7, #16
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	331a      	adds	r3, #26
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	b292      	uxth	r2, r2
 800ca3c:	4611      	mov	r1, r2
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7ff f85f 	bl	800bb02 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	2b03      	cmp	r3, #3
 800ca4a:	d109      	bne.n	800ca60 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	f103 0214 	add.w	r2, r3, #20
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	0c1b      	lsrs	r3, r3, #16
 800ca56:	b29b      	uxth	r3, r3
 800ca58:	4619      	mov	r1, r3
 800ca5a:	4610      	mov	r0, r2
 800ca5c:	f7ff f851 	bl	800bb02 <st_word>
	}
}
 800ca60:	bf00      	nop
 800ca62:	3710      	adds	r7, #16
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b086      	sub	sp, #24
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ca76:	2100      	movs	r1, #0
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f7ff fe2f 	bl	800c6dc <dir_sdi>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ca82:	7dfb      	ldrb	r3, [r7, #23]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d001      	beq.n	800ca8c <dir_find+0x24>
 800ca88:	7dfb      	ldrb	r3, [r7, #23]
 800ca8a:	e03e      	b.n	800cb0a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	69db      	ldr	r3, [r3, #28]
 800ca90:	4619      	mov	r1, r3
 800ca92:	6938      	ldr	r0, [r7, #16]
 800ca94:	f7ff faaa 	bl	800bfec <move_window>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ca9c:	7dfb      	ldrb	r3, [r7, #23]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d12f      	bne.n	800cb02 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6a1b      	ldr	r3, [r3, #32]
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800caaa:	7bfb      	ldrb	r3, [r7, #15]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d102      	bne.n	800cab6 <dir_find+0x4e>
 800cab0:	2304      	movs	r3, #4
 800cab2:	75fb      	strb	r3, [r7, #23]
 800cab4:	e028      	b.n	800cb08 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6a1b      	ldr	r3, [r3, #32]
 800caba:	330b      	adds	r3, #11
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cac2:	b2da      	uxtb	r2, r3
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6a1b      	ldr	r3, [r3, #32]
 800cacc:	330b      	adds	r3, #11
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	f003 0308 	and.w	r3, r3, #8
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d10a      	bne.n	800caee <dir_find+0x86>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6a18      	ldr	r0, [r3, #32]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	3324      	adds	r3, #36	; 0x24
 800cae0:	220b      	movs	r2, #11
 800cae2:	4619      	mov	r1, r3
 800cae4:	f7ff f88f 	bl	800bc06 <mem_cmp>
 800cae8:	4603      	mov	r3, r0
 800caea:	2b00      	cmp	r3, #0
 800caec:	d00b      	beq.n	800cb06 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800caee:	2100      	movs	r1, #0
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f7ff fe6e 	bl	800c7d2 <dir_next>
 800caf6:	4603      	mov	r3, r0
 800caf8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cafa:	7dfb      	ldrb	r3, [r7, #23]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d0c5      	beq.n	800ca8c <dir_find+0x24>
 800cb00:	e002      	b.n	800cb08 <dir_find+0xa0>
		if (res != FR_OK) break;
 800cb02:	bf00      	nop
 800cb04:	e000      	b.n	800cb08 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cb06:	bf00      	nop

	return res;
 800cb08:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3718      	adds	r7, #24
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cb12:	b580      	push	{r7, lr}
 800cb14:	b084      	sub	sp, #16
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800cb20:	2101      	movs	r1, #1
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f7ff ff1a 	bl	800c95c <dir_alloc>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cb2c:	7bfb      	ldrb	r3, [r7, #15]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d11c      	bne.n	800cb6c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	69db      	ldr	r3, [r3, #28]
 800cb36:	4619      	mov	r1, r3
 800cb38:	68b8      	ldr	r0, [r7, #8]
 800cb3a:	f7ff fa57 	bl	800bfec <move_window>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cb42:	7bfb      	ldrb	r3, [r7, #15]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d111      	bne.n	800cb6c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6a1b      	ldr	r3, [r3, #32]
 800cb4c:	2220      	movs	r2, #32
 800cb4e:	2100      	movs	r1, #0
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7ff f83e 	bl	800bbd2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6a18      	ldr	r0, [r3, #32]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	3324      	adds	r3, #36	; 0x24
 800cb5e:	220b      	movs	r2, #11
 800cb60:	4619      	mov	r1, r3
 800cb62:	f7ff f815 	bl	800bb90 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cb6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3710      	adds	r7, #16
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
	...

0800cb78 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b088      	sub	sp, #32
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	60fb      	str	r3, [r7, #12]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	3324      	adds	r3, #36	; 0x24
 800cb8c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cb8e:	220b      	movs	r2, #11
 800cb90:	2120      	movs	r1, #32
 800cb92:	68b8      	ldr	r0, [r7, #8]
 800cb94:	f7ff f81d 	bl	800bbd2 <mem_set>
	si = i = 0; ni = 8;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	613b      	str	r3, [r7, #16]
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	617b      	str	r3, [r7, #20]
 800cba0:	2308      	movs	r3, #8
 800cba2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	1c5a      	adds	r2, r3, #1
 800cba8:	617a      	str	r2, [r7, #20]
 800cbaa:	68fa      	ldr	r2, [r7, #12]
 800cbac:	4413      	add	r3, r2
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cbb2:	7ffb      	ldrb	r3, [r7, #31]
 800cbb4:	2b20      	cmp	r3, #32
 800cbb6:	d94e      	bls.n	800cc56 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cbb8:	7ffb      	ldrb	r3, [r7, #31]
 800cbba:	2b2f      	cmp	r3, #47	; 0x2f
 800cbbc:	d006      	beq.n	800cbcc <create_name+0x54>
 800cbbe:	7ffb      	ldrb	r3, [r7, #31]
 800cbc0:	2b5c      	cmp	r3, #92	; 0x5c
 800cbc2:	d110      	bne.n	800cbe6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cbc4:	e002      	b.n	800cbcc <create_name+0x54>
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	3301      	adds	r3, #1
 800cbca:	617b      	str	r3, [r7, #20]
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	2b2f      	cmp	r3, #47	; 0x2f
 800cbd6:	d0f6      	beq.n	800cbc6 <create_name+0x4e>
 800cbd8:	68fa      	ldr	r2, [r7, #12]
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	4413      	add	r3, r2
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	2b5c      	cmp	r3, #92	; 0x5c
 800cbe2:	d0f0      	beq.n	800cbc6 <create_name+0x4e>
			break;
 800cbe4:	e038      	b.n	800cc58 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800cbe6:	7ffb      	ldrb	r3, [r7, #31]
 800cbe8:	2b2e      	cmp	r3, #46	; 0x2e
 800cbea:	d003      	beq.n	800cbf4 <create_name+0x7c>
 800cbec:	693a      	ldr	r2, [r7, #16]
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d30c      	bcc.n	800cc0e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cbf4:	69bb      	ldr	r3, [r7, #24]
 800cbf6:	2b0b      	cmp	r3, #11
 800cbf8:	d002      	beq.n	800cc00 <create_name+0x88>
 800cbfa:	7ffb      	ldrb	r3, [r7, #31]
 800cbfc:	2b2e      	cmp	r3, #46	; 0x2e
 800cbfe:	d001      	beq.n	800cc04 <create_name+0x8c>
 800cc00:	2306      	movs	r3, #6
 800cc02:	e044      	b.n	800cc8e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800cc04:	2308      	movs	r3, #8
 800cc06:	613b      	str	r3, [r7, #16]
 800cc08:	230b      	movs	r3, #11
 800cc0a:	61bb      	str	r3, [r7, #24]
			continue;
 800cc0c:	e022      	b.n	800cc54 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800cc0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	da04      	bge.n	800cc20 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800cc16:	7ffb      	ldrb	r3, [r7, #31]
 800cc18:	3b80      	subs	r3, #128	; 0x80
 800cc1a:	4a1f      	ldr	r2, [pc, #124]	; (800cc98 <create_name+0x120>)
 800cc1c:	5cd3      	ldrb	r3, [r2, r3]
 800cc1e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cc20:	7ffb      	ldrb	r3, [r7, #31]
 800cc22:	4619      	mov	r1, r3
 800cc24:	481d      	ldr	r0, [pc, #116]	; (800cc9c <create_name+0x124>)
 800cc26:	f7ff f815 	bl	800bc54 <chk_chr>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d001      	beq.n	800cc34 <create_name+0xbc>
 800cc30:	2306      	movs	r3, #6
 800cc32:	e02c      	b.n	800cc8e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cc34:	7ffb      	ldrb	r3, [r7, #31]
 800cc36:	2b60      	cmp	r3, #96	; 0x60
 800cc38:	d905      	bls.n	800cc46 <create_name+0xce>
 800cc3a:	7ffb      	ldrb	r3, [r7, #31]
 800cc3c:	2b7a      	cmp	r3, #122	; 0x7a
 800cc3e:	d802      	bhi.n	800cc46 <create_name+0xce>
 800cc40:	7ffb      	ldrb	r3, [r7, #31]
 800cc42:	3b20      	subs	r3, #32
 800cc44:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	1c5a      	adds	r2, r3, #1
 800cc4a:	613a      	str	r2, [r7, #16]
 800cc4c:	68ba      	ldr	r2, [r7, #8]
 800cc4e:	4413      	add	r3, r2
 800cc50:	7ffa      	ldrb	r2, [r7, #31]
 800cc52:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cc54:	e7a6      	b.n	800cba4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cc56:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800cc58:	68fa      	ldr	r2, [r7, #12]
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	441a      	add	r2, r3
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d101      	bne.n	800cc6c <create_name+0xf4>
 800cc68:	2306      	movs	r3, #6
 800cc6a:	e010      	b.n	800cc8e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	2be5      	cmp	r3, #229	; 0xe5
 800cc72:	d102      	bne.n	800cc7a <create_name+0x102>
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	2205      	movs	r2, #5
 800cc78:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cc7a:	7ffb      	ldrb	r3, [r7, #31]
 800cc7c:	2b20      	cmp	r3, #32
 800cc7e:	d801      	bhi.n	800cc84 <create_name+0x10c>
 800cc80:	2204      	movs	r2, #4
 800cc82:	e000      	b.n	800cc86 <create_name+0x10e>
 800cc84:	2200      	movs	r2, #0
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	330b      	adds	r3, #11
 800cc8a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cc8c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3720      	adds	r7, #32
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	08013df8 	.word	0x08013df8
 800cc9c:	08013d74 	.word	0x08013d74

0800cca0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b086      	sub	sp, #24
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ccb4:	e002      	b.n	800ccbc <follow_path+0x1c>
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	603b      	str	r3, [r7, #0]
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	2b2f      	cmp	r3, #47	; 0x2f
 800ccc2:	d0f8      	beq.n	800ccb6 <follow_path+0x16>
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	2b5c      	cmp	r3, #92	; 0x5c
 800ccca:	d0f4      	beq.n	800ccb6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	2b1f      	cmp	r3, #31
 800ccd8:	d80a      	bhi.n	800ccf0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2280      	movs	r2, #128	; 0x80
 800ccde:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cce2:	2100      	movs	r1, #0
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f7ff fcf9 	bl	800c6dc <dir_sdi>
 800ccea:	4603      	mov	r3, r0
 800ccec:	75fb      	strb	r3, [r7, #23]
 800ccee:	e043      	b.n	800cd78 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ccf0:	463b      	mov	r3, r7
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f7ff ff3f 	bl	800cb78 <create_name>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ccfe:	7dfb      	ldrb	r3, [r7, #23]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d134      	bne.n	800cd6e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f7ff feaf 	bl	800ca68 <dir_find>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cd14:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cd16:	7dfb      	ldrb	r3, [r7, #23]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00a      	beq.n	800cd32 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cd1c:	7dfb      	ldrb	r3, [r7, #23]
 800cd1e:	2b04      	cmp	r3, #4
 800cd20:	d127      	bne.n	800cd72 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cd22:	7afb      	ldrb	r3, [r7, #11]
 800cd24:	f003 0304 	and.w	r3, r3, #4
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d122      	bne.n	800cd72 <follow_path+0xd2>
 800cd2c:	2305      	movs	r3, #5
 800cd2e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cd30:	e01f      	b.n	800cd72 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cd32:	7afb      	ldrb	r3, [r7, #11]
 800cd34:	f003 0304 	and.w	r3, r3, #4
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d11c      	bne.n	800cd76 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	799b      	ldrb	r3, [r3, #6]
 800cd40:	f003 0310 	and.w	r3, r3, #16
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d102      	bne.n	800cd4e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cd48:	2305      	movs	r3, #5
 800cd4a:	75fb      	strb	r3, [r7, #23]
 800cd4c:	e014      	b.n	800cd78 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	695b      	ldr	r3, [r3, #20]
 800cd58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd5c:	4413      	add	r3, r2
 800cd5e:	4619      	mov	r1, r3
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f7ff fe42 	bl	800c9ea <ld_clust>
 800cd66:	4602      	mov	r2, r0
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cd6c:	e7c0      	b.n	800ccf0 <follow_path+0x50>
			if (res != FR_OK) break;
 800cd6e:	bf00      	nop
 800cd70:	e002      	b.n	800cd78 <follow_path+0xd8>
				break;
 800cd72:	bf00      	nop
 800cd74:	e000      	b.n	800cd78 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cd76:	bf00      	nop
			}
		}
	}

	return res;
 800cd78:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3718      	adds	r7, #24
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}

0800cd82 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cd82:	b480      	push	{r7}
 800cd84:	b087      	sub	sp, #28
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cd8a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd8e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d031      	beq.n	800cdfc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	617b      	str	r3, [r7, #20]
 800cd9e:	e002      	b.n	800cda6 <get_ldnumber+0x24>
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	3301      	adds	r3, #1
 800cda4:	617b      	str	r3, [r7, #20]
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	2b20      	cmp	r3, #32
 800cdac:	d903      	bls.n	800cdb6 <get_ldnumber+0x34>
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	2b3a      	cmp	r3, #58	; 0x3a
 800cdb4:	d1f4      	bne.n	800cda0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	2b3a      	cmp	r3, #58	; 0x3a
 800cdbc:	d11c      	bne.n	800cdf8 <get_ldnumber+0x76>
			tp = *path;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	1c5a      	adds	r2, r3, #1
 800cdc8:	60fa      	str	r2, [r7, #12]
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	3b30      	subs	r3, #48	; 0x30
 800cdce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	2b09      	cmp	r3, #9
 800cdd4:	d80e      	bhi.n	800cdf4 <get_ldnumber+0x72>
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d10a      	bne.n	800cdf4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d107      	bne.n	800cdf4 <get_ldnumber+0x72>
					vol = (int)i;
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	3301      	adds	r3, #1
 800cdec:	617b      	str	r3, [r7, #20]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	697a      	ldr	r2, [r7, #20]
 800cdf2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	e002      	b.n	800cdfe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cdfc:	693b      	ldr	r3, [r7, #16]
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	371c      	adds	r7, #28
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr
	...

0800ce0c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	70da      	strb	r2, [r3, #3]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce22:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ce24:	6839      	ldr	r1, [r7, #0]
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f7ff f8e0 	bl	800bfec <move_window>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d001      	beq.n	800ce36 <check_fs+0x2a>
 800ce32:	2304      	movs	r3, #4
 800ce34:	e038      	b.n	800cea8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	3330      	adds	r3, #48	; 0x30
 800ce3a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f7fe fe24 	bl	800ba8c <ld_word>
 800ce44:	4603      	mov	r3, r0
 800ce46:	461a      	mov	r2, r3
 800ce48:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d001      	beq.n	800ce54 <check_fs+0x48>
 800ce50:	2303      	movs	r3, #3
 800ce52:	e029      	b.n	800cea8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce5a:	2be9      	cmp	r3, #233	; 0xe9
 800ce5c:	d009      	beq.n	800ce72 <check_fs+0x66>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce64:	2beb      	cmp	r3, #235	; 0xeb
 800ce66:	d11e      	bne.n	800cea6 <check_fs+0x9a>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ce6e:	2b90      	cmp	r3, #144	; 0x90
 800ce70:	d119      	bne.n	800cea6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	3330      	adds	r3, #48	; 0x30
 800ce76:	3336      	adds	r3, #54	; 0x36
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7fe fe1f 	bl	800babc <ld_dword>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ce84:	4a0a      	ldr	r2, [pc, #40]	; (800ceb0 <check_fs+0xa4>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d101      	bne.n	800ce8e <check_fs+0x82>
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	e00c      	b.n	800cea8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	3330      	adds	r3, #48	; 0x30
 800ce92:	3352      	adds	r3, #82	; 0x52
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7fe fe11 	bl	800babc <ld_dword>
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	4b05      	ldr	r3, [pc, #20]	; (800ceb4 <check_fs+0xa8>)
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d101      	bne.n	800cea6 <check_fs+0x9a>
 800cea2:	2300      	movs	r3, #0
 800cea4:	e000      	b.n	800cea8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cea6:	2302      	movs	r3, #2
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3708      	adds	r7, #8
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	00544146 	.word	0x00544146
 800ceb4:	33544146 	.word	0x33544146

0800ceb8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b096      	sub	sp, #88	; 0x58
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	4613      	mov	r3, r2
 800cec4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	2200      	movs	r2, #0
 800ceca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cecc:	68f8      	ldr	r0, [r7, #12]
 800cece:	f7ff ff58 	bl	800cd82 <get_ldnumber>
 800ced2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ced4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	da01      	bge.n	800cede <find_volume+0x26>
 800ceda:	230b      	movs	r3, #11
 800cedc:	e22e      	b.n	800d33c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cede:	4aa8      	ldr	r2, [pc, #672]	; (800d180 <find_volume+0x2c8>)
 800cee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cee6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d101      	bne.n	800cef2 <find_volume+0x3a>
 800ceee:	230c      	movs	r3, #12
 800cef0:	e224      	b.n	800d33c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cef6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cef8:	79fb      	ldrb	r3, [r7, #7]
 800cefa:	f023 0301 	bic.w	r3, r3, #1
 800cefe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cf00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d01a      	beq.n	800cf3e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cf08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0a:	785b      	ldrb	r3, [r3, #1]
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7fe fd1f 	bl	800b950 <disk_status>
 800cf12:	4603      	mov	r3, r0
 800cf14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cf18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cf1c:	f003 0301 	and.w	r3, r3, #1
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d10c      	bne.n	800cf3e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cf24:	79fb      	ldrb	r3, [r7, #7]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d007      	beq.n	800cf3a <find_volume+0x82>
 800cf2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cf2e:	f003 0304 	and.w	r3, r3, #4
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d001      	beq.n	800cf3a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cf36:	230a      	movs	r3, #10
 800cf38:	e200      	b.n	800d33c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	e1fe      	b.n	800d33c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cf3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf40:	2200      	movs	r2, #0
 800cf42:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cf44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf46:	b2da      	uxtb	r2, r3
 800cf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cf4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4e:	785b      	ldrb	r3, [r3, #1]
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7fe fd17 	bl	800b984 <disk_initialize>
 800cf56:	4603      	mov	r3, r0
 800cf58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cf5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cf60:	f003 0301 	and.w	r3, r3, #1
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d001      	beq.n	800cf6c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cf68:	2303      	movs	r3, #3
 800cf6a:	e1e7      	b.n	800d33c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cf6c:	79fb      	ldrb	r3, [r7, #7]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d007      	beq.n	800cf82 <find_volume+0xca>
 800cf72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cf76:	f003 0304 	and.w	r3, r3, #4
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d001      	beq.n	800cf82 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cf7e:	230a      	movs	r3, #10
 800cf80:	e1dc      	b.n	800d33c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cf82:	2300      	movs	r3, #0
 800cf84:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cf86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf8a:	f7ff ff3f 	bl	800ce0c <check_fs>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cf94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf98:	2b02      	cmp	r3, #2
 800cf9a:	d14b      	bne.n	800d034 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	643b      	str	r3, [r7, #64]	; 0x40
 800cfa0:	e01f      	b.n	800cfe2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cfa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfaa:	011b      	lsls	r3, r3, #4
 800cfac:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cfb0:	4413      	add	r3, r2
 800cfb2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb6:	3304      	adds	r3, #4
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d006      	beq.n	800cfcc <find_volume+0x114>
 800cfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc0:	3308      	adds	r3, #8
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fe fd7a 	bl	800babc <ld_dword>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	e000      	b.n	800cfce <find_volume+0x116>
 800cfcc:	2200      	movs	r2, #0
 800cfce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfd0:	009b      	lsls	r3, r3, #2
 800cfd2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800cfd6:	440b      	add	r3, r1
 800cfd8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cfdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfde:	3301      	adds	r3, #1
 800cfe0:	643b      	str	r3, [r7, #64]	; 0x40
 800cfe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfe4:	2b03      	cmp	r3, #3
 800cfe6:	d9dc      	bls.n	800cfa2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cfe8:	2300      	movs	r3, #0
 800cfea:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cfec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d002      	beq.n	800cff8 <find_volume+0x140>
 800cff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cff4:	3b01      	subs	r3, #1
 800cff6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d000:	4413      	add	r3, r2
 800d002:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d006:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d005      	beq.n	800d01a <find_volume+0x162>
 800d00e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d010:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d012:	f7ff fefb 	bl	800ce0c <check_fs>
 800d016:	4603      	mov	r3, r0
 800d018:	e000      	b.n	800d01c <find_volume+0x164>
 800d01a:	2303      	movs	r3, #3
 800d01c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d020:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d024:	2b01      	cmp	r3, #1
 800d026:	d905      	bls.n	800d034 <find_volume+0x17c>
 800d028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d02a:	3301      	adds	r3, #1
 800d02c:	643b      	str	r3, [r7, #64]	; 0x40
 800d02e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d030:	2b03      	cmp	r3, #3
 800d032:	d9e1      	bls.n	800cff8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d034:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d038:	2b04      	cmp	r3, #4
 800d03a:	d101      	bne.n	800d040 <find_volume+0x188>
 800d03c:	2301      	movs	r3, #1
 800d03e:	e17d      	b.n	800d33c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d040:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d044:	2b01      	cmp	r3, #1
 800d046:	d901      	bls.n	800d04c <find_volume+0x194>
 800d048:	230d      	movs	r3, #13
 800d04a:	e177      	b.n	800d33c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04e:	3330      	adds	r3, #48	; 0x30
 800d050:	330b      	adds	r3, #11
 800d052:	4618      	mov	r0, r3
 800d054:	f7fe fd1a 	bl	800ba8c <ld_word>
 800d058:	4603      	mov	r3, r0
 800d05a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d05e:	d001      	beq.n	800d064 <find_volume+0x1ac>
 800d060:	230d      	movs	r3, #13
 800d062:	e16b      	b.n	800d33c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d066:	3330      	adds	r3, #48	; 0x30
 800d068:	3316      	adds	r3, #22
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fe fd0e 	bl	800ba8c <ld_word>
 800d070:	4603      	mov	r3, r0
 800d072:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d076:	2b00      	cmp	r3, #0
 800d078:	d106      	bne.n	800d088 <find_volume+0x1d0>
 800d07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d07c:	3330      	adds	r3, #48	; 0x30
 800d07e:	3324      	adds	r3, #36	; 0x24
 800d080:	4618      	mov	r0, r3
 800d082:	f7fe fd1b 	bl	800babc <ld_dword>
 800d086:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d08a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d08c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d090:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d096:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d09a:	789b      	ldrb	r3, [r3, #2]
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	d005      	beq.n	800d0ac <find_volume+0x1f4>
 800d0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a2:	789b      	ldrb	r3, [r3, #2]
 800d0a4:	2b02      	cmp	r3, #2
 800d0a6:	d001      	beq.n	800d0ac <find_volume+0x1f4>
 800d0a8:	230d      	movs	r3, #13
 800d0aa:	e147      	b.n	800d33c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ae:	789b      	ldrb	r3, [r3, #2]
 800d0b0:	461a      	mov	r2, r3
 800d0b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0b4:	fb02 f303 	mul.w	r3, r2, r3
 800d0b8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0c0:	b29a      	uxth	r2, r3
 800d0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c8:	895b      	ldrh	r3, [r3, #10]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d008      	beq.n	800d0e0 <find_volume+0x228>
 800d0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d0:	895b      	ldrh	r3, [r3, #10]
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d6:	895b      	ldrh	r3, [r3, #10]
 800d0d8:	3b01      	subs	r3, #1
 800d0da:	4013      	ands	r3, r2
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d001      	beq.n	800d0e4 <find_volume+0x22c>
 800d0e0:	230d      	movs	r3, #13
 800d0e2:	e12b      	b.n	800d33c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0e6:	3330      	adds	r3, #48	; 0x30
 800d0e8:	3311      	adds	r3, #17
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7fe fcce 	bl	800ba8c <ld_word>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fa:	891b      	ldrh	r3, [r3, #8]
 800d0fc:	f003 030f 	and.w	r3, r3, #15
 800d100:	b29b      	uxth	r3, r3
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <find_volume+0x252>
 800d106:	230d      	movs	r3, #13
 800d108:	e118      	b.n	800d33c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d10c:	3330      	adds	r3, #48	; 0x30
 800d10e:	3313      	adds	r3, #19
 800d110:	4618      	mov	r0, r3
 800d112:	f7fe fcbb 	bl	800ba8c <ld_word>
 800d116:	4603      	mov	r3, r0
 800d118:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d11a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d106      	bne.n	800d12e <find_volume+0x276>
 800d120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d122:	3330      	adds	r3, #48	; 0x30
 800d124:	3320      	adds	r3, #32
 800d126:	4618      	mov	r0, r3
 800d128:	f7fe fcc8 	bl	800babc <ld_dword>
 800d12c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d130:	3330      	adds	r3, #48	; 0x30
 800d132:	330e      	adds	r3, #14
 800d134:	4618      	mov	r0, r3
 800d136:	f7fe fca9 	bl	800ba8c <ld_word>
 800d13a:	4603      	mov	r3, r0
 800d13c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d13e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d140:	2b00      	cmp	r3, #0
 800d142:	d101      	bne.n	800d148 <find_volume+0x290>
 800d144:	230d      	movs	r3, #13
 800d146:	e0f9      	b.n	800d33c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d148:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d14a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d14c:	4413      	add	r3, r2
 800d14e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d150:	8912      	ldrh	r2, [r2, #8]
 800d152:	0912      	lsrs	r2, r2, #4
 800d154:	b292      	uxth	r2, r2
 800d156:	4413      	add	r3, r2
 800d158:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d15a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d15e:	429a      	cmp	r2, r3
 800d160:	d201      	bcs.n	800d166 <find_volume+0x2ae>
 800d162:	230d      	movs	r3, #13
 800d164:	e0ea      	b.n	800d33c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d166:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16a:	1ad3      	subs	r3, r2, r3
 800d16c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d16e:	8952      	ldrh	r2, [r2, #10]
 800d170:	fbb3 f3f2 	udiv	r3, r3, r2
 800d174:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d103      	bne.n	800d184 <find_volume+0x2cc>
 800d17c:	230d      	movs	r3, #13
 800d17e:	e0dd      	b.n	800d33c <find_volume+0x484>
 800d180:	240008c0 	.word	0x240008c0
		fmt = FS_FAT32;
 800d184:	2303      	movs	r3, #3
 800d186:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d190:	4293      	cmp	r3, r2
 800d192:	d802      	bhi.n	800d19a <find_volume+0x2e2>
 800d194:	2302      	movs	r3, #2
 800d196:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d802      	bhi.n	800d1aa <find_volume+0x2f2>
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ac:	1c9a      	adds	r2, r3, #2
 800d1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1b6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d1b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d1ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1bc:	441a      	add	r2, r3
 800d1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d1c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c6:	441a      	add	r2, r3
 800d1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ca:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800d1cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d1d0:	2b03      	cmp	r3, #3
 800d1d2:	d11e      	bne.n	800d212 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d6:	3330      	adds	r3, #48	; 0x30
 800d1d8:	332a      	adds	r3, #42	; 0x2a
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7fe fc56 	bl	800ba8c <ld_word>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d001      	beq.n	800d1ea <find_volume+0x332>
 800d1e6:	230d      	movs	r3, #13
 800d1e8:	e0a8      	b.n	800d33c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ec:	891b      	ldrh	r3, [r3, #8]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d001      	beq.n	800d1f6 <find_volume+0x33e>
 800d1f2:	230d      	movs	r3, #13
 800d1f4:	e0a2      	b.n	800d33c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f8:	3330      	adds	r3, #48	; 0x30
 800d1fa:	332c      	adds	r3, #44	; 0x2c
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f7fe fc5d 	bl	800babc <ld_dword>
 800d202:	4602      	mov	r2, r0
 800d204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d206:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d20a:	695b      	ldr	r3, [r3, #20]
 800d20c:	009b      	lsls	r3, r3, #2
 800d20e:	647b      	str	r3, [r7, #68]	; 0x44
 800d210:	e01f      	b.n	800d252 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d214:	891b      	ldrh	r3, [r3, #8]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d101      	bne.n	800d21e <find_volume+0x366>
 800d21a:	230d      	movs	r3, #13
 800d21c:	e08e      	b.n	800d33c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d220:	6a1a      	ldr	r2, [r3, #32]
 800d222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d224:	441a      	add	r2, r3
 800d226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d228:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d22a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d22e:	2b02      	cmp	r3, #2
 800d230:	d103      	bne.n	800d23a <find_volume+0x382>
 800d232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d234:	695b      	ldr	r3, [r3, #20]
 800d236:	005b      	lsls	r3, r3, #1
 800d238:	e00a      	b.n	800d250 <find_volume+0x398>
 800d23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d23c:	695a      	ldr	r2, [r3, #20]
 800d23e:	4613      	mov	r3, r2
 800d240:	005b      	lsls	r3, r3, #1
 800d242:	4413      	add	r3, r2
 800d244:	085a      	lsrs	r2, r3, #1
 800d246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d248:	695b      	ldr	r3, [r3, #20]
 800d24a:	f003 0301 	and.w	r3, r3, #1
 800d24e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d250:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d254:	699a      	ldr	r2, [r3, #24]
 800d256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d258:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d25c:	0a5b      	lsrs	r3, r3, #9
 800d25e:	429a      	cmp	r2, r3
 800d260:	d201      	bcs.n	800d266 <find_volume+0x3ae>
 800d262:	230d      	movs	r3, #13
 800d264:	e06a      	b.n	800d33c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d268:	f04f 32ff 	mov.w	r2, #4294967295
 800d26c:	611a      	str	r2, [r3, #16]
 800d26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d270:	691a      	ldr	r2, [r3, #16]
 800d272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d274:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d278:	2280      	movs	r2, #128	; 0x80
 800d27a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d27c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d280:	2b03      	cmp	r3, #3
 800d282:	d149      	bne.n	800d318 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d286:	3330      	adds	r3, #48	; 0x30
 800d288:	3330      	adds	r3, #48	; 0x30
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7fe fbfe 	bl	800ba8c <ld_word>
 800d290:	4603      	mov	r3, r0
 800d292:	2b01      	cmp	r3, #1
 800d294:	d140      	bne.n	800d318 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d298:	3301      	adds	r3, #1
 800d29a:	4619      	mov	r1, r3
 800d29c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d29e:	f7fe fea5 	bl	800bfec <move_window>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d137      	bne.n	800d318 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800d2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b0:	3330      	adds	r3, #48	; 0x30
 800d2b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7fe fbe8 	bl	800ba8c <ld_word>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	461a      	mov	r2, r3
 800d2c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d127      	bne.n	800d318 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ca:	3330      	adds	r3, #48	; 0x30
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7fe fbf5 	bl	800babc <ld_dword>
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	4b1b      	ldr	r3, [pc, #108]	; (800d344 <find_volume+0x48c>)
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d11e      	bne.n	800d318 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2dc:	3330      	adds	r3, #48	; 0x30
 800d2de:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7fe fbea 	bl	800babc <ld_dword>
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	4b17      	ldr	r3, [pc, #92]	; (800d348 <find_volume+0x490>)
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d113      	bne.n	800d318 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f2:	3330      	adds	r3, #48	; 0x30
 800d2f4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7fe fbdf 	bl	800babc <ld_dword>
 800d2fe:	4602      	mov	r2, r0
 800d300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d302:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d306:	3330      	adds	r3, #48	; 0x30
 800d308:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7fe fbd5 	bl	800babc <ld_dword>
 800d312:	4602      	mov	r2, r0
 800d314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d316:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d31e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d320:	4b0a      	ldr	r3, [pc, #40]	; (800d34c <find_volume+0x494>)
 800d322:	881b      	ldrh	r3, [r3, #0]
 800d324:	3301      	adds	r3, #1
 800d326:	b29a      	uxth	r2, r3
 800d328:	4b08      	ldr	r3, [pc, #32]	; (800d34c <find_volume+0x494>)
 800d32a:	801a      	strh	r2, [r3, #0]
 800d32c:	4b07      	ldr	r3, [pc, #28]	; (800d34c <find_volume+0x494>)
 800d32e:	881a      	ldrh	r2, [r3, #0]
 800d330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d332:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d334:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d336:	f7fe fdf1 	bl	800bf1c <clear_lock>
#endif
	return FR_OK;
 800d33a:	2300      	movs	r3, #0
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3758      	adds	r7, #88	; 0x58
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	41615252 	.word	0x41615252
 800d348:	61417272 	.word	0x61417272
 800d34c:	240008c4 	.word	0x240008c4

0800d350 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d35a:	2309      	movs	r3, #9
 800d35c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d01c      	beq.n	800d39e <validate+0x4e>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d018      	beq.n	800d39e <validate+0x4e>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d013      	beq.n	800d39e <validate+0x4e>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	889a      	ldrh	r2, [r3, #4]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	88db      	ldrh	r3, [r3, #6]
 800d380:	429a      	cmp	r2, r3
 800d382:	d10c      	bne.n	800d39e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	785b      	ldrb	r3, [r3, #1]
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7fe fae0 	bl	800b950 <disk_status>
 800d390:	4603      	mov	r3, r0
 800d392:	f003 0301 	and.w	r3, r3, #1
 800d396:	2b00      	cmp	r3, #0
 800d398:	d101      	bne.n	800d39e <validate+0x4e>
			res = FR_OK;
 800d39a:	2300      	movs	r3, #0
 800d39c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d39e:	7bfb      	ldrb	r3, [r7, #15]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d102      	bne.n	800d3aa <validate+0x5a>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	e000      	b.n	800d3ac <validate+0x5c>
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	683a      	ldr	r2, [r7, #0]
 800d3ae:	6013      	str	r3, [r2, #0]
	return res;
 800d3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
	...

0800d3bc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b088      	sub	sp, #32
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	4613      	mov	r3, r2
 800d3c8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d3ce:	f107 0310 	add.w	r3, r7, #16
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7ff fcd5 	bl	800cd82 <get_ldnumber>
 800d3d8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d3da:	69fb      	ldr	r3, [r7, #28]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	da01      	bge.n	800d3e4 <f_mount+0x28>
 800d3e0:	230b      	movs	r3, #11
 800d3e2:	e02b      	b.n	800d43c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d3e4:	4a17      	ldr	r2, [pc, #92]	; (800d444 <f_mount+0x88>)
 800d3e6:	69fb      	ldr	r3, [r7, #28]
 800d3e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3ec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d3ee:	69bb      	ldr	r3, [r7, #24]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d005      	beq.n	800d400 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d3f4:	69b8      	ldr	r0, [r7, #24]
 800d3f6:	f7fe fd91 	bl	800bf1c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d3fa:	69bb      	ldr	r3, [r7, #24]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d002      	beq.n	800d40c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2200      	movs	r2, #0
 800d40a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	490d      	ldr	r1, [pc, #52]	; (800d444 <f_mount+0x88>)
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d002      	beq.n	800d422 <f_mount+0x66>
 800d41c:	79fb      	ldrb	r3, [r7, #7]
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d001      	beq.n	800d426 <f_mount+0x6a>
 800d422:	2300      	movs	r3, #0
 800d424:	e00a      	b.n	800d43c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d426:	f107 010c 	add.w	r1, r7, #12
 800d42a:	f107 0308 	add.w	r3, r7, #8
 800d42e:	2200      	movs	r2, #0
 800d430:	4618      	mov	r0, r3
 800d432:	f7ff fd41 	bl	800ceb8 <find_volume>
 800d436:	4603      	mov	r3, r0
 800d438:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d43a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3720      	adds	r7, #32
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}
 800d444:	240008c0 	.word	0x240008c0

0800d448 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b098      	sub	sp, #96	; 0x60
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	4613      	mov	r3, r2
 800d454:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d101      	bne.n	800d460 <f_open+0x18>
 800d45c:	2309      	movs	r3, #9
 800d45e:	e1ad      	b.n	800d7bc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d460:	79fb      	ldrb	r3, [r7, #7]
 800d462:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d466:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d468:	79fa      	ldrb	r2, [r7, #7]
 800d46a:	f107 0110 	add.w	r1, r7, #16
 800d46e:	f107 0308 	add.w	r3, r7, #8
 800d472:	4618      	mov	r0, r3
 800d474:	f7ff fd20 	bl	800ceb8 <find_volume>
 800d478:	4603      	mov	r3, r0
 800d47a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d47e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d482:	2b00      	cmp	r3, #0
 800d484:	f040 8191 	bne.w	800d7aa <f_open+0x362>
		dj.obj.fs = fs;
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d48c:	68ba      	ldr	r2, [r7, #8]
 800d48e:	f107 0314 	add.w	r3, r7, #20
 800d492:	4611      	mov	r1, r2
 800d494:	4618      	mov	r0, r3
 800d496:	f7ff fc03 	bl	800cca0 <follow_path>
 800d49a:	4603      	mov	r3, r0
 800d49c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d4a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d11a      	bne.n	800d4de <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d4a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d4ac:	b25b      	sxtb	r3, r3
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	da03      	bge.n	800d4ba <f_open+0x72>
				res = FR_INVALID_NAME;
 800d4b2:	2306      	movs	r3, #6
 800d4b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d4b8:	e011      	b.n	800d4de <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d4ba:	79fb      	ldrb	r3, [r7, #7]
 800d4bc:	f023 0301 	bic.w	r3, r3, #1
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	bf14      	ite	ne
 800d4c4:	2301      	movne	r3, #1
 800d4c6:	2300      	moveq	r3, #0
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	f107 0314 	add.w	r3, r7, #20
 800d4d0:	4611      	mov	r1, r2
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7fe fbda 	bl	800bc8c <chk_lock>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d4de:	79fb      	ldrb	r3, [r7, #7]
 800d4e0:	f003 031c 	and.w	r3, r3, #28
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d07f      	beq.n	800d5e8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d4e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d017      	beq.n	800d520 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d4f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4f4:	2b04      	cmp	r3, #4
 800d4f6:	d10e      	bne.n	800d516 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d4f8:	f7fe fc24 	bl	800bd44 <enq_lock>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d006      	beq.n	800d510 <f_open+0xc8>
 800d502:	f107 0314 	add.w	r3, r7, #20
 800d506:	4618      	mov	r0, r3
 800d508:	f7ff fb03 	bl	800cb12 <dir_register>
 800d50c:	4603      	mov	r3, r0
 800d50e:	e000      	b.n	800d512 <f_open+0xca>
 800d510:	2312      	movs	r3, #18
 800d512:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d516:	79fb      	ldrb	r3, [r7, #7]
 800d518:	f043 0308 	orr.w	r3, r3, #8
 800d51c:	71fb      	strb	r3, [r7, #7]
 800d51e:	e010      	b.n	800d542 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d520:	7ebb      	ldrb	r3, [r7, #26]
 800d522:	f003 0311 	and.w	r3, r3, #17
 800d526:	2b00      	cmp	r3, #0
 800d528:	d003      	beq.n	800d532 <f_open+0xea>
					res = FR_DENIED;
 800d52a:	2307      	movs	r3, #7
 800d52c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d530:	e007      	b.n	800d542 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d532:	79fb      	ldrb	r3, [r7, #7]
 800d534:	f003 0304 	and.w	r3, r3, #4
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d002      	beq.n	800d542 <f_open+0xfa>
 800d53c:	2308      	movs	r3, #8
 800d53e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d546:	2b00      	cmp	r3, #0
 800d548:	d168      	bne.n	800d61c <f_open+0x1d4>
 800d54a:	79fb      	ldrb	r3, [r7, #7]
 800d54c:	f003 0308 	and.w	r3, r3, #8
 800d550:	2b00      	cmp	r3, #0
 800d552:	d063      	beq.n	800d61c <f_open+0x1d4>
				dw = GET_FATTIME();
 800d554:	f7fb fa04 	bl	8008960 <get_fattime>
 800d558:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d55c:	330e      	adds	r3, #14
 800d55e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d560:	4618      	mov	r0, r3
 800d562:	f7fe fae9 	bl	800bb38 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d568:	3316      	adds	r3, #22
 800d56a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7fe fae3 	bl	800bb38 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d574:	330b      	adds	r3, #11
 800d576:	2220      	movs	r2, #32
 800d578:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d57e:	4611      	mov	r1, r2
 800d580:	4618      	mov	r0, r3
 800d582:	f7ff fa32 	bl	800c9ea <ld_clust>
 800d586:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d58c:	2200      	movs	r2, #0
 800d58e:	4618      	mov	r0, r3
 800d590:	f7ff fa4a 	bl	800ca28 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d596:	331c      	adds	r3, #28
 800d598:	2100      	movs	r1, #0
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7fe facc 	bl	800bb38 <st_dword>
					fs->wflag = 1;
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d5a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d037      	beq.n	800d61c <f_open+0x1d4>
						dw = fs->winsect;
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5b0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d5b2:	f107 0314 	add.w	r3, r7, #20
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f7fe ff5d 	bl	800c47a <remove_chain>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d5c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d126      	bne.n	800d61c <f_open+0x1d4>
							res = move_window(fs, dw);
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7fe fd0a 	bl	800bfec <move_window>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d5e2:	3a01      	subs	r2, #1
 800d5e4:	60da      	str	r2, [r3, #12]
 800d5e6:	e019      	b.n	800d61c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d5e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d115      	bne.n	800d61c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d5f0:	7ebb      	ldrb	r3, [r7, #26]
 800d5f2:	f003 0310 	and.w	r3, r3, #16
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d003      	beq.n	800d602 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d5fa:	2304      	movs	r3, #4
 800d5fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d600:	e00c      	b.n	800d61c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d602:	79fb      	ldrb	r3, [r7, #7]
 800d604:	f003 0302 	and.w	r3, r3, #2
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d007      	beq.n	800d61c <f_open+0x1d4>
 800d60c:	7ebb      	ldrb	r3, [r7, #26]
 800d60e:	f003 0301 	and.w	r3, r3, #1
 800d612:	2b00      	cmp	r3, #0
 800d614:	d002      	beq.n	800d61c <f_open+0x1d4>
						res = FR_DENIED;
 800d616:	2307      	movs	r3, #7
 800d618:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d61c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d620:	2b00      	cmp	r3, #0
 800d622:	d128      	bne.n	800d676 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d624:	79fb      	ldrb	r3, [r7, #7]
 800d626:	f003 0308 	and.w	r3, r3, #8
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d003      	beq.n	800d636 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d62e:	79fb      	ldrb	r3, [r7, #7]
 800d630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d634:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d63e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d644:	79fb      	ldrb	r3, [r7, #7]
 800d646:	f023 0301 	bic.w	r3, r3, #1
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	bf14      	ite	ne
 800d64e:	2301      	movne	r3, #1
 800d650:	2300      	moveq	r3, #0
 800d652:	b2db      	uxtb	r3, r3
 800d654:	461a      	mov	r2, r3
 800d656:	f107 0314 	add.w	r3, r7, #20
 800d65a:	4611      	mov	r1, r2
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7fe fb93 	bl	800bd88 <inc_lock>
 800d662:	4602      	mov	r2, r0
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	691b      	ldr	r3, [r3, #16]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d102      	bne.n	800d676 <f_open+0x22e>
 800d670:	2302      	movs	r3, #2
 800d672:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d676:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	f040 8095 	bne.w	800d7aa <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d684:	4611      	mov	r1, r2
 800d686:	4618      	mov	r0, r3
 800d688:	f7ff f9af 	bl	800c9ea <ld_clust>
 800d68c:	4602      	mov	r2, r0
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d694:	331c      	adds	r3, #28
 800d696:	4618      	mov	r0, r3
 800d698:	f7fe fa10 	bl	800babc <ld_dword>
 800d69c:	4602      	mov	r2, r0
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d6a8:	693a      	ldr	r2, [r7, #16]
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	88da      	ldrh	r2, [r3, #6]
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	79fa      	ldrb	r2, [r7, #7]
 800d6ba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	3330      	adds	r3, #48	; 0x30
 800d6d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6d6:	2100      	movs	r1, #0
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7fe fa7a 	bl	800bbd2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d6de:	79fb      	ldrb	r3, [r7, #7]
 800d6e0:	f003 0320 	and.w	r3, r3, #32
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d060      	beq.n	800d7aa <f_open+0x362>
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d05c      	beq.n	800d7aa <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	68da      	ldr	r2, [r3, #12]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	895b      	ldrh	r3, [r3, #10]
 800d6fc:	025b      	lsls	r3, r3, #9
 800d6fe:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	689b      	ldr	r3, [r3, #8]
 800d704:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	68db      	ldr	r3, [r3, #12]
 800d70a:	657b      	str	r3, [r7, #84]	; 0x54
 800d70c:	e016      	b.n	800d73c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d712:	4618      	mov	r0, r3
 800d714:	f7fe fd25 	bl	800c162 <get_fat>
 800d718:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d71a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d802      	bhi.n	800d726 <f_open+0x2de>
 800d720:	2302      	movs	r3, #2
 800d722:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d726:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d72c:	d102      	bne.n	800d734 <f_open+0x2ec>
 800d72e:	2301      	movs	r3, #1
 800d730:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d734:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	657b      	str	r3, [r7, #84]	; 0x54
 800d73c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d740:	2b00      	cmp	r3, #0
 800d742:	d103      	bne.n	800d74c <f_open+0x304>
 800d744:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d748:	429a      	cmp	r2, r3
 800d74a:	d8e0      	bhi.n	800d70e <f_open+0x2c6>
				}
				fp->clust = clst;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d750:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d752:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d756:	2b00      	cmp	r3, #0
 800d758:	d127      	bne.n	800d7aa <f_open+0x362>
 800d75a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d75c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d760:	2b00      	cmp	r3, #0
 800d762:	d022      	beq.n	800d7aa <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d768:	4618      	mov	r0, r3
 800d76a:	f7fe fcdb 	bl	800c124 <clust2sect>
 800d76e:	6478      	str	r0, [r7, #68]	; 0x44
 800d770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d772:	2b00      	cmp	r3, #0
 800d774:	d103      	bne.n	800d77e <f_open+0x336>
						res = FR_INT_ERR;
 800d776:	2302      	movs	r3, #2
 800d778:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d77c:	e015      	b.n	800d7aa <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d77e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d780:	0a5a      	lsrs	r2, r3, #9
 800d782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d784:	441a      	add	r2, r3
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	7858      	ldrb	r0, [r3, #1]
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	6a1a      	ldr	r2, [r3, #32]
 800d798:	2301      	movs	r3, #1
 800d79a:	f7fe f919 	bl	800b9d0 <disk_read>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d002      	beq.n	800d7aa <f_open+0x362>
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d7aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d002      	beq.n	800d7b8 <f_open+0x370>
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d7b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3760      	adds	r7, #96	; 0x60
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b08e      	sub	sp, #56	; 0x38
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	607a      	str	r2, [r7, #4]
 800d7d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f107 0214 	add.w	r2, r7, #20
 800d7e2:	4611      	mov	r1, r2
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f7ff fdb3 	bl	800d350 <validate>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d7f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d107      	bne.n	800d808 <f_read+0x44>
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	7d5b      	ldrb	r3, [r3, #21]
 800d7fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d800:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d804:	2b00      	cmp	r3, #0
 800d806:	d002      	beq.n	800d80e <f_read+0x4a>
 800d808:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d80c:	e115      	b.n	800da3a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	7d1b      	ldrb	r3, [r3, #20]
 800d812:	f003 0301 	and.w	r3, r3, #1
 800d816:	2b00      	cmp	r3, #0
 800d818:	d101      	bne.n	800d81e <f_read+0x5a>
 800d81a:	2307      	movs	r3, #7
 800d81c:	e10d      	b.n	800da3a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	68da      	ldr	r2, [r3, #12]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	699b      	ldr	r3, [r3, #24]
 800d826:	1ad3      	subs	r3, r2, r3
 800d828:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d82a:	687a      	ldr	r2, [r7, #4]
 800d82c:	6a3b      	ldr	r3, [r7, #32]
 800d82e:	429a      	cmp	r2, r3
 800d830:	f240 80fe 	bls.w	800da30 <f_read+0x26c>
 800d834:	6a3b      	ldr	r3, [r7, #32]
 800d836:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d838:	e0fa      	b.n	800da30 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	699b      	ldr	r3, [r3, #24]
 800d83e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d842:	2b00      	cmp	r3, #0
 800d844:	f040 80c6 	bne.w	800d9d4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	699b      	ldr	r3, [r3, #24]
 800d84c:	0a5b      	lsrs	r3, r3, #9
 800d84e:	697a      	ldr	r2, [r7, #20]
 800d850:	8952      	ldrh	r2, [r2, #10]
 800d852:	3a01      	subs	r2, #1
 800d854:	4013      	ands	r3, r2
 800d856:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d858:	69fb      	ldr	r3, [r7, #28]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d12f      	bne.n	800d8be <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	699b      	ldr	r3, [r3, #24]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d103      	bne.n	800d86e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	689b      	ldr	r3, [r3, #8]
 800d86a:	633b      	str	r3, [r7, #48]	; 0x30
 800d86c:	e013      	b.n	800d896 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d872:	2b00      	cmp	r3, #0
 800d874:	d007      	beq.n	800d886 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	699b      	ldr	r3, [r3, #24]
 800d87a:	4619      	mov	r1, r3
 800d87c:	68f8      	ldr	r0, [r7, #12]
 800d87e:	f7fe fef9 	bl	800c674 <clmt_clust>
 800d882:	6338      	str	r0, [r7, #48]	; 0x30
 800d884:	e007      	b.n	800d896 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d886:	68fa      	ldr	r2, [r7, #12]
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	69db      	ldr	r3, [r3, #28]
 800d88c:	4619      	mov	r1, r3
 800d88e:	4610      	mov	r0, r2
 800d890:	f7fe fc67 	bl	800c162 <get_fat>
 800d894:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d804      	bhi.n	800d8a6 <f_read+0xe2>
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2202      	movs	r2, #2
 800d8a0:	755a      	strb	r2, [r3, #21]
 800d8a2:	2302      	movs	r3, #2
 800d8a4:	e0c9      	b.n	800da3a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ac:	d104      	bne.n	800d8b8 <f_read+0xf4>
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	755a      	strb	r2, [r3, #21]
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e0c0      	b.n	800da3a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8bc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d8be:	697a      	ldr	r2, [r7, #20]
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	69db      	ldr	r3, [r3, #28]
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	4610      	mov	r0, r2
 800d8c8:	f7fe fc2c 	bl	800c124 <clust2sect>
 800d8cc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d8ce:	69bb      	ldr	r3, [r7, #24]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d104      	bne.n	800d8de <f_read+0x11a>
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2202      	movs	r2, #2
 800d8d8:	755a      	strb	r2, [r3, #21]
 800d8da:	2302      	movs	r3, #2
 800d8dc:	e0ad      	b.n	800da3a <f_read+0x276>
			sect += csect;
 800d8de:	69ba      	ldr	r2, [r7, #24]
 800d8e0:	69fb      	ldr	r3, [r7, #28]
 800d8e2:	4413      	add	r3, r2
 800d8e4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	0a5b      	lsrs	r3, r3, #9
 800d8ea:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d039      	beq.n	800d966 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d8f2:	69fa      	ldr	r2, [r7, #28]
 800d8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f6:	4413      	add	r3, r2
 800d8f8:	697a      	ldr	r2, [r7, #20]
 800d8fa:	8952      	ldrh	r2, [r2, #10]
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d905      	bls.n	800d90c <f_read+0x148>
					cc = fs->csize - csect;
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	895b      	ldrh	r3, [r3, #10]
 800d904:	461a      	mov	r2, r3
 800d906:	69fb      	ldr	r3, [r7, #28]
 800d908:	1ad3      	subs	r3, r2, r3
 800d90a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	7858      	ldrb	r0, [r3, #1]
 800d910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d912:	69ba      	ldr	r2, [r7, #24]
 800d914:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d916:	f7fe f85b 	bl	800b9d0 <disk_read>
 800d91a:	4603      	mov	r3, r0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d004      	beq.n	800d92a <f_read+0x166>
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2201      	movs	r2, #1
 800d924:	755a      	strb	r2, [r3, #21]
 800d926:	2301      	movs	r3, #1
 800d928:	e087      	b.n	800da3a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	7d1b      	ldrb	r3, [r3, #20]
 800d92e:	b25b      	sxtb	r3, r3
 800d930:	2b00      	cmp	r3, #0
 800d932:	da14      	bge.n	800d95e <f_read+0x19a>
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	6a1a      	ldr	r2, [r3, #32]
 800d938:	69bb      	ldr	r3, [r7, #24]
 800d93a:	1ad3      	subs	r3, r2, r3
 800d93c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d93e:	429a      	cmp	r2, r3
 800d940:	d90d      	bls.n	800d95e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	6a1a      	ldr	r2, [r3, #32]
 800d946:	69bb      	ldr	r3, [r7, #24]
 800d948:	1ad3      	subs	r3, r2, r3
 800d94a:	025b      	lsls	r3, r3, #9
 800d94c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d94e:	18d0      	adds	r0, r2, r3
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	3330      	adds	r3, #48	; 0x30
 800d954:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d958:	4619      	mov	r1, r3
 800d95a:	f7fe f919 	bl	800bb90 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d960:	025b      	lsls	r3, r3, #9
 800d962:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d964:	e050      	b.n	800da08 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	6a1b      	ldr	r3, [r3, #32]
 800d96a:	69ba      	ldr	r2, [r7, #24]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d02e      	beq.n	800d9ce <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	7d1b      	ldrb	r3, [r3, #20]
 800d974:	b25b      	sxtb	r3, r3
 800d976:	2b00      	cmp	r3, #0
 800d978:	da18      	bge.n	800d9ac <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	7858      	ldrb	r0, [r3, #1]
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	6a1a      	ldr	r2, [r3, #32]
 800d988:	2301      	movs	r3, #1
 800d98a:	f7fe f841 	bl	800ba10 <disk_write>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d004      	beq.n	800d99e <f_read+0x1da>
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	2201      	movs	r2, #1
 800d998:	755a      	strb	r2, [r3, #21]
 800d99a:	2301      	movs	r3, #1
 800d99c:	e04d      	b.n	800da3a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	7d1b      	ldrb	r3, [r3, #20]
 800d9a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	7858      	ldrb	r0, [r3, #1]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	69ba      	ldr	r2, [r7, #24]
 800d9ba:	f7fe f809 	bl	800b9d0 <disk_read>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d004      	beq.n	800d9ce <f_read+0x20a>
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	755a      	strb	r2, [r3, #21]
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	e035      	b.n	800da3a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	69ba      	ldr	r2, [r7, #24]
 800d9d2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	699b      	ldr	r3, [r3, #24]
 800d9d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9dc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d9e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d901      	bls.n	800d9ee <f_read+0x22a>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	699b      	ldr	r3, [r3, #24]
 800d9f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9fc:	4413      	add	r3, r2
 800d9fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da00:	4619      	mov	r1, r3
 800da02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da04:	f7fe f8c4 	bl	800bb90 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800da08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da0c:	4413      	add	r3, r2
 800da0e:	627b      	str	r3, [r7, #36]	; 0x24
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	699a      	ldr	r2, [r3, #24]
 800da14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da16:	441a      	add	r2, r3
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	619a      	str	r2, [r3, #24]
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da22:	441a      	add	r2, r3
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	601a      	str	r2, [r3, #0]
 800da28:	687a      	ldr	r2, [r7, #4]
 800da2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da2c:	1ad3      	subs	r3, r2, r3
 800da2e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	f47f af01 	bne.w	800d83a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800da38:	2300      	movs	r3, #0
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3738      	adds	r7, #56	; 0x38
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800da42:	b580      	push	{r7, lr}
 800da44:	b086      	sub	sp, #24
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f107 0208 	add.w	r2, r7, #8
 800da50:	4611      	mov	r1, r2
 800da52:	4618      	mov	r0, r3
 800da54:	f7ff fc7c 	bl	800d350 <validate>
 800da58:	4603      	mov	r3, r0
 800da5a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800da5c:	7dfb      	ldrb	r3, [r7, #23]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d168      	bne.n	800db34 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	7d1b      	ldrb	r3, [r3, #20]
 800da66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d062      	beq.n	800db34 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	7d1b      	ldrb	r3, [r3, #20]
 800da72:	b25b      	sxtb	r3, r3
 800da74:	2b00      	cmp	r3, #0
 800da76:	da15      	bge.n	800daa4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	7858      	ldrb	r0, [r3, #1]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6a1a      	ldr	r2, [r3, #32]
 800da86:	2301      	movs	r3, #1
 800da88:	f7fd ffc2 	bl	800ba10 <disk_write>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d001      	beq.n	800da96 <f_sync+0x54>
 800da92:	2301      	movs	r3, #1
 800da94:	e04f      	b.n	800db36 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	7d1b      	ldrb	r3, [r3, #20]
 800da9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da9e:	b2da      	uxtb	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800daa4:	f7fa ff5c 	bl	8008960 <get_fattime>
 800daa8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800daaa:	68ba      	ldr	r2, [r7, #8]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dab0:	4619      	mov	r1, r3
 800dab2:	4610      	mov	r0, r2
 800dab4:	f7fe fa9a 	bl	800bfec <move_window>
 800dab8:	4603      	mov	r3, r0
 800daba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800dabc:	7dfb      	ldrb	r3, [r7, #23]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d138      	bne.n	800db34 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dac6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	330b      	adds	r3, #11
 800dacc:	781a      	ldrb	r2, [r3, #0]
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	330b      	adds	r3, #11
 800dad2:	f042 0220 	orr.w	r2, r2, #32
 800dad6:	b2d2      	uxtb	r2, r2
 800dad8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6818      	ldr	r0, [r3, #0]
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	689b      	ldr	r3, [r3, #8]
 800dae2:	461a      	mov	r2, r3
 800dae4:	68f9      	ldr	r1, [r7, #12]
 800dae6:	f7fe ff9f 	bl	800ca28 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f103 021c 	add.w	r2, r3, #28
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	68db      	ldr	r3, [r3, #12]
 800daf4:	4619      	mov	r1, r3
 800daf6:	4610      	mov	r0, r2
 800daf8:	f7fe f81e 	bl	800bb38 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	3316      	adds	r3, #22
 800db00:	6939      	ldr	r1, [r7, #16]
 800db02:	4618      	mov	r0, r3
 800db04:	f7fe f818 	bl	800bb38 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	3312      	adds	r3, #18
 800db0c:	2100      	movs	r1, #0
 800db0e:	4618      	mov	r0, r3
 800db10:	f7fd fff7 	bl	800bb02 <st_word>
					fs->wflag = 1;
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	2201      	movs	r2, #1
 800db18:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7fe fa93 	bl	800c048 <sync_fs>
 800db22:	4603      	mov	r3, r0
 800db24:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	7d1b      	ldrb	r3, [r3, #20]
 800db2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db2e:	b2da      	uxtb	r2, r3
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800db34:	7dfb      	ldrb	r3, [r7, #23]
}
 800db36:	4618      	mov	r0, r3
 800db38:	3718      	adds	r7, #24
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}

0800db3e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800db3e:	b580      	push	{r7, lr}
 800db40:	b084      	sub	sp, #16
 800db42:	af00      	add	r7, sp, #0
 800db44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f7ff ff7b 	bl	800da42 <f_sync>
 800db4c:	4603      	mov	r3, r0
 800db4e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800db50:	7bfb      	ldrb	r3, [r7, #15]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d118      	bne.n	800db88 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f107 0208 	add.w	r2, r7, #8
 800db5c:	4611      	mov	r1, r2
 800db5e:	4618      	mov	r0, r3
 800db60:	f7ff fbf6 	bl	800d350 <validate>
 800db64:	4603      	mov	r3, r0
 800db66:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800db68:	7bfb      	ldrb	r3, [r7, #15]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d10c      	bne.n	800db88 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	691b      	ldr	r3, [r3, #16]
 800db72:	4618      	mov	r0, r3
 800db74:	f7fe f996 	bl	800bea4 <dec_lock>
 800db78:	4603      	mov	r3, r0
 800db7a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800db7c:	7bfb      	ldrb	r3, [r7, #15]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d102      	bne.n	800db88 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2200      	movs	r2, #0
 800db86:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800db88:	7bfb      	ldrb	r3, [r7, #15]
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800db92:	b580      	push	{r7, lr}
 800db94:	b088      	sub	sp, #32
 800db96:	af00      	add	r7, sp, #0
 800db98:	60f8      	str	r0, [r7, #12]
 800db9a:	60b9      	str	r1, [r7, #8]
 800db9c:	607a      	str	r2, [r7, #4]
	int n = 0;
 800db9e:	2300      	movs	r3, #0
 800dba0:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800dba6:	e01b      	b.n	800dbe0 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800dba8:	f107 0310 	add.w	r3, r7, #16
 800dbac:	f107 0114 	add.w	r1, r7, #20
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f7ff fe06 	bl	800d7c4 <f_read>
		if (rc != 1) break;
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d116      	bne.n	800dbec <f_gets+0x5a>
		c = s[0];
 800dbbe:	7d3b      	ldrb	r3, [r7, #20]
 800dbc0:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800dbc2:	7dfb      	ldrb	r3, [r7, #23]
 800dbc4:	2b0d      	cmp	r3, #13
 800dbc6:	d100      	bne.n	800dbca <f_gets+0x38>
 800dbc8:	e00a      	b.n	800dbe0 <f_gets+0x4e>
		*p++ = c;
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	1c5a      	adds	r2, r3, #1
 800dbce:	61ba      	str	r2, [r7, #24]
 800dbd0:	7dfa      	ldrb	r2, [r7, #23]
 800dbd2:	701a      	strb	r2, [r3, #0]
		n++;
 800dbd4:	69fb      	ldr	r3, [r7, #28]
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800dbda:	7dfb      	ldrb	r3, [r7, #23]
 800dbdc:	2b0a      	cmp	r3, #10
 800dbde:	d007      	beq.n	800dbf0 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	3b01      	subs	r3, #1
 800dbe4:	69fa      	ldr	r2, [r7, #28]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	dbde      	blt.n	800dba8 <f_gets+0x16>
 800dbea:	e002      	b.n	800dbf2 <f_gets+0x60>
		if (rc != 1) break;
 800dbec:	bf00      	nop
 800dbee:	e000      	b.n	800dbf2 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800dbf0:	bf00      	nop
	}
	*p = 0;
 800dbf2:	69bb      	ldr	r3, [r7, #24]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d001      	beq.n	800dc02 <f_gets+0x70>
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	e000      	b.n	800dc04 <f_gets+0x72>
 800dc02:	2300      	movs	r3, #0
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3720      	adds	r7, #32
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b087      	sub	sp, #28
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	60f8      	str	r0, [r7, #12]
 800dc14:	60b9      	str	r1, [r7, #8]
 800dc16:	4613      	mov	r3, r2
 800dc18:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dc22:	4b1f      	ldr	r3, [pc, #124]	; (800dca0 <FATFS_LinkDriverEx+0x94>)
 800dc24:	7a5b      	ldrb	r3, [r3, #9]
 800dc26:	b2db      	uxtb	r3, r3
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d131      	bne.n	800dc90 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dc2c:	4b1c      	ldr	r3, [pc, #112]	; (800dca0 <FATFS_LinkDriverEx+0x94>)
 800dc2e:	7a5b      	ldrb	r3, [r3, #9]
 800dc30:	b2db      	uxtb	r3, r3
 800dc32:	461a      	mov	r2, r3
 800dc34:	4b1a      	ldr	r3, [pc, #104]	; (800dca0 <FATFS_LinkDriverEx+0x94>)
 800dc36:	2100      	movs	r1, #0
 800dc38:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dc3a:	4b19      	ldr	r3, [pc, #100]	; (800dca0 <FATFS_LinkDriverEx+0x94>)
 800dc3c:	7a5b      	ldrb	r3, [r3, #9]
 800dc3e:	b2db      	uxtb	r3, r3
 800dc40:	4a17      	ldr	r2, [pc, #92]	; (800dca0 <FATFS_LinkDriverEx+0x94>)
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	4413      	add	r3, r2
 800dc46:	68fa      	ldr	r2, [r7, #12]
 800dc48:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dc4a:	4b15      	ldr	r3, [pc, #84]	; (800dca0 <FATFS_LinkDriverEx+0x94>)
 800dc4c:	7a5b      	ldrb	r3, [r3, #9]
 800dc4e:	b2db      	uxtb	r3, r3
 800dc50:	461a      	mov	r2, r3
 800dc52:	4b13      	ldr	r3, [pc, #76]	; (800dca0 <FATFS_LinkDriverEx+0x94>)
 800dc54:	4413      	add	r3, r2
 800dc56:	79fa      	ldrb	r2, [r7, #7]
 800dc58:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dc5a:	4b11      	ldr	r3, [pc, #68]	; (800dca0 <FATFS_LinkDriverEx+0x94>)
 800dc5c:	7a5b      	ldrb	r3, [r3, #9]
 800dc5e:	b2db      	uxtb	r3, r3
 800dc60:	1c5a      	adds	r2, r3, #1
 800dc62:	b2d1      	uxtb	r1, r2
 800dc64:	4a0e      	ldr	r2, [pc, #56]	; (800dca0 <FATFS_LinkDriverEx+0x94>)
 800dc66:	7251      	strb	r1, [r2, #9]
 800dc68:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dc6a:	7dbb      	ldrb	r3, [r7, #22]
 800dc6c:	3330      	adds	r3, #48	; 0x30
 800dc6e:	b2da      	uxtb	r2, r3
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	3301      	adds	r3, #1
 800dc78:	223a      	movs	r2, #58	; 0x3a
 800dc7a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	3302      	adds	r3, #2
 800dc80:	222f      	movs	r2, #47	; 0x2f
 800dc82:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	3303      	adds	r3, #3
 800dc88:	2200      	movs	r2, #0
 800dc8a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dc90:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	371c      	adds	r7, #28
 800dc96:	46bd      	mov	sp, r7
 800dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9c:	4770      	bx	lr
 800dc9e:	bf00      	nop
 800dca0:	240008e8 	.word	0x240008e8

0800dca4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b082      	sub	sp, #8
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dcae:	2200      	movs	r2, #0
 800dcb0:	6839      	ldr	r1, [r7, #0]
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f7ff ffaa 	bl	800dc0c <FATFS_LinkDriverEx>
 800dcb8:	4603      	mov	r3, r0
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3708      	adds	r7, #8
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
	...

0800dcc4 <read_bmp>:
				}
			}
	}
}

void read_bmp(uint8_t file_name[]) {
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
	uint16_t bytesread;
	if (Appli_state == APPLICATION_READY && file_ready == 0) {
 800dccc:	4b1a      	ldr	r3, [pc, #104]	; (800dd38 <read_bmp+0x74>)
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	2b02      	cmp	r3, #2
 800dcd2:	d12d      	bne.n	800dd30 <read_bmp+0x6c>
 800dcd4:	4b19      	ldr	r3, [pc, #100]	; (800dd3c <read_bmp+0x78>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d129      	bne.n	800dd30 <read_bmp+0x6c>
			if (f_open(&MyFile,file_name,FA_READ) != FR_OK ) {
 800dcdc:	2201      	movs	r2, #1
 800dcde:	6879      	ldr	r1, [r7, #4]
 800dce0:	4817      	ldr	r0, [pc, #92]	; (800dd40 <read_bmp+0x7c>)
 800dce2:	f7ff fbb1 	bl	800d448 <f_open>
 800dce6:	4603      	mov	r3, r0
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d002      	beq.n	800dcf2 <read_bmp+0x2e>
				Error_Handler();
 800dcec:	f7f3 f9c4 	bl	8001078 <Error_Handler>

				file_ready = 1;
			}

	}
}
 800dcf0:	e01e      	b.n	800dd30 <read_bmp+0x6c>
				res= f_read(&MyFile,rtext,sizeof(rtext), &bytesread);
 800dcf2:	f107 030e 	add.w	r3, r7, #14
 800dcf6:	2280      	movs	r2, #128	; 0x80
 800dcf8:	4912      	ldr	r1, [pc, #72]	; (800dd44 <read_bmp+0x80>)
 800dcfa:	4811      	ldr	r0, [pc, #68]	; (800dd40 <read_bmp+0x7c>)
 800dcfc:	f7ff fd62 	bl	800d7c4 <f_read>
 800dd00:	4603      	mov	r3, r0
 800dd02:	461a      	mov	r2, r3
 800dd04:	4b10      	ldr	r3, [pc, #64]	; (800dd48 <read_bmp+0x84>)
 800dd06:	701a      	strb	r2, [r3, #0]
				if ((bytesread == 0) || (res != FR_OK)) {
 800dd08:	89fb      	ldrh	r3, [r7, #14]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d003      	beq.n	800dd16 <read_bmp+0x52>
 800dd0e:	4b0e      	ldr	r3, [pc, #56]	; (800dd48 <read_bmp+0x84>)
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d001      	beq.n	800dd1a <read_bmp+0x56>
					Error_Handler();
 800dd16:	f7f3 f9af 	bl	8001078 <Error_Handler>
				if (f_close(&MyFile) != FR_OK) {
 800dd1a:	4809      	ldr	r0, [pc, #36]	; (800dd40 <read_bmp+0x7c>)
 800dd1c:	f7ff ff0f 	bl	800db3e <f_close>
 800dd20:	4603      	mov	r3, r0
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d001      	beq.n	800dd2a <read_bmp+0x66>
					Error_Handler();
 800dd26:	f7f3 f9a7 	bl	8001078 <Error_Handler>
				file_ready = 1;
 800dd2a:	4b04      	ldr	r3, [pc, #16]	; (800dd3c <read_bmp+0x78>)
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	601a      	str	r2, [r3, #0]
}
 800dd30:	bf00      	nop
 800dd32:	3710      	adds	r7, #16
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}
 800dd38:	240008f4 	.word	0x240008f4
 800dd3c:	240008b4 	.word	0x240008b4
 800dd40:	24001614 	.word	0x24001614
 800dd44:	24001594 	.word	0x24001594
 800dd48:	24001844 	.word	0x24001844

0800dd4c <read_txt>:

float * read_txt(uint8_t file_name[], int num_line) {
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b086      	sub	sp, #24
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	6039      	str	r1, [r7, #0]
	uint16_t bytesread;
	if (Appli_state == APPLICATION_READY) {
 800dd56:	4b23      	ldr	r3, [pc, #140]	; (800dde4 <read_txt+0x98>)
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	2b02      	cmp	r3, #2
 800dd5c:	d13e      	bne.n	800dddc <read_txt+0x90>
			if (f_open(&MyFile,file_name,FA_READ) != FR_OK ) {
 800dd5e:	2201      	movs	r2, #1
 800dd60:	6879      	ldr	r1, [r7, #4]
 800dd62:	4821      	ldr	r0, [pc, #132]	; (800dde8 <read_txt+0x9c>)
 800dd64:	f7ff fb70 	bl	800d448 <f_open>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d002      	beq.n	800dd74 <read_txt+0x28>
				Error_Handler();
 800dd6e:	f7f3 f983 	bl	8001078 <Error_Handler>
 800dd72:	e033      	b.n	800dddc <read_txt+0x90>
			}else{
				float * array_out = (float *) malloc(sizeof(float)*num_line);
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	009b      	lsls	r3, r3, #2
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f002 f89d 	bl	800feb8 <malloc>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	613b      	str	r3, [r7, #16]
				for(int i = 0; i < num_line; i++){
 800dd82:	2300      	movs	r3, #0
 800dd84:	617b      	str	r3, [r7, #20]
 800dd86:	e01b      	b.n	800ddc0 <read_txt+0x74>
					memset(rtext,0,sizeof(rtext));
 800dd88:	2280      	movs	r2, #128	; 0x80
 800dd8a:	2100      	movs	r1, #0
 800dd8c:	4817      	ldr	r0, [pc, #92]	; (800ddec <read_txt+0xa0>)
 800dd8e:	f002 f8ae 	bl	800feee <memset>
					f_gets(rtext, sizeof(rtext), &MyFile);
 800dd92:	4a15      	ldr	r2, [pc, #84]	; (800dde8 <read_txt+0x9c>)
 800dd94:	2180      	movs	r1, #128	; 0x80
 800dd96:	4815      	ldr	r0, [pc, #84]	; (800ddec <read_txt+0xa0>)
 800dd98:	f7ff fefb 	bl	800db92 <f_gets>
					array_out[i] = atof(rtext);
 800dd9c:	4813      	ldr	r0, [pc, #76]	; (800ddec <read_txt+0xa0>)
 800dd9e:	f002 f85d 	bl	800fe5c <atof>
 800dda2:	eeb0 7b40 	vmov.f64	d7, d0
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	009b      	lsls	r3, r3, #2
 800ddaa:	693a      	ldr	r2, [r7, #16]
 800ddac:	4413      	add	r3, r2
 800ddae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ddb2:	edc3 7a00 	vstr	s15, [r3]
					int _ = 0;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	60fb      	str	r3, [r7, #12]
				for(int i = 0; i < num_line; i++){
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	617b      	str	r3, [r7, #20]
 800ddc0:	697a      	ldr	r2, [r7, #20]
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	dbdf      	blt.n	800dd88 <read_txt+0x3c>
				}
				if (f_close(&MyFile) != FR_OK) {
 800ddc8:	4807      	ldr	r0, [pc, #28]	; (800dde8 <read_txt+0x9c>)
 800ddca:	f7ff feb8 	bl	800db3e <f_close>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d001      	beq.n	800ddd8 <read_txt+0x8c>
					Error_Handler();
 800ddd4:	f7f3 f950 	bl	8001078 <Error_Handler>
				}
				return array_out;
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	e7ff      	b.n	800dddc <read_txt+0x90>
			}
	}
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3718      	adds	r7, #24
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	240008f4 	.word	0x240008f4
 800dde8:	24001614 	.word	0x24001614
 800ddec:	24001594 	.word	0x24001594

0800ddf0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	490e      	ldr	r1, [pc, #56]	; (800de30 <MX_USB_HOST_Init+0x40>)
 800ddf8:	480e      	ldr	r0, [pc, #56]	; (800de34 <MX_USB_HOST_Init+0x44>)
 800ddfa:	f7fc fa4f 	bl	800a29c <USBH_Init>
 800ddfe:	4603      	mov	r3, r0
 800de00:	2b00      	cmp	r3, #0
 800de02:	d001      	beq.n	800de08 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800de04:	f7f3 f938 	bl	8001078 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800de08:	490b      	ldr	r1, [pc, #44]	; (800de38 <MX_USB_HOST_Init+0x48>)
 800de0a:	480a      	ldr	r0, [pc, #40]	; (800de34 <MX_USB_HOST_Init+0x44>)
 800de0c:	f7fc fad4 	bl	800a3b8 <USBH_RegisterClass>
 800de10:	4603      	mov	r3, r0
 800de12:	2b00      	cmp	r3, #0
 800de14:	d001      	beq.n	800de1a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800de16:	f7f3 f92f 	bl	8001078 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800de1a:	4806      	ldr	r0, [pc, #24]	; (800de34 <MX_USB_HOST_Init+0x44>)
 800de1c:	f7fc fb58 	bl	800a4d0 <USBH_Start>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	d001      	beq.n	800de2a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800de26:	f7f3 f927 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800de2a:	bf00      	nop
 800de2c:	bd80      	pop	{r7, pc}
 800de2e:	bf00      	nop
 800de30:	0800de51 	.word	0x0800de51
 800de34:	240011bc 	.word	0x240011bc
 800de38:	24000010 	.word	0x24000010

0800de3c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800de40:	4802      	ldr	r0, [pc, #8]	; (800de4c <MX_USB_HOST_Process+0x10>)
 800de42:	f7fc fb55 	bl	800a4f0 <USBH_Process>
}
 800de46:	bf00      	nop
 800de48:	bd80      	pop	{r7, pc}
 800de4a:	bf00      	nop
 800de4c:	240011bc 	.word	0x240011bc

0800de50 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	460b      	mov	r3, r1
 800de5a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800de5c:	78fb      	ldrb	r3, [r7, #3]
 800de5e:	3b01      	subs	r3, #1
 800de60:	2b04      	cmp	r3, #4
 800de62:	d823      	bhi.n	800deac <USBH_UserProcess+0x5c>
 800de64:	a201      	add	r2, pc, #4	; (adr r2, 800de6c <USBH_UserProcess+0x1c>)
 800de66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de6a:	bf00      	nop
 800de6c:	0800dead 	.word	0x0800dead
 800de70:	0800de89 	.word	0x0800de89
 800de74:	0800dead 	.word	0x0800dead
 800de78:	0800de91 	.word	0x0800de91
 800de7c:	0800de81 	.word	0x0800de81
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800de80:	4b0e      	ldr	r3, [pc, #56]	; (800debc <USBH_UserProcess+0x6c>)
 800de82:	2203      	movs	r2, #3
 800de84:	701a      	strb	r2, [r3, #0]
  break;
 800de86:	e014      	b.n	800deb2 <USBH_UserProcess+0x62>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800de88:	4b0c      	ldr	r3, [pc, #48]	; (800debc <USBH_UserProcess+0x6c>)
 800de8a:	2202      	movs	r2, #2
 800de8c:	701a      	strb	r2, [r3, #0]
  break;
 800de8e:	e010      	b.n	800deb2 <USBH_UserProcess+0x62>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800de90:	4b0a      	ldr	r3, [pc, #40]	; (800debc <USBH_UserProcess+0x6c>)
 800de92:	2201      	movs	r2, #1
 800de94:	701a      	strb	r2, [r3, #0]
  if (f_mount(&USBH_fatfs,USBHPath,0) != FR_OK)
 800de96:	2200      	movs	r2, #0
 800de98:	4909      	ldr	r1, [pc, #36]	; (800dec0 <USBH_UserProcess+0x70>)
 800de9a:	480a      	ldr	r0, [pc, #40]	; (800dec4 <USBH_UserProcess+0x74>)
 800de9c:	f7ff fa8e 	bl	800d3bc <f_mount>
 800dea0:	4603      	mov	r3, r0
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d004      	beq.n	800deb0 <USBH_UserProcess+0x60>
  {
	  Error_Handler();
 800dea6:	f7f3 f8e7 	bl	8001078 <Error_Handler>
  }
  break;
 800deaa:	e001      	b.n	800deb0 <USBH_UserProcess+0x60>

  default:
  break;
 800deac:	bf00      	nop
 800deae:	e000      	b.n	800deb2 <USBH_UserProcess+0x62>
  break;
 800deb0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800deb2:	bf00      	nop
 800deb4:	3708      	adds	r7, #8
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
 800deba:	bf00      	nop
 800debc:	240008f4 	.word	0x240008f4
 800dec0:	24000b20 	.word	0x24000b20
 800dec4:	24000f88 	.word	0x24000f88

0800dec8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b08a      	sub	sp, #40	; 0x28
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ded0:	f107 0314 	add.w	r3, r7, #20
 800ded4:	2200      	movs	r2, #0
 800ded6:	601a      	str	r2, [r3, #0]
 800ded8:	605a      	str	r2, [r3, #4]
 800deda:	609a      	str	r2, [r3, #8]
 800dedc:	60da      	str	r2, [r3, #12]
 800dede:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a27      	ldr	r2, [pc, #156]	; (800df84 <HAL_HCD_MspInit+0xbc>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d147      	bne.n	800df7a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800deea:	4b27      	ldr	r3, [pc, #156]	; (800df88 <HAL_HCD_MspInit+0xc0>)
 800deec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800def0:	4a25      	ldr	r2, [pc, #148]	; (800df88 <HAL_HCD_MspInit+0xc0>)
 800def2:	f043 0301 	orr.w	r3, r3, #1
 800def6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800defa:	4b23      	ldr	r3, [pc, #140]	; (800df88 <HAL_HCD_MspInit+0xc0>)
 800defc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800df00:	f003 0301 	and.w	r3, r3, #1
 800df04:	613b      	str	r3, [r7, #16]
 800df06:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800df08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df0e:	2302      	movs	r3, #2
 800df10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df12:	2300      	movs	r3, #0
 800df14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800df16:	2300      	movs	r3, #0
 800df18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800df1a:	230a      	movs	r3, #10
 800df1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df1e:	f107 0314 	add.w	r3, r7, #20
 800df22:	4619      	mov	r1, r3
 800df24:	4819      	ldr	r0, [pc, #100]	; (800df8c <HAL_HCD_MspInit+0xc4>)
 800df26:	f7f4 fa83 	bl	8002430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800df2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800df2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df30:	2302      	movs	r3, #2
 800df32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df34:	2300      	movs	r3, #0
 800df36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df38:	2303      	movs	r3, #3
 800df3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800df3c:	230a      	movs	r3, #10
 800df3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df40:	f107 0314 	add.w	r3, r7, #20
 800df44:	4619      	mov	r1, r3
 800df46:	4811      	ldr	r0, [pc, #68]	; (800df8c <HAL_HCD_MspInit+0xc4>)
 800df48:	f7f4 fa72 	bl	8002430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800df4c:	4b0e      	ldr	r3, [pc, #56]	; (800df88 <HAL_HCD_MspInit+0xc0>)
 800df4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800df52:	4a0d      	ldr	r2, [pc, #52]	; (800df88 <HAL_HCD_MspInit+0xc0>)
 800df54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800df58:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800df5c:	4b0a      	ldr	r3, [pc, #40]	; (800df88 <HAL_HCD_MspInit+0xc0>)
 800df5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800df62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df66:	60fb      	str	r3, [r7, #12]
 800df68:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800df6a:	2200      	movs	r2, #0
 800df6c:	2100      	movs	r1, #0
 800df6e:	2065      	movs	r0, #101	; 0x65
 800df70:	f7f3 fd29 	bl	80019c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800df74:	2065      	movs	r0, #101	; 0x65
 800df76:	f7f3 fd40 	bl	80019fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800df7a:	bf00      	nop
 800df7c:	3728      	adds	r7, #40	; 0x28
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
 800df82:	bf00      	nop
 800df84:	40080000 	.word	0x40080000
 800df88:	58024400 	.word	0x58024400
 800df8c:	58020000 	.word	0x58020000

0800df90 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7fc fe79 	bl	800ac96 <USBH_LL_IncTimer>
}
 800dfa4:	bf00      	nop
 800dfa6:	3708      	adds	r7, #8
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}

0800dfac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7fc feb1 	bl	800ad22 <USBH_LL_Connect>
}
 800dfc0:	bf00      	nop
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7fc feba 	bl	800ad50 <USBH_LL_Disconnect>
}
 800dfdc:	bf00      	nop
 800dfde:	3708      	adds	r7, #8
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b083      	sub	sp, #12
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	460b      	mov	r3, r1
 800dfee:	70fb      	strb	r3, [r7, #3]
 800dff0:	4613      	mov	r3, r2
 800dff2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800dff4:	bf00      	nop
 800dff6:	370c      	adds	r7, #12
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr

0800e000 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e00e:	4618      	mov	r0, r3
 800e010:	f7fc fe6b 	bl	800acea <USBH_LL_PortEnabled>
}
 800e014:	bf00      	nop
 800e016:	3708      	adds	r7, #8
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7fc fe6b 	bl	800ad06 <USBH_LL_PortDisabled>
}
 800e030:	bf00      	nop
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e046:	2b01      	cmp	r3, #1
 800e048:	d129      	bne.n	800e09e <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e04a:	4a17      	ldr	r2, [pc, #92]	; (800e0a8 <USBH_LL_Init+0x70>)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	4a14      	ldr	r2, [pc, #80]	; (800e0a8 <USBH_LL_Init+0x70>)
 800e056:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e05a:	4b13      	ldr	r3, [pc, #76]	; (800e0a8 <USBH_LL_Init+0x70>)
 800e05c:	4a13      	ldr	r2, [pc, #76]	; (800e0ac <USBH_LL_Init+0x74>)
 800e05e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 800e060:	4b11      	ldr	r3, [pc, #68]	; (800e0a8 <USBH_LL_Init+0x70>)
 800e062:	2210      	movs	r2, #16
 800e064:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e066:	4b10      	ldr	r3, [pc, #64]	; (800e0a8 <USBH_LL_Init+0x70>)
 800e068:	2201      	movs	r2, #1
 800e06a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e06c:	4b0e      	ldr	r3, [pc, #56]	; (800e0a8 <USBH_LL_Init+0x70>)
 800e06e:	2200      	movs	r2, #0
 800e070:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e072:	4b0d      	ldr	r3, [pc, #52]	; (800e0a8 <USBH_LL_Init+0x70>)
 800e074:	2202      	movs	r2, #2
 800e076:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e078:	4b0b      	ldr	r3, [pc, #44]	; (800e0a8 <USBH_LL_Init+0x70>)
 800e07a:	2200      	movs	r2, #0
 800e07c:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e07e:	480a      	ldr	r0, [pc, #40]	; (800e0a8 <USBH_LL_Init+0x70>)
 800e080:	f7f4 fb9f 	bl	80027c2 <HAL_HCD_Init>
 800e084:	4603      	mov	r3, r0
 800e086:	2b00      	cmp	r3, #0
 800e088:	d001      	beq.n	800e08e <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 800e08a:	f7f2 fff5 	bl	8001078 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e08e:	4806      	ldr	r0, [pc, #24]	; (800e0a8 <USBH_LL_Init+0x70>)
 800e090:	f7f4 ffa2 	bl	8002fd8 <HAL_HCD_GetCurrentFrame>
 800e094:	4603      	mov	r3, r0
 800e096:	4619      	mov	r1, r3
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f7fc fded 	bl	800ac78 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e09e:	2300      	movs	r3, #0
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3708      	adds	r7, #8
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}
 800e0a8:	24001854 	.word	0x24001854
 800e0ac:	40080000 	.word	0x40080000

0800e0b0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7f4 ff0e 	bl	8002ee8 <HAL_HCD_Start>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e0d0:	7bfb      	ldrb	r3, [r7, #15]
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f000 f990 	bl	800e3f8 <USBH_Get_USB_Status>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3710      	adds	r7, #16
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}

0800e0e6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e0e6:	b580      	push	{r7, lr}
 800e0e8:	b084      	sub	sp, #16
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7f4 ff16 	bl	8002f2e <HAL_HCD_Stop>
 800e102:	4603      	mov	r3, r0
 800e104:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e106:	7bfb      	ldrb	r3, [r7, #15]
 800e108:	4618      	mov	r0, r3
 800e10a:	f000 f975 	bl	800e3f8 <USBH_Get_USB_Status>
 800e10e:	4603      	mov	r3, r0
 800e110:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e112:	7bbb      	ldrb	r3, [r7, #14]
}
 800e114:	4618      	mov	r0, r3
 800e116:	3710      	adds	r7, #16
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b084      	sub	sp, #16
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e124:	2301      	movs	r3, #1
 800e126:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e12e:	4618      	mov	r0, r3
 800e130:	f7f4 ff60 	bl	8002ff4 <HAL_HCD_GetCurrentSpeed>
 800e134:	4603      	mov	r3, r0
 800e136:	2b01      	cmp	r3, #1
 800e138:	d007      	beq.n	800e14a <USBH_LL_GetSpeed+0x2e>
 800e13a:	2b01      	cmp	r3, #1
 800e13c:	d302      	bcc.n	800e144 <USBH_LL_GetSpeed+0x28>
 800e13e:	2b02      	cmp	r3, #2
 800e140:	d006      	beq.n	800e150 <USBH_LL_GetSpeed+0x34>
 800e142:	e008      	b.n	800e156 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e144:	2300      	movs	r3, #0
 800e146:	73fb      	strb	r3, [r7, #15]
    break;
 800e148:	e008      	b.n	800e15c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e14a:	2301      	movs	r3, #1
 800e14c:	73fb      	strb	r3, [r7, #15]
    break;
 800e14e:	e005      	b.n	800e15c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e150:	2302      	movs	r3, #2
 800e152:	73fb      	strb	r3, [r7, #15]
    break;
 800e154:	e002      	b.n	800e15c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800e156:	2301      	movs	r3, #1
 800e158:	73fb      	strb	r3, [r7, #15]
    break;
 800e15a:	bf00      	nop
  }
  return  speed;
 800e15c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3710      	adds	r7, #16
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}

0800e166 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e166:	b580      	push	{r7, lr}
 800e168:	b084      	sub	sp, #16
 800e16a:	af00      	add	r7, sp, #0
 800e16c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e16e:	2300      	movs	r3, #0
 800e170:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e172:	2300      	movs	r3, #0
 800e174:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7f4 fef3 	bl	8002f68 <HAL_HCD_ResetPort>
 800e182:	4603      	mov	r3, r0
 800e184:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e186:	7bfb      	ldrb	r3, [r7, #15]
 800e188:	4618      	mov	r0, r3
 800e18a:	f000 f935 	bl	800e3f8 <USBH_Get_USB_Status>
 800e18e:	4603      	mov	r3, r0
 800e190:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e192:	7bbb      	ldrb	r3, [r7, #14]
}
 800e194:	4618      	mov	r0, r3
 800e196:	3710      	adds	r7, #16
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b082      	sub	sp, #8
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e1ae:	78fa      	ldrb	r2, [r7, #3]
 800e1b0:	4611      	mov	r1, r2
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7f4 fefb 	bl	8002fae <HAL_HCD_HC_GetXferCount>
 800e1b8:	4603      	mov	r3, r0
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3708      	adds	r7, #8
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}

0800e1c2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e1c2:	b590      	push	{r4, r7, lr}
 800e1c4:	b089      	sub	sp, #36	; 0x24
 800e1c6:	af04      	add	r7, sp, #16
 800e1c8:	6078      	str	r0, [r7, #4]
 800e1ca:	4608      	mov	r0, r1
 800e1cc:	4611      	mov	r1, r2
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	70fb      	strb	r3, [r7, #3]
 800e1d4:	460b      	mov	r3, r1
 800e1d6:	70bb      	strb	r3, [r7, #2]
 800e1d8:	4613      	mov	r3, r2
 800e1da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e1ea:	787c      	ldrb	r4, [r7, #1]
 800e1ec:	78ba      	ldrb	r2, [r7, #2]
 800e1ee:	78f9      	ldrb	r1, [r7, #3]
 800e1f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e1f2:	9302      	str	r3, [sp, #8]
 800e1f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e1f8:	9301      	str	r3, [sp, #4]
 800e1fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e1fe:	9300      	str	r3, [sp, #0]
 800e200:	4623      	mov	r3, r4
 800e202:	f7f4 fb40 	bl	8002886 <HAL_HCD_HC_Init>
 800e206:	4603      	mov	r3, r0
 800e208:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e20a:	7bfb      	ldrb	r3, [r7, #15]
 800e20c:	4618      	mov	r0, r3
 800e20e:	f000 f8f3 	bl	800e3f8 <USBH_Get_USB_Status>
 800e212:	4603      	mov	r3, r0
 800e214:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e216:	7bbb      	ldrb	r3, [r7, #14]
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3714      	adds	r7, #20
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd90      	pop	{r4, r7, pc}

0800e220 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	460b      	mov	r3, r1
 800e22a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e22c:	2300      	movs	r3, #0
 800e22e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e230:	2300      	movs	r3, #0
 800e232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e23a:	78fa      	ldrb	r2, [r7, #3]
 800e23c:	4611      	mov	r1, r2
 800e23e:	4618      	mov	r0, r3
 800e240:	f7f4 fbb9 	bl	80029b6 <HAL_HCD_HC_Halt>
 800e244:	4603      	mov	r3, r0
 800e246:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e248:	7bfb      	ldrb	r3, [r7, #15]
 800e24a:	4618      	mov	r0, r3
 800e24c:	f000 f8d4 	bl	800e3f8 <USBH_Get_USB_Status>
 800e250:	4603      	mov	r3, r0
 800e252:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e254:	7bbb      	ldrb	r3, [r7, #14]
}
 800e256:	4618      	mov	r0, r3
 800e258:	3710      	adds	r7, #16
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}

0800e25e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e25e:	b590      	push	{r4, r7, lr}
 800e260:	b089      	sub	sp, #36	; 0x24
 800e262:	af04      	add	r7, sp, #16
 800e264:	6078      	str	r0, [r7, #4]
 800e266:	4608      	mov	r0, r1
 800e268:	4611      	mov	r1, r2
 800e26a:	461a      	mov	r2, r3
 800e26c:	4603      	mov	r3, r0
 800e26e:	70fb      	strb	r3, [r7, #3]
 800e270:	460b      	mov	r3, r1
 800e272:	70bb      	strb	r3, [r7, #2]
 800e274:	4613      	mov	r3, r2
 800e276:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e278:	2300      	movs	r3, #0
 800e27a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e27c:	2300      	movs	r3, #0
 800e27e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e286:	787c      	ldrb	r4, [r7, #1]
 800e288:	78ba      	ldrb	r2, [r7, #2]
 800e28a:	78f9      	ldrb	r1, [r7, #3]
 800e28c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e290:	9303      	str	r3, [sp, #12]
 800e292:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e294:	9302      	str	r3, [sp, #8]
 800e296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e298:	9301      	str	r3, [sp, #4]
 800e29a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e29e:	9300      	str	r3, [sp, #0]
 800e2a0:	4623      	mov	r3, r4
 800e2a2:	f7f4 fbab 	bl	80029fc <HAL_HCD_HC_SubmitRequest>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e2aa:	7bfb      	ldrb	r3, [r7, #15]
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f000 f8a3 	bl	800e3f8 <USBH_Get_USB_Status>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3714      	adds	r7, #20
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd90      	pop	{r4, r7, pc}

0800e2c0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b082      	sub	sp, #8
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	460b      	mov	r3, r1
 800e2ca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e2d2:	78fa      	ldrb	r2, [r7, #3]
 800e2d4:	4611      	mov	r1, r2
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7f4 fe54 	bl	8002f84 <HAL_HCD_HC_GetURBState>
 800e2dc:	4603      	mov	r3, r0
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3708      	adds	r7, #8
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}

0800e2e6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e2e6:	b580      	push	{r7, lr}
 800e2e8:	b082      	sub	sp, #8
 800e2ea:	af00      	add	r7, sp, #0
 800e2ec:	6078      	str	r0, [r7, #4]
 800e2ee:	460b      	mov	r3, r1
 800e2f0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	d103      	bne.n	800e304 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e2fc:	78fb      	ldrb	r3, [r7, #3]
 800e2fe:	4618      	mov	r0, r3
 800e300:	f000 f8a6 	bl	800e450 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e304:	20c8      	movs	r0, #200	; 0xc8
 800e306:	f7f3 fa41 	bl	800178c <HAL_Delay>
  return USBH_OK;
 800e30a:	2300      	movs	r3, #0
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3708      	adds	r7, #8
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}

0800e314 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e314:	b480      	push	{r7}
 800e316:	b085      	sub	sp, #20
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	460b      	mov	r3, r1
 800e31e:	70fb      	strb	r3, [r7, #3]
 800e320:	4613      	mov	r3, r2
 800e322:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e32a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e32c:	78fa      	ldrb	r2, [r7, #3]
 800e32e:	68f9      	ldr	r1, [r7, #12]
 800e330:	4613      	mov	r3, r2
 800e332:	009b      	lsls	r3, r3, #2
 800e334:	4413      	add	r3, r2
 800e336:	00db      	lsls	r3, r3, #3
 800e338:	440b      	add	r3, r1
 800e33a:	333b      	adds	r3, #59	; 0x3b
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d00a      	beq.n	800e358 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e342:	78fa      	ldrb	r2, [r7, #3]
 800e344:	68f9      	ldr	r1, [r7, #12]
 800e346:	4613      	mov	r3, r2
 800e348:	009b      	lsls	r3, r3, #2
 800e34a:	4413      	add	r3, r2
 800e34c:	00db      	lsls	r3, r3, #3
 800e34e:	440b      	add	r3, r1
 800e350:	3350      	adds	r3, #80	; 0x50
 800e352:	78ba      	ldrb	r2, [r7, #2]
 800e354:	701a      	strb	r2, [r3, #0]
 800e356:	e009      	b.n	800e36c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e358:	78fa      	ldrb	r2, [r7, #3]
 800e35a:	68f9      	ldr	r1, [r7, #12]
 800e35c:	4613      	mov	r3, r2
 800e35e:	009b      	lsls	r3, r3, #2
 800e360:	4413      	add	r3, r2
 800e362:	00db      	lsls	r3, r3, #3
 800e364:	440b      	add	r3, r1
 800e366:	3351      	adds	r3, #81	; 0x51
 800e368:	78ba      	ldrb	r2, [r7, #2]
 800e36a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e36c:	2300      	movs	r3, #0
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3714      	adds	r7, #20
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr

0800e37a <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e37a:	b480      	push	{r7}
 800e37c:	b085      	sub	sp, #20
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
 800e382:	460b      	mov	r3, r1
 800e384:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e386:	2300      	movs	r3, #0
 800e388:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e390:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e392:	78fa      	ldrb	r2, [r7, #3]
 800e394:	68b9      	ldr	r1, [r7, #8]
 800e396:	4613      	mov	r3, r2
 800e398:	009b      	lsls	r3, r3, #2
 800e39a:	4413      	add	r3, r2
 800e39c:	00db      	lsls	r3, r3, #3
 800e39e:	440b      	add	r3, r1
 800e3a0:	333b      	adds	r3, #59	; 0x3b
 800e3a2:	781b      	ldrb	r3, [r3, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d00a      	beq.n	800e3be <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e3a8:	78fa      	ldrb	r2, [r7, #3]
 800e3aa:	68b9      	ldr	r1, [r7, #8]
 800e3ac:	4613      	mov	r3, r2
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	4413      	add	r3, r2
 800e3b2:	00db      	lsls	r3, r3, #3
 800e3b4:	440b      	add	r3, r1
 800e3b6:	3350      	adds	r3, #80	; 0x50
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	73fb      	strb	r3, [r7, #15]
 800e3bc:	e009      	b.n	800e3d2 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e3be:	78fa      	ldrb	r2, [r7, #3]
 800e3c0:	68b9      	ldr	r1, [r7, #8]
 800e3c2:	4613      	mov	r3, r2
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	4413      	add	r3, r2
 800e3c8:	00db      	lsls	r3, r3, #3
 800e3ca:	440b      	add	r3, r1
 800e3cc:	3351      	adds	r3, #81	; 0x51
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3714      	adds	r7, #20
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr

0800e3e0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f7f3 f9cf 	bl	800178c <HAL_Delay>
}
 800e3ee:	bf00      	nop
 800e3f0:	3708      	adds	r7, #8
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
	...

0800e3f8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b085      	sub	sp, #20
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	4603      	mov	r3, r0
 800e400:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e402:	2300      	movs	r3, #0
 800e404:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e406:	79fb      	ldrb	r3, [r7, #7]
 800e408:	2b03      	cmp	r3, #3
 800e40a:	d817      	bhi.n	800e43c <USBH_Get_USB_Status+0x44>
 800e40c:	a201      	add	r2, pc, #4	; (adr r2, 800e414 <USBH_Get_USB_Status+0x1c>)
 800e40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e412:	bf00      	nop
 800e414:	0800e425 	.word	0x0800e425
 800e418:	0800e42b 	.word	0x0800e42b
 800e41c:	0800e431 	.word	0x0800e431
 800e420:	0800e437 	.word	0x0800e437
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e424:	2300      	movs	r3, #0
 800e426:	73fb      	strb	r3, [r7, #15]
    break;
 800e428:	e00b      	b.n	800e442 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e42a:	2302      	movs	r3, #2
 800e42c:	73fb      	strb	r3, [r7, #15]
    break;
 800e42e:	e008      	b.n	800e442 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e430:	2301      	movs	r3, #1
 800e432:	73fb      	strb	r3, [r7, #15]
    break;
 800e434:	e005      	b.n	800e442 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e436:	2302      	movs	r3, #2
 800e438:	73fb      	strb	r3, [r7, #15]
    break;
 800e43a:	e002      	b.n	800e442 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e43c:	2302      	movs	r3, #2
 800e43e:	73fb      	strb	r3, [r7, #15]
    break;
 800e440:	bf00      	nop
  }
  return usb_status;
 800e442:	7bfb      	ldrb	r3, [r7, #15]
}
 800e444:	4618      	mov	r0, r3
 800e446:	3714      	adds	r7, #20
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	4603      	mov	r3, r0
 800e458:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e45a:	79fb      	ldrb	r3, [r7, #7]
 800e45c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e45e:	79fb      	ldrb	r3, [r7, #7]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d102      	bne.n	800e46a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e464:	2301      	movs	r3, #1
 800e466:	73fb      	strb	r3, [r7, #15]
 800e468:	e001      	b.n	800e46e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e46a:	2300      	movs	r3, #0
 800e46c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 800e46e:	7bfb      	ldrb	r3, [r7, #15]
 800e470:	461a      	mov	r2, r3
 800e472:	2140      	movs	r1, #64	; 0x40
 800e474:	4803      	ldr	r0, [pc, #12]	; (800e484 <MX_DriverVbusFS+0x34>)
 800e476:	f7f4 f98b 	bl	8002790 <HAL_GPIO_WritePin>
}
 800e47a:	bf00      	nop
 800e47c:	3710      	adds	r7, #16
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	58021800 	.word	0x58021800

0800e488 <sine_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800e488:	b480      	push	{r7}
 800e48a:	b085      	sub	sp, #20
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
 800e490:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_SINE_MODEL_ACTIVATIONS_ALIGNMENT));
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	691b      	ldr	r3, [r3, #16]
 800e496:	3303      	adds	r3, #3
 800e498:	f023 0303 	bic.w	r3, r3, #3
 800e49c:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    dense_input_output_array.data = AI_PTR(NULL);
 800e49e:	4b16      	ldr	r3, [pc, #88]	; (800e4f8 <sine_model_configure_activations+0x70>)
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	609a      	str	r2, [r3, #8]
    dense_input_output_array.data_start = AI_PTR(NULL);
 800e4a4:	4b14      	ldr	r3, [pc, #80]	; (800e4f8 <sine_model_configure_activations+0x70>)
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 800e4aa:	4a14      	ldr	r2, [pc, #80]	; (800e4fc <sine_model_configure_activations+0x74>)
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 800e4b0:	4a12      	ldr	r2, [pc, #72]	; (800e4fc <sine_model_configure_activations+0x74>)
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 0);
 800e4b6:	4a12      	ldr	r2, [pc, #72]	; (800e500 <sine_model_configure_activations+0x78>)
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 0);
 800e4bc:	4a10      	ldr	r2, [pc, #64]	; (800e500 <sine_model_configure_activations+0x78>)
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 64);
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	3340      	adds	r3, #64	; 0x40
 800e4c6:	4a0f      	ldr	r2, [pc, #60]	; (800e504 <sine_model_configure_activations+0x7c>)
 800e4c8:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 64);
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	3340      	adds	r3, #64	; 0x40
 800e4ce:	4a0d      	ldr	r2, [pc, #52]	; (800e504 <sine_model_configure_activations+0x7c>)
 800e4d0:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 0);
 800e4d2:	4a0d      	ldr	r2, [pc, #52]	; (800e508 <sine_model_configure_activations+0x80>)
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 0);
 800e4d8:	4a0b      	ldr	r2, [pc, #44]	; (800e508 <sine_model_configure_activations+0x80>)
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(NULL);
 800e4de:	4b0b      	ldr	r3, [pc, #44]	; (800e50c <sine_model_configure_activations+0x84>)
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	609a      	str	r2, [r3, #8]
    dense_2_output_array.data_start = AI_PTR(NULL);
 800e4e4:	4b09      	ldr	r3, [pc, #36]	; (800e50c <sine_model_configure_activations+0x84>)
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800e4ea:	2301      	movs	r3, #1
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3714      	adds	r7, #20
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f6:	4770      	bx	lr
 800e4f8:	240000f0 	.word	0x240000f0
 800e4fc:	24000100 	.word	0x24000100
 800e500:	24000110 	.word	0x24000110
 800e504:	24000120 	.word	0x24000120
 800e508:	24000130 	.word	0x24000130
 800e50c:	24000140 	.word	0x24000140

0800e510 <sine_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800e510:	b480      	push	{r7}
 800e512:	b085      	sub	sp, #20
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	691b      	ldr	r3, [r3, #16]
 800e51e:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800e520:	4b2f      	ldr	r3, [pc, #188]	; (800e5e0 <sine_model_configure_weights+0xd0>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e528:	4a2d      	ldr	r2, [pc, #180]	; (800e5e0 <sine_model_configure_weights+0xd0>)
 800e52a:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 1280);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e532:	4a2b      	ldr	r2, [pc, #172]	; (800e5e0 <sine_model_configure_weights+0xd0>)
 800e534:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 1280);
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e53c:	4a28      	ldr	r2, [pc, #160]	; (800e5e0 <sine_model_configure_weights+0xd0>)
 800e53e:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800e540:	4b28      	ldr	r3, [pc, #160]	; (800e5e4 <sine_model_configure_weights+0xd4>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e548:	4a26      	ldr	r2, [pc, #152]	; (800e5e4 <sine_model_configure_weights+0xd4>)
 800e54a:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 1216);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800e552:	4a24      	ldr	r2, [pc, #144]	; (800e5e4 <sine_model_configure_weights+0xd4>)
 800e554:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 1216);
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800e55c:	4a21      	ldr	r2, [pc, #132]	; (800e5e4 <sine_model_configure_weights+0xd4>)
 800e55e:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800e560:	4b21      	ldr	r3, [pc, #132]	; (800e5e8 <sine_model_configure_weights+0xd8>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e568:	4a1f      	ldr	r2, [pc, #124]	; (800e5e8 <sine_model_configure_weights+0xd8>)
 800e56a:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 1152);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800e572:	4a1d      	ldr	r2, [pc, #116]	; (800e5e8 <sine_model_configure_weights+0xd8>)
 800e574:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 1152);
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800e57c:	4a1a      	ldr	r2, [pc, #104]	; (800e5e8 <sine_model_configure_weights+0xd8>)
 800e57e:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800e580:	4b1a      	ldr	r3, [pc, #104]	; (800e5ec <sine_model_configure_weights+0xdc>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e588:	4a18      	ldr	r2, [pc, #96]	; (800e5ec <sine_model_configure_weights+0xdc>)
 800e58a:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 128);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	3380      	adds	r3, #128	; 0x80
 800e590:	4a16      	ldr	r2, [pc, #88]	; (800e5ec <sine_model_configure_weights+0xdc>)
 800e592:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 128);
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	3380      	adds	r3, #128	; 0x80
 800e598:	4a14      	ldr	r2, [pc, #80]	; (800e5ec <sine_model_configure_weights+0xdc>)
 800e59a:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800e59c:	4b14      	ldr	r3, [pc, #80]	; (800e5f0 <sine_model_configure_weights+0xe0>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e5a4:	4a12      	ldr	r2, [pc, #72]	; (800e5f0 <sine_model_configure_weights+0xe0>)
 800e5a6:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 64);
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	3340      	adds	r3, #64	; 0x40
 800e5ac:	4a10      	ldr	r2, [pc, #64]	; (800e5f0 <sine_model_configure_weights+0xe0>)
 800e5ae:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 64);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	3340      	adds	r3, #64	; 0x40
 800e5b4:	4a0e      	ldr	r2, [pc, #56]	; (800e5f0 <sine_model_configure_weights+0xe0>)
 800e5b6:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800e5b8:	4b0e      	ldr	r3, [pc, #56]	; (800e5f4 <sine_model_configure_weights+0xe4>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e5c0:	4a0c      	ldr	r2, [pc, #48]	; (800e5f4 <sine_model_configure_weights+0xe4>)
 800e5c2:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 800e5c4:	4a0b      	ldr	r2, [pc, #44]	; (800e5f4 <sine_model_configure_weights+0xe4>)
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 800e5ca:	4a0a      	ldr	r2, [pc, #40]	; (800e5f4 <sine_model_configure_weights+0xe4>)
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800e5d0:	2301      	movs	r3, #1
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3714      	adds	r7, #20
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5dc:	4770      	bx	lr
 800e5de:	bf00      	nop
 800e5e0:	24000090 	.word	0x24000090
 800e5e4:	240000a0 	.word	0x240000a0
 800e5e8:	240000b0 	.word	0x240000b0
 800e5ec:	240000c0 	.word	0x240000c0
 800e5f0:	240000d0 	.word	0x240000d0
 800e5f4:	240000e0 	.word	0x240000e0

0800e5f8 <ai_sine_model_create>:
}

AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af02      	add	r7, sp, #8
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800e602:	2300      	movs	r3, #0
 800e604:	9301      	str	r3, [sp, #4]
 800e606:	2303      	movs	r3, #3
 800e608:	9300      	str	r3, [sp, #0]
 800e60a:	2301      	movs	r3, #1
 800e60c:	4a04      	ldr	r2, [pc, #16]	; (800e620 <ai_sine_model_create+0x28>)
 800e60e:	6839      	ldr	r1, [r7, #0]
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f000 f861 	bl	800e6d8 <ai_platform_network_create>
 800e616:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3708      	adds	r7, #8
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	24000030 	.word	0x24000030

0800e624 <ai_sine_model_init>:
}

AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b084      	sub	sp, #16
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800e62e:	6839      	ldr	r1, [r7, #0]
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f000 f8d5 	bl	800e7e0 <ai_platform_network_init>
 800e636:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d101      	bne.n	800e642 <ai_sine_model_init+0x1e>
 800e63e:	2300      	movs	r3, #0
 800e640:	e02b      	b.n	800e69a <ai_sine_model_init+0x76>

  ai_bool ok = true;
 800e642:	2301      	movs	r3, #1
 800e644:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_weights(net_ctx, &params->params);
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	4619      	mov	r1, r3
 800e64a:	68f8      	ldr	r0, [r7, #12]
 800e64c:	f7ff ff60 	bl	800e510 <sine_model_configure_weights>
 800e650:	4603      	mov	r3, r0
 800e652:	461a      	mov	r2, r3
 800e654:	7afb      	ldrb	r3, [r7, #11]
 800e656:	4013      	ands	r3, r2
 800e658:	2b00      	cmp	r3, #0
 800e65a:	bf14      	ite	ne
 800e65c:	2301      	movne	r3, #1
 800e65e:	2300      	moveq	r3, #0
 800e660:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, &params->activations);
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	3318      	adds	r3, #24
 800e666:	4619      	mov	r1, r3
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f7ff ff0d 	bl	800e488 <sine_model_configure_activations>
 800e66e:	4603      	mov	r3, r0
 800e670:	461a      	mov	r2, r3
 800e672:	7afb      	ldrb	r3, [r7, #11]
 800e674:	4013      	ands	r3, r2
 800e676:	2b00      	cmp	r3, #0
 800e678:	bf14      	ite	ne
 800e67a:	2301      	movne	r3, #1
 800e67c:	2300      	moveq	r3, #0
 800e67e:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f000 f995 	bl	800e9b0 <ai_platform_network_post_init>
 800e686:	4603      	mov	r3, r0
 800e688:	461a      	mov	r2, r3
 800e68a:	7afb      	ldrb	r3, [r7, #11]
 800e68c:	4013      	ands	r3, r2
 800e68e:	2b00      	cmp	r3, #0
 800e690:	bf14      	ite	ne
 800e692:	2301      	movne	r3, #1
 800e694:	2300      	moveq	r3, #0
 800e696:	72fb      	strb	r3, [r7, #11]

  return ok;
 800e698:	7afb      	ldrb	r3, [r7, #11]
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3710      	adds	r7, #16
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}

0800e6a2 <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800e6a2:	b580      	push	{r7, lr}
 800e6a4:	b084      	sub	sp, #16
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	60f8      	str	r0, [r7, #12]
 800e6aa:	60b9      	str	r1, [r7, #8]
 800e6ac:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800e6ae:	687a      	ldr	r2, [r7, #4]
 800e6b0:	68b9      	ldr	r1, [r7, #8]
 800e6b2:	68f8      	ldr	r0, [r7, #12]
 800e6b4:	f000 fa28 	bl	800eb08 <ai_platform_network_process>
 800e6b8:	4603      	mov	r3, r0
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3710      	adds	r7, #16
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}
	...

0800e6c4 <ai_sine_model_data_weights_get>:
#include "sine_model_data.h"

ai_handle ai_sine_model_data_weights_get(void)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	af00      	add	r7, sp, #0
    0x0e, 0xbd, 0xbe, 0x52, 0x5e, 0xf7, 0x3d, 0x2a, 0xc9,
    0x5e, 0x3f, 0xfd, 0x7b, 0x8a, 0x3e, 0x73, 0x9f, 0x11,
    0xbf, 0xac, 0x72, 0x91, 0x3e, 0xdc, 0xb9, 0xe3, 0xbe
  };

  return AI_HANDLE_PTR(s_sine_model_weights);
 800e6c8:	4b02      	ldr	r3, [pc, #8]	; (800e6d4 <ai_sine_model_data_weights_get+0x10>)

}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr
 800e6d4:	08013ea0 	.word	0x08013ea0

0800e6d8 <ai_platform_network_create>:
 800e6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6da:	4d36      	ldr	r5, [pc, #216]	; (800e7b4 <ai_platform_network_create+0xdc>)
 800e6dc:	b083      	sub	sp, #12
 800e6de:	4e36      	ldr	r6, [pc, #216]	; (800e7b8 <ai_platform_network_create+0xe0>)
 800e6e0:	6829      	ldr	r1, [r5, #0]
 800e6e2:	f89d 7020 	ldrb.w	r7, [sp, #32]
 800e6e6:	f021 0101 	bic.w	r1, r1, #1
 800e6ea:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800e6ee:	6029      	str	r1, [r5, #0]
 800e6f0:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 800e6f4:	6831      	ldr	r1, [r6, #0]
 800e6f6:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800e6fa:	194d      	adds	r5, r1, r5
 800e6fc:	2d01      	cmp	r5, #1
 800e6fe:	d92f      	bls.n	800e760 <ai_platform_network_create+0x88>
 800e700:	f240 4549 	movw	r5, #1097	; 0x449
 800e704:	42a9      	cmp	r1, r5
 800e706:	d02b      	beq.n	800e760 <ai_platform_network_create+0x88>
 800e708:	492c      	ldr	r1, [pc, #176]	; (800e7bc <ai_platform_network_create+0xe4>)
 800e70a:	6809      	ldr	r1, [r1, #0]
 800e70c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800e710:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800e714:	d015      	beq.n	800e742 <ai_platform_network_create+0x6a>
 800e716:	2800      	cmp	r0, #0
 800e718:	d031      	beq.n	800e77e <ai_platform_network_create+0xa6>
 800e71a:	461e      	mov	r6, r3
 800e71c:	4613      	mov	r3, r2
 800e71e:	4a28      	ldr	r2, [pc, #160]	; (800e7c0 <ai_platform_network_create+0xe8>)
 800e720:	4605      	mov	r5, r0
 800e722:	601a      	str	r2, [r3, #0]
 800e724:	6003      	str	r3, [r0, #0]
 800e726:	f000 fc9f 	bl	800f068 <core_init>
 800e72a:	2800      	cmp	r0, #0
 800e72c:	d02b      	beq.n	800e786 <ai_platform_network_create+0xae>
 800e72e:	0223      	lsls	r3, r4, #8
 800e730:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e734:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800e738:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 800e73c:	d92e      	bls.n	800e79c <ai_platform_network_create+0xc4>
 800e73e:	2301      	movs	r3, #1
 800e740:	e022      	b.n	800e788 <ai_platform_network_create+0xb0>
 800e742:	4920      	ldr	r1, [pc, #128]	; (800e7c4 <ai_platform_network_create+0xec>)
 800e744:	2501      	movs	r5, #1
 800e746:	460e      	mov	r6, r1
 800e748:	600d      	str	r5, [r1, #0]
 800e74a:	6831      	ldr	r1, [r6, #0]
 800e74c:	2900      	cmp	r1, #0
 800e74e:	d1fc      	bne.n	800e74a <ai_platform_network_create+0x72>
 800e750:	491d      	ldr	r1, [pc, #116]	; (800e7c8 <ai_platform_network_create+0xf0>)
 800e752:	4e1e      	ldr	r6, [pc, #120]	; (800e7cc <ai_platform_network_create+0xf4>)
 800e754:	4d1e      	ldr	r5, [pc, #120]	; (800e7d0 <ai_platform_network_create+0xf8>)
 800e756:	600e      	str	r6, [r1, #0]
 800e758:	6809      	ldr	r1, [r1, #0]
 800e75a:	42a9      	cmp	r1, r5
 800e75c:	d0db      	beq.n	800e716 <ai_platform_network_create+0x3e>
 800e75e:	e7fe      	b.n	800e75e <ai_platform_network_create+0x86>
 800e760:	491c      	ldr	r1, [pc, #112]	; (800e7d4 <ai_platform_network_create+0xfc>)
 800e762:	2501      	movs	r5, #1
 800e764:	460e      	mov	r6, r1
 800e766:	600d      	str	r5, [r1, #0]
 800e768:	6831      	ldr	r1, [r6, #0]
 800e76a:	2900      	cmp	r1, #0
 800e76c:	d1fc      	bne.n	800e768 <ai_platform_network_create+0x90>
 800e76e:	491a      	ldr	r1, [pc, #104]	; (800e7d8 <ai_platform_network_create+0x100>)
 800e770:	4e16      	ldr	r6, [pc, #88]	; (800e7cc <ai_platform_network_create+0xf4>)
 800e772:	4d17      	ldr	r5, [pc, #92]	; (800e7d0 <ai_platform_network_create+0xf8>)
 800e774:	600e      	str	r6, [r1, #0]
 800e776:	6809      	ldr	r1, [r1, #0]
 800e778:	42a9      	cmp	r1, r5
 800e77a:	d0cc      	beq.n	800e716 <ai_platform_network_create+0x3e>
 800e77c:	e7fe      	b.n	800e77c <ai_platform_network_create+0xa4>
 800e77e:	f241 0010 	movw	r0, #4112	; 0x1010
 800e782:	b003      	add	sp, #12
 800e784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e786:	2330      	movs	r3, #48	; 0x30
 800e788:	2100      	movs	r1, #0
 800e78a:	2210      	movs	r2, #16
 800e78c:	6029      	str	r1, [r5, #0]
 800e78e:	2000      	movs	r0, #0
 800e790:	f363 0007 	bfi	r0, r3, #0, #8
 800e794:	f362 201f 	bfi	r0, r2, #8, #24
 800e798:	b003      	add	sp, #12
 800e79a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e79c:	4b0f      	ldr	r3, [pc, #60]	; (800e7dc <ai_platform_network_create+0x104>)
 800e79e:	a802      	add	r0, sp, #8
 800e7a0:	f840 3d04 	str.w	r3, [r0, #-4]!
 800e7a4:	f001 fa82 	bl	800fcac <ai_check_custom_types>
 800e7a8:	b110      	cbz	r0, 800e7b0 <ai_platform_network_create+0xd8>
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	4613      	mov	r3, r2
 800e7ae:	e7ee      	b.n	800e78e <ai_platform_network_create+0xb6>
 800e7b0:	2302      	movs	r3, #2
 800e7b2:	e7e9      	b.n	800e788 <ai_platform_network_create+0xb0>
 800e7b4:	e0002000 	.word	0xe0002000
 800e7b8:	e0042000 	.word	0xe0042000
 800e7bc:	5c001000 	.word	0x5c001000
 800e7c0:	a1c00100 	.word	0xa1c00100
 800e7c4:	58024c08 	.word	0x58024c08
 800e7c8:	58024c00 	.word	0x58024c00
 800e7cc:	f407a5c2 	.word	0xf407a5c2
 800e7d0:	b5e8b5cd 	.word	0xb5e8b5cd
 800e7d4:	40023008 	.word	0x40023008
 800e7d8:	40023000 	.word	0x40023000
 800e7dc:	84048403 	.word	0x84048403

0800e7e0 <ai_platform_network_init>:
 800e7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7e2:	2800      	cmp	r0, #0
 800e7e4:	d05e      	beq.n	800e8a4 <ai_platform_network_init+0xc4>
 800e7e6:	4b68      	ldr	r3, [pc, #416]	; (800e988 <ai_platform_network_init+0x1a8>)
 800e7e8:	6802      	ldr	r2, [r0, #0]
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d15a      	bne.n	800e8a4 <ai_platform_network_init+0xc4>
 800e7ee:	4a67      	ldr	r2, [pc, #412]	; (800e98c <ai_platform_network_init+0x1ac>)
 800e7f0:	4c67      	ldr	r4, [pc, #412]	; (800e990 <ai_platform_network_init+0x1b0>)
 800e7f2:	6813      	ldr	r3, [r2, #0]
 800e7f4:	f023 0301 	bic.w	r3, r3, #1
 800e7f8:	6013      	str	r3, [r2, #0]
 800e7fa:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800e7fe:	6823      	ldr	r3, [r4, #0]
 800e800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e804:	189a      	adds	r2, r3, r2
 800e806:	2a01      	cmp	r2, #1
 800e808:	d93d      	bls.n	800e886 <ai_platform_network_init+0xa6>
 800e80a:	f240 4249 	movw	r2, #1097	; 0x449
 800e80e:	4293      	cmp	r3, r2
 800e810:	d039      	beq.n	800e886 <ai_platform_network_init+0xa6>
 800e812:	4b60      	ldr	r3, [pc, #384]	; (800e994 <ai_platform_network_init+0x1b4>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e81a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e81e:	d06b      	beq.n	800e8f8 <ai_platform_network_init+0x118>
 800e820:	4605      	mov	r5, r0
 800e822:	460c      	mov	r4, r1
 800e824:	2900      	cmp	r1, #0
 800e826:	f000 80a8 	beq.w	800e97a <ai_platform_network_init+0x19a>
 800e82a:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 800e82c:	690e      	ldr	r6, [r1, #16]
 800e82e:	2f00      	cmp	r7, #0
 800e830:	f000 8092 	beq.w	800e958 <ai_platform_network_init+0x178>
 800e834:	2e00      	cmp	r6, #0
 800e836:	d07d      	beq.n	800e934 <ai_platform_network_init+0x154>
 800e838:	f104 0718 	add.w	r7, r4, #24
 800e83c:	f105 0c18 	add.w	ip, r5, #24
 800e840:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800e844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e846:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e84a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e84e:	2403      	movs	r4, #3
 800e850:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e854:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e856:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e858:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e85c:	e886 0003 	stmia.w	r6, {r0, r1}
 800e860:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800e862:	60ec      	str	r4, [r5, #12]
 800e864:	b16a      	cbz	r2, 800e882 <ai_platform_network_init+0xa2>
 800e866:	68d3      	ldr	r3, [r2, #12]
 800e868:	6095      	str	r5, [r2, #8]
 800e86a:	b153      	cbz	r3, 800e882 <ai_platform_network_init+0xa2>
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d104      	bne.n	800e87a <ai_platform_network_init+0x9a>
 800e870:	e007      	b.n	800e882 <ai_platform_network_init+0xa2>
 800e872:	429a      	cmp	r2, r3
 800e874:	4613      	mov	r3, r2
 800e876:	d004      	beq.n	800e882 <ai_platform_network_init+0xa2>
 800e878:	b11a      	cbz	r2, 800e882 <ai_platform_network_init+0xa2>
 800e87a:	68da      	ldr	r2, [r3, #12]
 800e87c:	609d      	str	r5, [r3, #8]
 800e87e:	2a00      	cmp	r2, #0
 800e880:	d1f7      	bne.n	800e872 <ai_platform_network_init+0x92>
 800e882:	4628      	mov	r0, r5
 800e884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e886:	4b44      	ldr	r3, [pc, #272]	; (800e998 <ai_platform_network_init+0x1b8>)
 800e888:	2201      	movs	r2, #1
 800e88a:	461c      	mov	r4, r3
 800e88c:	601a      	str	r2, [r3, #0]
 800e88e:	6823      	ldr	r3, [r4, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d1fc      	bne.n	800e88e <ai_platform_network_init+0xae>
 800e894:	4b41      	ldr	r3, [pc, #260]	; (800e99c <ai_platform_network_init+0x1bc>)
 800e896:	4c42      	ldr	r4, [pc, #264]	; (800e9a0 <ai_platform_network_init+0x1c0>)
 800e898:	4a42      	ldr	r2, [pc, #264]	; (800e9a4 <ai_platform_network_init+0x1c4>)
 800e89a:	601c      	str	r4, [r3, #0]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d0be      	beq.n	800e820 <ai_platform_network_init+0x40>
 800e8a2:	e7fe      	b.n	800e8a2 <ai_platform_network_init+0xc2>
 800e8a4:	4a39      	ldr	r2, [pc, #228]	; (800e98c <ai_platform_network_init+0x1ac>)
 800e8a6:	493a      	ldr	r1, [pc, #232]	; (800e990 <ai_platform_network_init+0x1b0>)
 800e8a8:	6813      	ldr	r3, [r2, #0]
 800e8aa:	f023 0301 	bic.w	r3, r3, #1
 800e8ae:	6013      	str	r3, [r2, #0]
 800e8b0:	680b      	ldr	r3, [r1, #0]
 800e8b2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800e8b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e8ba:	185a      	adds	r2, r3, r1
 800e8bc:	2a01      	cmp	r2, #1
 800e8be:	d90c      	bls.n	800e8da <ai_platform_network_init+0xfa>
 800e8c0:	f240 4249 	movw	r2, #1097	; 0x449
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d008      	beq.n	800e8da <ai_platform_network_init+0xfa>
 800e8c8:	4b32      	ldr	r3, [pc, #200]	; (800e994 <ai_platform_network_init+0x1b4>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e8d0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e8d4:	d01f      	beq.n	800e916 <ai_platform_network_init+0x136>
 800e8d6:	2000      	movs	r0, #0
 800e8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8da:	4b2f      	ldr	r3, [pc, #188]	; (800e998 <ai_platform_network_init+0x1b8>)
 800e8dc:	2201      	movs	r2, #1
 800e8de:	4619      	mov	r1, r3
 800e8e0:	601a      	str	r2, [r3, #0]
 800e8e2:	680b      	ldr	r3, [r1, #0]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d1fc      	bne.n	800e8e2 <ai_platform_network_init+0x102>
 800e8e8:	4b2c      	ldr	r3, [pc, #176]	; (800e99c <ai_platform_network_init+0x1bc>)
 800e8ea:	492d      	ldr	r1, [pc, #180]	; (800e9a0 <ai_platform_network_init+0x1c0>)
 800e8ec:	4a2d      	ldr	r2, [pc, #180]	; (800e9a4 <ai_platform_network_init+0x1c4>)
 800e8ee:	6019      	str	r1, [r3, #0]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d0ef      	beq.n	800e8d6 <ai_platform_network_init+0xf6>
 800e8f6:	e7fe      	b.n	800e8f6 <ai_platform_network_init+0x116>
 800e8f8:	4b2b      	ldr	r3, [pc, #172]	; (800e9a8 <ai_platform_network_init+0x1c8>)
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	461c      	mov	r4, r3
 800e8fe:	601a      	str	r2, [r3, #0]
 800e900:	6823      	ldr	r3, [r4, #0]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d1fc      	bne.n	800e900 <ai_platform_network_init+0x120>
 800e906:	4b29      	ldr	r3, [pc, #164]	; (800e9ac <ai_platform_network_init+0x1cc>)
 800e908:	4c25      	ldr	r4, [pc, #148]	; (800e9a0 <ai_platform_network_init+0x1c0>)
 800e90a:	4a26      	ldr	r2, [pc, #152]	; (800e9a4 <ai_platform_network_init+0x1c4>)
 800e90c:	601c      	str	r4, [r3, #0]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	4293      	cmp	r3, r2
 800e912:	d085      	beq.n	800e820 <ai_platform_network_init+0x40>
 800e914:	e7fe      	b.n	800e914 <ai_platform_network_init+0x134>
 800e916:	4b24      	ldr	r3, [pc, #144]	; (800e9a8 <ai_platform_network_init+0x1c8>)
 800e918:	2201      	movs	r2, #1
 800e91a:	4619      	mov	r1, r3
 800e91c:	601a      	str	r2, [r3, #0]
 800e91e:	680b      	ldr	r3, [r1, #0]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d1fc      	bne.n	800e91e <ai_platform_network_init+0x13e>
 800e924:	4b21      	ldr	r3, [pc, #132]	; (800e9ac <ai_platform_network_init+0x1cc>)
 800e926:	491e      	ldr	r1, [pc, #120]	; (800e9a0 <ai_platform_network_init+0x1c0>)
 800e928:	4a1e      	ldr	r2, [pc, #120]	; (800e9a4 <ai_platform_network_init+0x1c4>)
 800e92a:	6019      	str	r1, [r3, #0]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	4293      	cmp	r3, r2
 800e930:	d0d1      	beq.n	800e8d6 <ai_platform_network_init+0xf6>
 800e932:	e7fe      	b.n	800e932 <ai_platform_network_init+0x152>
 800e934:	8921      	ldrh	r1, [r4, #8]
 800e936:	88e2      	ldrh	r2, [r4, #6]
 800e938:	68e3      	ldr	r3, [r4, #12]
 800e93a:	fb02 f201 	mul.w	r2, r2, r1
 800e93e:	fb03 f302 	mul.w	r3, r3, r2
 800e942:	2b00      	cmp	r3, #0
 800e944:	f43f af78 	beq.w	800e838 <ai_platform_network_init+0x58>
 800e948:	f105 0010 	add.w	r0, r5, #16
 800e94c:	2212      	movs	r2, #18
 800e94e:	2110      	movs	r1, #16
 800e950:	f000 fb8c 	bl	800f06c <core_set_error>
 800e954:	4630      	mov	r0, r6
 800e956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e958:	8c09      	ldrh	r1, [r1, #32]
 800e95a:	8be2      	ldrh	r2, [r4, #30]
 800e95c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e95e:	fb02 f201 	mul.w	r2, r2, r1
 800e962:	fb03 f302 	mul.w	r3, r3, r2
 800e966:	2b00      	cmp	r3, #0
 800e968:	f43f af64 	beq.w	800e834 <ai_platform_network_init+0x54>
 800e96c:	2213      	movs	r2, #19
 800e96e:	2110      	movs	r1, #16
 800e970:	3010      	adds	r0, #16
 800e972:	f000 fb7b 	bl	800f06c <core_set_error>
 800e976:	4638      	mov	r0, r7
 800e978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e97a:	2211      	movs	r2, #17
 800e97c:	2110      	movs	r1, #16
 800e97e:	3010      	adds	r0, #16
 800e980:	f000 fb74 	bl	800f06c <core_set_error>
 800e984:	4620      	mov	r0, r4
 800e986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e988:	a1c00100 	.word	0xa1c00100
 800e98c:	e0002000 	.word	0xe0002000
 800e990:	e0042000 	.word	0xe0042000
 800e994:	5c001000 	.word	0x5c001000
 800e998:	40023008 	.word	0x40023008
 800e99c:	40023000 	.word	0x40023000
 800e9a0:	f407a5c2 	.word	0xf407a5c2
 800e9a4:	b5e8b5cd 	.word	0xb5e8b5cd
 800e9a8:	58024c08 	.word	0x58024c08
 800e9ac:	58024c00 	.word	0x58024c00

0800e9b0 <ai_platform_network_post_init>:
 800e9b0:	b538      	push	{r3, r4, r5, lr}
 800e9b2:	b118      	cbz	r0, 800e9bc <ai_platform_network_post_init+0xc>
 800e9b4:	4b4a      	ldr	r3, [pc, #296]	; (800eae0 <ai_platform_network_post_init+0x130>)
 800e9b6:	6802      	ldr	r2, [r0, #0]
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d029      	beq.n	800ea10 <ai_platform_network_post_init+0x60>
 800e9bc:	4a49      	ldr	r2, [pc, #292]	; (800eae4 <ai_platform_network_post_init+0x134>)
 800e9be:	494a      	ldr	r1, [pc, #296]	; (800eae8 <ai_platform_network_post_init+0x138>)
 800e9c0:	6813      	ldr	r3, [r2, #0]
 800e9c2:	f023 0301 	bic.w	r3, r3, #1
 800e9c6:	6013      	str	r3, [r2, #0]
 800e9c8:	680b      	ldr	r3, [r1, #0]
 800e9ca:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800e9ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e9d2:	185a      	adds	r2, r3, r1
 800e9d4:	2a01      	cmp	r2, #1
 800e9d6:	d90c      	bls.n	800e9f2 <ai_platform_network_post_init+0x42>
 800e9d8:	f240 4249 	movw	r2, #1097	; 0x449
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d008      	beq.n	800e9f2 <ai_platform_network_post_init+0x42>
 800e9e0:	4b42      	ldr	r3, [pc, #264]	; (800eaec <ai_platform_network_post_init+0x13c>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e9e8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e9ec:	d044      	beq.n	800ea78 <ai_platform_network_post_init+0xc8>
 800e9ee:	2000      	movs	r0, #0
 800e9f0:	bd38      	pop	{r3, r4, r5, pc}
 800e9f2:	4b3f      	ldr	r3, [pc, #252]	; (800eaf0 <ai_platform_network_post_init+0x140>)
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	601a      	str	r2, [r3, #0]
 800e9fa:	680b      	ldr	r3, [r1, #0]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d1fc      	bne.n	800e9fa <ai_platform_network_post_init+0x4a>
 800ea00:	4b3c      	ldr	r3, [pc, #240]	; (800eaf4 <ai_platform_network_post_init+0x144>)
 800ea02:	493d      	ldr	r1, [pc, #244]	; (800eaf8 <ai_platform_network_post_init+0x148>)
 800ea04:	4a3d      	ldr	r2, [pc, #244]	; (800eafc <ai_platform_network_post_init+0x14c>)
 800ea06:	6019      	str	r1, [r3, #0]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d0ef      	beq.n	800e9ee <ai_platform_network_post_init+0x3e>
 800ea0e:	e7fe      	b.n	800ea0e <ai_platform_network_post_init+0x5e>
 800ea10:	4a34      	ldr	r2, [pc, #208]	; (800eae4 <ai_platform_network_post_init+0x134>)
 800ea12:	4935      	ldr	r1, [pc, #212]	; (800eae8 <ai_platform_network_post_init+0x138>)
 800ea14:	6813      	ldr	r3, [r2, #0]
 800ea16:	f023 0301 	bic.w	r3, r3, #1
 800ea1a:	6013      	str	r3, [r2, #0]
 800ea1c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800ea20:	680b      	ldr	r3, [r1, #0]
 800ea22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ea26:	189a      	adds	r2, r3, r2
 800ea28:	2a01      	cmp	r2, #1
 800ea2a:	d94a      	bls.n	800eac2 <ai_platform_network_post_init+0x112>
 800ea2c:	f240 4249 	movw	r2, #1097	; 0x449
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d046      	beq.n	800eac2 <ai_platform_network_post_init+0x112>
 800ea34:	4b2d      	ldr	r3, [pc, #180]	; (800eaec <ai_platform_network_post_init+0x13c>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ea3c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ea40:	d030      	beq.n	800eaa4 <ai_platform_network_post_init+0xf4>
 800ea42:	68c3      	ldr	r3, [r0, #12]
 800ea44:	4604      	mov	r4, r0
 800ea46:	f013 0502 	ands.w	r5, r3, #2
 800ea4a:	d024      	beq.n	800ea96 <ai_platform_network_post_init+0xe6>
 800ea4c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800ea4e:	b18b      	cbz	r3, 800ea74 <ai_platform_network_post_init+0xc4>
 800ea50:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800ea52:	b90d      	cbnz	r5, 800ea58 <ai_platform_network_post_init+0xa8>
 800ea54:	e00e      	b.n	800ea74 <ai_platform_network_post_init+0xc4>
 800ea56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ea58:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800ea5a:	4629      	mov	r1, r5
 800ea5c:	2000      	movs	r0, #0
 800ea5e:	4798      	blx	r3
 800ea60:	68ea      	ldr	r2, [r5, #12]
 800ea62:	1b53      	subs	r3, r2, r5
 800ea64:	4615      	mov	r5, r2
 800ea66:	bf18      	it	ne
 800ea68:	2301      	movne	r3, #1
 800ea6a:	2a00      	cmp	r2, #0
 800ea6c:	bf08      	it	eq
 800ea6e:	2300      	moveq	r3, #0
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d1f0      	bne.n	800ea56 <ai_platform_network_post_init+0xa6>
 800ea74:	2001      	movs	r0, #1
 800ea76:	bd38      	pop	{r3, r4, r5, pc}
 800ea78:	4b21      	ldr	r3, [pc, #132]	; (800eb00 <ai_platform_network_post_init+0x150>)
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	601a      	str	r2, [r3, #0]
 800ea80:	680b      	ldr	r3, [r1, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d1fc      	bne.n	800ea80 <ai_platform_network_post_init+0xd0>
 800ea86:	4b1f      	ldr	r3, [pc, #124]	; (800eb04 <ai_platform_network_post_init+0x154>)
 800ea88:	491b      	ldr	r1, [pc, #108]	; (800eaf8 <ai_platform_network_post_init+0x148>)
 800ea8a:	4a1c      	ldr	r2, [pc, #112]	; (800eafc <ai_platform_network_post_init+0x14c>)
 800ea8c:	6019      	str	r1, [r3, #0]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4293      	cmp	r3, r2
 800ea92:	d0ac      	beq.n	800e9ee <ai_platform_network_post_init+0x3e>
 800ea94:	e7fe      	b.n	800ea94 <ai_platform_network_post_init+0xe4>
 800ea96:	2210      	movs	r2, #16
 800ea98:	2111      	movs	r1, #17
 800ea9a:	3010      	adds	r0, #16
 800ea9c:	f000 fae6 	bl	800f06c <core_set_error>
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	bd38      	pop	{r3, r4, r5, pc}
 800eaa4:	4b16      	ldr	r3, [pc, #88]	; (800eb00 <ai_platform_network_post_init+0x150>)
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	601a      	str	r2, [r3, #0]
 800eaac:	680b      	ldr	r3, [r1, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d1fc      	bne.n	800eaac <ai_platform_network_post_init+0xfc>
 800eab2:	4b14      	ldr	r3, [pc, #80]	; (800eb04 <ai_platform_network_post_init+0x154>)
 800eab4:	4910      	ldr	r1, [pc, #64]	; (800eaf8 <ai_platform_network_post_init+0x148>)
 800eab6:	4a11      	ldr	r2, [pc, #68]	; (800eafc <ai_platform_network_post_init+0x14c>)
 800eab8:	6019      	str	r1, [r3, #0]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	4293      	cmp	r3, r2
 800eabe:	d0c0      	beq.n	800ea42 <ai_platform_network_post_init+0x92>
 800eac0:	e7fe      	b.n	800eac0 <ai_platform_network_post_init+0x110>
 800eac2:	4b0b      	ldr	r3, [pc, #44]	; (800eaf0 <ai_platform_network_post_init+0x140>)
 800eac4:	2201      	movs	r2, #1
 800eac6:	4619      	mov	r1, r3
 800eac8:	601a      	str	r2, [r3, #0]
 800eaca:	680b      	ldr	r3, [r1, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d1fc      	bne.n	800eaca <ai_platform_network_post_init+0x11a>
 800ead0:	4b08      	ldr	r3, [pc, #32]	; (800eaf4 <ai_platform_network_post_init+0x144>)
 800ead2:	4909      	ldr	r1, [pc, #36]	; (800eaf8 <ai_platform_network_post_init+0x148>)
 800ead4:	4a09      	ldr	r2, [pc, #36]	; (800eafc <ai_platform_network_post_init+0x14c>)
 800ead6:	6019      	str	r1, [r3, #0]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	4293      	cmp	r3, r2
 800eadc:	d0b1      	beq.n	800ea42 <ai_platform_network_post_init+0x92>
 800eade:	e7fe      	b.n	800eade <ai_platform_network_post_init+0x12e>
 800eae0:	a1c00100 	.word	0xa1c00100
 800eae4:	e0002000 	.word	0xe0002000
 800eae8:	e0042000 	.word	0xe0042000
 800eaec:	5c001000 	.word	0x5c001000
 800eaf0:	40023008 	.word	0x40023008
 800eaf4:	40023000 	.word	0x40023000
 800eaf8:	f407a5c2 	.word	0xf407a5c2
 800eafc:	b5e8b5cd 	.word	0xb5e8b5cd
 800eb00:	58024c08 	.word	0x58024c08
 800eb04:	58024c00 	.word	0x58024c00

0800eb08 <ai_platform_network_process>:
 800eb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb0c:	4692      	mov	sl, r2
 800eb0e:	b083      	sub	sp, #12
 800eb10:	4604      	mov	r4, r0
 800eb12:	b120      	cbz	r0, 800eb1e <ai_platform_network_process+0x16>
 800eb14:	4b86      	ldr	r3, [pc, #536]	; (800ed30 <ai_platform_network_process+0x228>)
 800eb16:	6802      	ldr	r2, [r0, #0]
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	bf18      	it	ne
 800eb1c:	2400      	movne	r4, #0
 800eb1e:	4a85      	ldr	r2, [pc, #532]	; (800ed34 <ai_platform_network_process+0x22c>)
 800eb20:	4885      	ldr	r0, [pc, #532]	; (800ed38 <ai_platform_network_process+0x230>)
 800eb22:	6813      	ldr	r3, [r2, #0]
 800eb24:	f023 0301 	bic.w	r3, r3, #1
 800eb28:	6013      	str	r3, [r2, #0]
 800eb2a:	6803      	ldr	r3, [r0, #0]
 800eb2c:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 800eb30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eb34:	181a      	adds	r2, r3, r0
 800eb36:	2a01      	cmp	r2, #1
 800eb38:	f240 80c6 	bls.w	800ecc8 <ai_platform_network_process+0x1c0>
 800eb3c:	f240 4249 	movw	r2, #1097	; 0x449
 800eb40:	4293      	cmp	r3, r2
 800eb42:	f000 80c1 	beq.w	800ecc8 <ai_platform_network_process+0x1c0>
 800eb46:	4b7d      	ldr	r3, [pc, #500]	; (800ed3c <ai_platform_network_process+0x234>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eb4e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800eb52:	f000 80a9 	beq.w	800eca8 <ai_platform_network_process+0x1a0>
 800eb56:	2c00      	cmp	r4, #0
 800eb58:	f000 80db 	beq.w	800ed12 <ai_platform_network_process+0x20a>
 800eb5c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800eb60:	68e0      	ldr	r0, [r4, #12]
 800eb62:	461a      	mov	r2, r3
 800eb64:	f000 0003 	and.w	r0, r0, #3
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	f000 80bd 	beq.w	800ece8 <ai_platform_network_process+0x1e0>
 800eb6e:	2600      	movs	r6, #0
 800eb70:	2803      	cmp	r0, #3
 800eb72:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800eb74:	6166      	str	r6, [r4, #20]
 800eb76:	f040 80c6 	bne.w	800ed06 <ai_platform_network_process+0x1fe>
 800eb7a:	2900      	cmp	r1, #0
 800eb7c:	f000 80b7 	beq.w	800ecee <ai_platform_network_process+0x1e6>
 800eb80:	fab5 f085 	clz	r0, r5
 800eb84:	0940      	lsrs	r0, r0, #5
 800eb86:	2800      	cmp	r0, #0
 800eb88:	f040 80b1 	bne.w	800ecee <ai_platform_network_process+0x1e6>
 800eb8c:	882e      	ldrh	r6, [r5, #0]
 800eb8e:	2e00      	cmp	r6, #0
 800eb90:	f000 80ad 	beq.w	800ecee <ai_platform_network_process+0x1e6>
 800eb94:	888f      	ldrh	r7, [r1, #4]
 800eb96:	686e      	ldr	r6, [r5, #4]
 800eb98:	9701      	str	r7, [sp, #4]
 800eb9a:	2e00      	cmp	r6, #0
 800eb9c:	f000 825f 	beq.w	800f05e <ai_platform_network_process+0x556>
 800eba0:	6836      	ldr	r6, [r6, #0]
 800eba2:	2e00      	cmp	r6, #0
 800eba4:	f000 825b 	beq.w	800f05e <ai_platform_network_process+0x556>
 800eba8:	68ab      	ldr	r3, [r5, #8]
 800ebaa:	f8d3 9000 	ldr.w	r9, [r3]
 800ebae:	f1b9 0f00 	cmp.w	r9, #0
 800ebb2:	f000 809c 	beq.w	800ecee <ai_platform_network_process+0x1e6>
 800ebb6:	460f      	mov	r7, r1
 800ebb8:	4680      	mov	r8, r0
 800ebba:	e05e      	b.n	800ec7a <ai_platform_network_process+0x172>
 800ebbc:	68f3      	ldr	r3, [r6, #12]
 800ebbe:	68da      	ldr	r2, [r3, #12]
 800ebc0:	455a      	cmp	r2, fp
 800ebc2:	d168      	bne.n	800ec96 <ai_platform_network_process+0x18e>
 800ebc4:	689a      	ldr	r2, [r3, #8]
 800ebc6:	4572      	cmp	r2, lr
 800ebc8:	d165      	bne.n	800ec96 <ai_platform_network_process+0x18e>
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	459c      	cmp	ip, r3
 800ebce:	d162      	bne.n	800ec96 <ai_platform_network_process+0x18e>
 800ebd0:	6800      	ldr	r0, [r0, #0]
 800ebd2:	f001 f91b 	bl	800fe0c <ai_array_get_byte_size>
 800ebd6:	68f2      	ldr	r2, [r6, #12]
 800ebd8:	6973      	ldr	r3, [r6, #20]
 800ebda:	68d2      	ldr	r2, [r2, #12]
 800ebdc:	68db      	ldr	r3, [r3, #12]
 800ebde:	fb03 f302 	mul.w	r3, r3, r2
 800ebe2:	4298      	cmp	r0, r3
 800ebe4:	d357      	bcc.n	800ec96 <ai_platform_network_process+0x18e>
 800ebe6:	69b3      	ldr	r3, [r6, #24]
 800ebe8:	6818      	ldr	r0, [r3, #0]
 800ebea:	f001 f8c3 	bl	800fd74 <ai_array_to_buffer_fmt>
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	4043      	eors	r3, r0
 800ebf2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800ebf6:	f040 8229 	bne.w	800f04c <ai_platform_network_process+0x544>
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	f000 821d 	beq.w	800f03c <ai_platform_network_process+0x534>
 800ec02:	88bb      	ldrh	r3, [r7, #4]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	f000 808a 	beq.w	800ed1e <ai_platform_network_process+0x216>
 800ec0a:	9a01      	ldr	r2, [sp, #4]
 800ec0c:	68f1      	ldr	r1, [r6, #12]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	68c9      	ldr	r1, [r1, #12]
 800ec12:	bf38      	it	cc
 800ec14:	461a      	movcc	r2, r3
 800ec16:	9201      	str	r2, [sp, #4]
 800ec18:	6972      	ldr	r2, [r6, #20]
 800ec1a:	68d3      	ldr	r3, [r2, #12]
 800ec1c:	fb03 f301 	mul.w	r3, r3, r1
 800ec20:	f8c9 3008 	str.w	r3, [r9, #8]
 800ec24:	88ba      	ldrh	r2, [r7, #4]
 800ec26:	fb03 f302 	mul.w	r3, r3, r2
 800ec2a:	f8c9 300c 	str.w	r3, [r9, #12]
 800ec2e:	6939      	ldr	r1, [r7, #16]
 800ec30:	f8c9 1004 	str.w	r1, [r9, #4]
 800ec34:	693a      	ldr	r2, [r7, #16]
 800ec36:	4413      	add	r3, r2
 800ec38:	f8c9 3000 	str.w	r3, [r9]
 800ec3c:	69b0      	ldr	r0, [r6, #24]
 800ec3e:	6803      	ldr	r3, [r0, #0]
 800ec40:	009a      	lsls	r2, r3, #2
 800ec42:	d408      	bmi.n	800ec56 <ai_platform_network_process+0x14e>
 800ec44:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800ec48:	1a9b      	subs	r3, r3, r2
 800ec4a:	4419      	add	r1, r3
 800ec4c:	6081      	str	r1, [r0, #8]
 800ec4e:	69b3      	ldr	r3, [r6, #24]
 800ec50:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800ec54:	60da      	str	r2, [r3, #12]
 800ec56:	f108 0801 	add.w	r8, r8, #1
 800ec5a:	882b      	ldrh	r3, [r5, #0]
 800ec5c:	4598      	cmp	r8, r3
 800ec5e:	d27b      	bcs.n	800ed58 <ai_platform_network_process+0x250>
 800ec60:	686b      	ldr	r3, [r5, #4]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d078      	beq.n	800ed58 <ai_platform_network_process+0x250>
 800ec66:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 800ec6a:	2e00      	cmp	r6, #0
 800ec6c:	d074      	beq.n	800ed58 <ai_platform_network_process+0x250>
 800ec6e:	68ab      	ldr	r3, [r5, #8]
 800ec70:	3718      	adds	r7, #24
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 800ec78:	d039      	beq.n	800ecee <ai_platform_network_process+0x1e6>
 800ec7a:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 800ec7e:	f8b7 b006 	ldrh.w	fp, [r7, #6]
 800ec82:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800ec86:	fb0b f30e 	mul.w	r3, fp, lr
 800ec8a:	69b0      	ldr	r0, [r6, #24]
 800ec8c:	fb0c f303 	mul.w	r3, ip, r3
 800ec90:	6841      	ldr	r1, [r0, #4]
 800ec92:	4299      	cmp	r1, r3
 800ec94:	d292      	bcs.n	800ebbc <ai_platform_network_process+0xb4>
 800ec96:	f104 0010 	add.w	r0, r4, #16
 800ec9a:	2218      	movs	r2, #24
 800ec9c:	2112      	movs	r1, #18
 800ec9e:	f04f 0b00 	mov.w	fp, #0
 800eca2:	f000 f9e3 	bl	800f06c <core_set_error>
 800eca6:	e02a      	b.n	800ecfe <ai_platform_network_process+0x1f6>
 800eca8:	4b25      	ldr	r3, [pc, #148]	; (800ed40 <ai_platform_network_process+0x238>)
 800ecaa:	2201      	movs	r2, #1
 800ecac:	4618      	mov	r0, r3
 800ecae:	601a      	str	r2, [r3, #0]
 800ecb0:	6803      	ldr	r3, [r0, #0]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d1fc      	bne.n	800ecb0 <ai_platform_network_process+0x1a8>
 800ecb6:	4b23      	ldr	r3, [pc, #140]	; (800ed44 <ai_platform_network_process+0x23c>)
 800ecb8:	4823      	ldr	r0, [pc, #140]	; (800ed48 <ai_platform_network_process+0x240>)
 800ecba:	4a24      	ldr	r2, [pc, #144]	; (800ed4c <ai_platform_network_process+0x244>)
 800ecbc:	6018      	str	r0, [r3, #0]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	f43f af48 	beq.w	800eb56 <ai_platform_network_process+0x4e>
 800ecc6:	e7fe      	b.n	800ecc6 <ai_platform_network_process+0x1be>
 800ecc8:	4b21      	ldr	r3, [pc, #132]	; (800ed50 <ai_platform_network_process+0x248>)
 800ecca:	2201      	movs	r2, #1
 800eccc:	4618      	mov	r0, r3
 800ecce:	601a      	str	r2, [r3, #0]
 800ecd0:	6803      	ldr	r3, [r0, #0]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d1fc      	bne.n	800ecd0 <ai_platform_network_process+0x1c8>
 800ecd6:	4b1f      	ldr	r3, [pc, #124]	; (800ed54 <ai_platform_network_process+0x24c>)
 800ecd8:	481b      	ldr	r0, [pc, #108]	; (800ed48 <ai_platform_network_process+0x240>)
 800ecda:	4a1c      	ldr	r2, [pc, #112]	; (800ed4c <ai_platform_network_process+0x244>)
 800ecdc:	6018      	str	r0, [r3, #0]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4293      	cmp	r3, r2
 800ece2:	f43f af38 	beq.w	800eb56 <ai_platform_network_process+0x4e>
 800ece6:	e7fe      	b.n	800ece6 <ai_platform_network_process+0x1de>
 800ece8:	2803      	cmp	r0, #3
 800ecea:	6163      	str	r3, [r4, #20]
 800ecec:	d10b      	bne.n	800ed06 <ai_platform_network_process+0x1fe>
 800ecee:	f04f 0b00 	mov.w	fp, #0
 800ecf2:	f104 0010 	add.w	r0, r4, #16
 800ecf6:	2217      	movs	r2, #23
 800ecf8:	2112      	movs	r1, #18
 800ecfa:	f000 f9b7 	bl	800f06c <core_set_error>
 800ecfe:	4658      	mov	r0, fp
 800ed00:	b003      	add	sp, #12
 800ed02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed06:	f104 0010 	add.w	r0, r4, #16
 800ed0a:	2230      	movs	r2, #48	; 0x30
 800ed0c:	2111      	movs	r1, #17
 800ed0e:	f000 f9ad 	bl	800f06c <core_set_error>
 800ed12:	f04f 0b00 	mov.w	fp, #0
 800ed16:	4658      	mov	r0, fp
 800ed18:	b003      	add	sp, #12
 800ed1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed1e:	f104 0010 	add.w	r0, r4, #16
 800ed22:	2221      	movs	r2, #33	; 0x21
 800ed24:	2112      	movs	r1, #18
 800ed26:	469b      	mov	fp, r3
 800ed28:	f000 f9a0 	bl	800f06c <core_set_error>
 800ed2c:	e7e7      	b.n	800ecfe <ai_platform_network_process+0x1f6>
 800ed2e:	bf00      	nop
 800ed30:	a1c00100 	.word	0xa1c00100
 800ed34:	e0002000 	.word	0xe0002000
 800ed38:	e0042000 	.word	0xe0042000
 800ed3c:	5c001000 	.word	0x5c001000
 800ed40:	58024c08 	.word	0x58024c08
 800ed44:	58024c00 	.word	0x58024c00
 800ed48:	f407a5c2 	.word	0xf407a5c2
 800ed4c:	b5e8b5cd 	.word	0xb5e8b5cd
 800ed50:	40023008 	.word	0x40023008
 800ed54:	40023000 	.word	0x40023000
 800ed58:	f1ba 0f00 	cmp.w	sl, #0
 800ed5c:	f000 808c 	beq.w	800ee78 <ai_platform_network_process+0x370>
 800ed60:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	f240 813b 	bls.w	800efe0 <ai_platform_network_process+0x4d8>
 800ed6a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800ed6c:	f115 0f0c 	cmn.w	r5, #12
 800ed70:	f000 8136 	beq.w	800efe0 <ai_platform_network_process+0x4d8>
 800ed74:	89ab      	ldrh	r3, [r5, #12]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	f000 8132 	beq.w	800efe0 <ai_platform_network_process+0x4d8>
 800ed7c:	4656      	mov	r6, sl
 800ed7e:	f04f 0900 	mov.w	r9, #0
 800ed82:	9400      	str	r4, [sp, #0]
 800ed84:	4599      	cmp	r9, r3
 800ed86:	d274      	bcs.n	800ee72 <ai_platform_network_process+0x36a>
 800ed88:	692b      	ldr	r3, [r5, #16]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d071      	beq.n	800ee72 <ai_platform_network_process+0x36a>
 800ed8e:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 800ed92:	2f00      	cmp	r7, #0
 800ed94:	d06d      	beq.n	800ee72 <ai_platform_network_process+0x36a>
 800ed96:	696b      	ldr	r3, [r5, #20]
 800ed98:	ea4f 1409 	mov.w	r4, r9, lsl #4
 800ed9c:	f8d3 8000 	ldr.w	r8, [r3]
 800eda0:	eb18 0a04 	adds.w	sl, r8, r4
 800eda4:	f000 8125 	beq.w	800eff2 <ai_platform_network_process+0x4ea>
 800eda8:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 800edac:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 800edb0:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800edb4:	fb0b f30e 	mul.w	r3, fp, lr
 800edb8:	69b8      	ldr	r0, [r7, #24]
 800edba:	fb0c f303 	mul.w	r3, ip, r3
 800edbe:	6841      	ldr	r1, [r0, #4]
 800edc0:	4299      	cmp	r1, r3
 800edc2:	f0c0 810c 	bcc.w	800efde <ai_platform_network_process+0x4d6>
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	68da      	ldr	r2, [r3, #12]
 800edca:	455a      	cmp	r2, fp
 800edcc:	f040 8107 	bne.w	800efde <ai_platform_network_process+0x4d6>
 800edd0:	689a      	ldr	r2, [r3, #8]
 800edd2:	4572      	cmp	r2, lr
 800edd4:	f040 8103 	bne.w	800efde <ai_platform_network_process+0x4d6>
 800edd8:	685b      	ldr	r3, [r3, #4]
 800edda:	459c      	cmp	ip, r3
 800eddc:	f040 80ff 	bne.w	800efde <ai_platform_network_process+0x4d6>
 800ede0:	6800      	ldr	r0, [r0, #0]
 800ede2:	f001 f813 	bl	800fe0c <ai_array_get_byte_size>
 800ede6:	68fa      	ldr	r2, [r7, #12]
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	68d2      	ldr	r2, [r2, #12]
 800edec:	68db      	ldr	r3, [r3, #12]
 800edee:	fb03 f302 	mul.w	r3, r3, r2
 800edf2:	4298      	cmp	r0, r3
 800edf4:	f0c0 80f3 	bcc.w	800efde <ai_platform_network_process+0x4d6>
 800edf8:	69bb      	ldr	r3, [r7, #24]
 800edfa:	6818      	ldr	r0, [r3, #0]
 800edfc:	f000 ffba 	bl	800fd74 <ai_array_to_buffer_fmt>
 800ee00:	6833      	ldr	r3, [r6, #0]
 800ee02:	4043      	eors	r3, r0
 800ee04:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800ee08:	f040 810e 	bne.w	800f028 <ai_platform_network_process+0x520>
 800ee0c:	6933      	ldr	r3, [r6, #16]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	f000 8101 	beq.w	800f016 <ai_platform_network_process+0x50e>
 800ee14:	88b3      	ldrh	r3, [r6, #4]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	f000 80f4 	beq.w	800f004 <ai_platform_network_process+0x4fc>
 800ee1c:	9a01      	ldr	r2, [sp, #4]
 800ee1e:	68f9      	ldr	r1, [r7, #12]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	68c9      	ldr	r1, [r1, #12]
 800ee24:	bf38      	it	cc
 800ee26:	461a      	movcc	r2, r3
 800ee28:	9201      	str	r2, [sp, #4]
 800ee2a:	697a      	ldr	r2, [r7, #20]
 800ee2c:	68d3      	ldr	r3, [r2, #12]
 800ee2e:	fb03 f301 	mul.w	r3, r3, r1
 800ee32:	f8ca 3008 	str.w	r3, [sl, #8]
 800ee36:	88b2      	ldrh	r2, [r6, #4]
 800ee38:	fb03 f302 	mul.w	r3, r3, r2
 800ee3c:	f8ca 300c 	str.w	r3, [sl, #12]
 800ee40:	6931      	ldr	r1, [r6, #16]
 800ee42:	f8ca 1004 	str.w	r1, [sl, #4]
 800ee46:	6932      	ldr	r2, [r6, #16]
 800ee48:	4413      	add	r3, r2
 800ee4a:	f848 3004 	str.w	r3, [r8, r4]
 800ee4e:	69b8      	ldr	r0, [r7, #24]
 800ee50:	6803      	ldr	r3, [r0, #0]
 800ee52:	009b      	lsls	r3, r3, #2
 800ee54:	d408      	bmi.n	800ee68 <ai_platform_network_process+0x360>
 800ee56:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800ee5a:	1a9b      	subs	r3, r3, r2
 800ee5c:	4419      	add	r1, r3
 800ee5e:	6081      	str	r1, [r0, #8]
 800ee60:	69bb      	ldr	r3, [r7, #24]
 800ee62:	f8da 2004 	ldr.w	r2, [sl, #4]
 800ee66:	60da      	str	r2, [r3, #12]
 800ee68:	f109 0901 	add.w	r9, r9, #1
 800ee6c:	3618      	adds	r6, #24
 800ee6e:	89ab      	ldrh	r3, [r5, #12]
 800ee70:	e788      	b.n	800ed84 <ai_platform_network_process+0x27c>
 800ee72:	e9dd 4300 	ldrd	r4, r3, [sp]
 800ee76:	82a3      	strh	r3, [r4, #20]
 800ee78:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800ee7c:	2a00      	cmp	r2, #0
 800ee7e:	f000 80a9 	beq.w	800efd4 <ai_platform_network_process+0x4cc>
 800ee82:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800ee84:	2a01      	cmp	r2, #1
 800ee86:	f240 80a8 	bls.w	800efda <ai_platform_network_process+0x4d2>
 800ee8a:	f105 060c 	add.w	r6, r5, #12
 800ee8e:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 800ee92:	8aa3      	ldrh	r3, [r4, #20]
 800ee94:	455b      	cmp	r3, fp
 800ee96:	f67f af32 	bls.w	800ecfe <ai_platform_network_process+0x1f6>
 800ee9a:	9400      	str	r4, [sp, #0]
 800ee9c:	2d00      	cmp	r5, #0
 800ee9e:	d037      	beq.n	800ef10 <ai_platform_network_process+0x408>
 800eea0:	882b      	ldrh	r3, [r5, #0]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d034      	beq.n	800ef10 <ai_platform_network_process+0x408>
 800eea6:	686b      	ldr	r3, [r5, #4]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d031      	beq.n	800ef10 <ai_platform_network_process+0x408>
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d02e      	beq.n	800ef10 <ai_platform_network_process+0x408>
 800eeb2:	f04f 0800 	mov.w	r8, #0
 800eeb6:	e01a      	b.n	800eeee <ai_platform_network_process+0x3e6>
 800eeb8:	68d4      	ldr	r4, [r2, #12]
 800eeba:	1b00      	subs	r0, r0, r4
 800eebc:	4401      	add	r1, r0
 800eebe:	6091      	str	r1, [r2, #8]
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	699b      	ldr	r3, [r3, #24]
 800eec4:	60da      	str	r2, [r3, #12]
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f108 0801 	add.w	r8, r8, #1
 800eecc:	68b9      	ldr	r1, [r7, #8]
 800eece:	f85a 2009 	ldr.w	r2, [sl, r9]
 800eed2:	440b      	add	r3, r1
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d301      	bcc.n	800eedc <ai_platform_network_process+0x3d4>
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	1ad3      	subs	r3, r2, r3
 800eedc:	607b      	str	r3, [r7, #4]
 800eede:	882b      	ldrh	r3, [r5, #0]
 800eee0:	4598      	cmp	r8, r3
 800eee2:	d215      	bcs.n	800ef10 <ai_platform_network_process+0x408>
 800eee4:	686b      	ldr	r3, [r5, #4]
 800eee6:	b19b      	cbz	r3, 800ef10 <ai_platform_network_process+0x408>
 800eee8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800eeec:	b183      	cbz	r3, 800ef10 <ai_platform_network_process+0x408>
 800eeee:	68a9      	ldr	r1, [r5, #8]
 800eef0:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800eef4:	699a      	ldr	r2, [r3, #24]
 800eef6:	f8d1 a000 	ldr.w	sl, [r1]
 800eefa:	6814      	ldr	r4, [r2, #0]
 800eefc:	eb0a 0709 	add.w	r7, sl, r9
 800ef00:	6890      	ldr	r0, [r2, #8]
 800ef02:	00a4      	lsls	r4, r4, #2
 800ef04:	6879      	ldr	r1, [r7, #4]
 800ef06:	d5d7      	bpl.n	800eeb8 <ai_platform_network_process+0x3b0>
 800ef08:	68ba      	ldr	r2, [r7, #8]
 800ef0a:	f000 ffe5 	bl	800fed8 <memcpy>
 800ef0e:	e7da      	b.n	800eec6 <ai_platform_network_process+0x3be>
 800ef10:	9800      	ldr	r0, [sp, #0]
 800ef12:	f000 fef5 	bl	800fd00 <ai_layers_forward_all>
 800ef16:	2e00      	cmp	r6, #0
 800ef18:	d04a      	beq.n	800efb0 <ai_platform_network_process+0x4a8>
 800ef1a:	8833      	ldrh	r3, [r6, #0]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d047      	beq.n	800efb0 <ai_platform_network_process+0x4a8>
 800ef20:	6873      	ldr	r3, [r6, #4]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d044      	beq.n	800efb0 <ai_platform_network_process+0x4a8>
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d041      	beq.n	800efb0 <ai_platform_network_process+0x4a8>
 800ef2c:	f04f 0800 	mov.w	r8, #0
 800ef30:	e019      	b.n	800ef66 <ai_platform_network_process+0x45e>
 800ef32:	f85a 2009 	ldr.w	r2, [sl, r9]
 800ef36:	4291      	cmp	r1, r2
 800ef38:	d301      	bcc.n	800ef3e <ai_platform_network_process+0x436>
 800ef3a:	68f9      	ldr	r1, [r7, #12]
 800ef3c:	1a51      	subs	r1, r2, r1
 800ef3e:	6079      	str	r1, [r7, #4]
 800ef40:	f108 0801 	add.w	r8, r8, #1
 800ef44:	6998      	ldr	r0, [r3, #24]
 800ef46:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 800ef4a:	1b12      	subs	r2, r2, r4
 800ef4c:	440a      	add	r2, r1
 800ef4e:	6082      	str	r2, [r0, #8]
 800ef50:	687a      	ldr	r2, [r7, #4]
 800ef52:	699b      	ldr	r3, [r3, #24]
 800ef54:	60da      	str	r2, [r3, #12]
 800ef56:	8833      	ldrh	r3, [r6, #0]
 800ef58:	4598      	cmp	r8, r3
 800ef5a:	d229      	bcs.n	800efb0 <ai_platform_network_process+0x4a8>
 800ef5c:	6873      	ldr	r3, [r6, #4]
 800ef5e:	b33b      	cbz	r3, 800efb0 <ai_platform_network_process+0x4a8>
 800ef60:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800ef64:	b323      	cbz	r3, 800efb0 <ai_platform_network_process+0x4a8>
 800ef66:	68b2      	ldr	r2, [r6, #8]
 800ef68:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800ef6c:	f8d3 e018 	ldr.w	lr, [r3, #24]
 800ef70:	f8d2 a000 	ldr.w	sl, [r2]
 800ef74:	f8de 1000 	ldr.w	r1, [lr]
 800ef78:	eb0a 0709 	add.w	r7, sl, r9
 800ef7c:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 800ef80:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 800ef84:	eb00 0102 	add.w	r1, r0, r2
 800ef88:	d0d3      	beq.n	800ef32 <ai_platform_network_process+0x42a>
 800ef8a:	f8de 1008 	ldr.w	r1, [lr, #8]
 800ef8e:	f000 ffa3 	bl	800fed8 <memcpy>
 800ef92:	f85a 2009 	ldr.w	r2, [sl, r9]
 800ef96:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 800ef9a:	440b      	add	r3, r1
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d301      	bcc.n	800efa4 <ai_platform_network_process+0x49c>
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	1ad3      	subs	r3, r2, r3
 800efa4:	607b      	str	r3, [r7, #4]
 800efa6:	f108 0801 	add.w	r8, r8, #1
 800efaa:	8833      	ldrh	r3, [r6, #0]
 800efac:	4598      	cmp	r8, r3
 800efae:	d3d5      	bcc.n	800ef5c <ai_platform_network_process+0x454>
 800efb0:	9b00      	ldr	r3, [sp, #0]
 800efb2:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 800efb6:	461a      	mov	r2, r3
 800efb8:	8a9b      	ldrh	r3, [r3, #20]
 800efba:	f10b 0b01 	add.w	fp, fp, #1
 800efbe:	fa1f fb8b 	uxth.w	fp, fp
 800efc2:	455b      	cmp	r3, fp
 800efc4:	f8a2 b016 	strh.w	fp, [r2, #22]
 800efc8:	f63f af68 	bhi.w	800ee9c <ai_platform_network_process+0x394>
 800efcc:	4658      	mov	r0, fp
 800efce:	b003      	add	sp, #12
 800efd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efd4:	4615      	mov	r5, r2
 800efd6:	4616      	mov	r6, r2
 800efd8:	e759      	b.n	800ee8e <ai_platform_network_process+0x386>
 800efda:	2600      	movs	r6, #0
 800efdc:	e757      	b.n	800ee8e <ai_platform_network_process+0x386>
 800efde:	9c00      	ldr	r4, [sp, #0]
 800efe0:	f104 0010 	add.w	r0, r4, #16
 800efe4:	2218      	movs	r2, #24
 800efe6:	2113      	movs	r1, #19
 800efe8:	f04f 0b00 	mov.w	fp, #0
 800efec:	f000 f83e 	bl	800f06c <core_set_error>
 800eff0:	e685      	b.n	800ecfe <ai_platform_network_process+0x1f6>
 800eff2:	9c00      	ldr	r4, [sp, #0]
 800eff4:	2217      	movs	r2, #23
 800eff6:	2113      	movs	r1, #19
 800eff8:	46d3      	mov	fp, sl
 800effa:	f104 0010 	add.w	r0, r4, #16
 800effe:	f000 f835 	bl	800f06c <core_set_error>
 800f002:	e67c      	b.n	800ecfe <ai_platform_network_process+0x1f6>
 800f004:	9c00      	ldr	r4, [sp, #0]
 800f006:	2221      	movs	r2, #33	; 0x21
 800f008:	2113      	movs	r1, #19
 800f00a:	469b      	mov	fp, r3
 800f00c:	f104 0010 	add.w	r0, r4, #16
 800f010:	f000 f82c 	bl	800f06c <core_set_error>
 800f014:	e673      	b.n	800ecfe <ai_platform_network_process+0x1f6>
 800f016:	9c00      	ldr	r4, [sp, #0]
 800f018:	2217      	movs	r2, #23
 800f01a:	2113      	movs	r1, #19
 800f01c:	469b      	mov	fp, r3
 800f01e:	f104 0010 	add.w	r0, r4, #16
 800f022:	f000 f823 	bl	800f06c <core_set_error>
 800f026:	e66a      	b.n	800ecfe <ai_platform_network_process+0x1f6>
 800f028:	9c00      	ldr	r4, [sp, #0]
 800f02a:	2219      	movs	r2, #25
 800f02c:	2113      	movs	r1, #19
 800f02e:	f04f 0b00 	mov.w	fp, #0
 800f032:	f104 0010 	add.w	r0, r4, #16
 800f036:	f000 f819 	bl	800f06c <core_set_error>
 800f03a:	e660      	b.n	800ecfe <ai_platform_network_process+0x1f6>
 800f03c:	f104 0010 	add.w	r0, r4, #16
 800f040:	2217      	movs	r2, #23
 800f042:	2112      	movs	r1, #18
 800f044:	469b      	mov	fp, r3
 800f046:	f000 f811 	bl	800f06c <core_set_error>
 800f04a:	e658      	b.n	800ecfe <ai_platform_network_process+0x1f6>
 800f04c:	f104 0010 	add.w	r0, r4, #16
 800f050:	2219      	movs	r2, #25
 800f052:	2112      	movs	r1, #18
 800f054:	f04f 0b00 	mov.w	fp, #0
 800f058:	f000 f808 	bl	800f06c <core_set_error>
 800f05c:	e64f      	b.n	800ecfe <ai_platform_network_process+0x1f6>
 800f05e:	f1ba 0f00 	cmp.w	sl, #0
 800f062:	f47f ae7f 	bne.w	800ed64 <ai_platform_network_process+0x25c>
 800f066:	e70d      	b.n	800ee84 <ai_platform_network_process+0x37c>

0800f068 <core_init>:
 800f068:	2001      	movs	r0, #1
 800f06a:	4770      	bx	lr

0800f06c <core_set_error>:
 800f06c:	4603      	mov	r3, r0
 800f06e:	7800      	ldrb	r0, [r0, #0]
 800f070:	b930      	cbnz	r0, 800f080 <core_set_error+0x14>
 800f072:	7019      	strb	r1, [r3, #0]
 800f074:	2001      	movs	r0, #1
 800f076:	6819      	ldr	r1, [r3, #0]
 800f078:	f362 211f 	bfi	r1, r2, #8, #24
 800f07c:	6019      	str	r1, [r3, #0]
 800f07e:	4770      	bx	lr
 800f080:	2000      	movs	r0, #0
 800f082:	4770      	bx	lr

0800f084 <ai_dict8_dot_array_f32>:
 800f084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f088:	9d06      	ldr	r5, [sp, #24]
 800f08a:	4c88      	ldr	r4, [pc, #544]	; (800f2ac <ai_dict8_dot_array_f32+0x228>)
 800f08c:	2d07      	cmp	r5, #7
 800f08e:	442c      	add	r4, r5
 800f090:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f094:	f104 0620 	add.w	r6, r4, #32
 800f098:	d817      	bhi.n	800f0ca <ai_dict8_dot_array_f32+0x46>
 800f09a:	42b3      	cmp	r3, r6
 800f09c:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800f2b0 <ai_dict8_dot_array_f32+0x22c>
 800f0a0:	d20b      	bcs.n	800f0ba <ai_dict8_dot_array_f32+0x36>
 800f0a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0a6:	ecf3 7a01 	vldmia	r3!, {s15}
 800f0aa:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f0ae:	42b3      	cmp	r3, r6
 800f0b0:	edd4 6a00 	vldr	s13, [r4]
 800f0b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f0b8:	d3f3      	bcc.n	800f0a2 <ai_dict8_dot_array_f32+0x1e>
 800f0ba:	edd0 7a00 	vldr	s15, [r0]
 800f0be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f0c2:	ed80 7a00 	vstr	s14, [r0]
 800f0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0ca:	f001 0503 	and.w	r5, r1, #3
 800f0ce:	2d02      	cmp	r5, #2
 800f0d0:	f000 80f0 	beq.w	800f2b4 <ai_dict8_dot_array_f32+0x230>
 800f0d4:	2d03      	cmp	r5, #3
 800f0d6:	f000 81ff 	beq.w	800f4d8 <ai_dict8_dot_array_f32+0x454>
 800f0da:	2d01      	cmp	r5, #1
 800f0dc:	f000 81f0 	beq.w	800f4c0 <ai_dict8_dot_array_f32+0x43c>
 800f0e0:	42a3      	cmp	r3, r4
 800f0e2:	f200 81fc 	bhi.w	800f4de <ai_dict8_dot_array_f32+0x45a>
 800f0e6:	1ae4      	subs	r4, r4, r3
 800f0e8:	f101 0810 	add.w	r8, r1, #16
 800f0ec:	f101 0508 	add.w	r5, r1, #8
 800f0f0:	f103 0720 	add.w	r7, r3, #32
 800f0f4:	0964      	lsrs	r4, r4, #5
 800f0f6:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800f2b0 <ai_dict8_dot_array_f32+0x22c>
 800f0fa:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 800f0fe:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 800f102:	3508      	adds	r5, #8
 800f104:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 800f108:	3720      	adds	r7, #32
 800f10a:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800f10e:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 800f112:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800f116:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 800f11a:	edde 7a00 	vldr	s15, [lr]
 800f11e:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 800f122:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f126:	eddc 5a00 	vldr	s11, [ip]
 800f12a:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 800f12e:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 800f132:	eee5 7a86 	vfma.f32	s15, s11, s12
 800f136:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800f13a:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 800f13e:	ed9c 4a00 	vldr	s8, [ip]
 800f142:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 800f146:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800f14a:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 800f14e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800f152:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 800f156:	eee4 7a26 	vfma.f32	s15, s8, s13
 800f15a:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 800f15e:	ed9c 4a00 	vldr	s8, [ip]
 800f162:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 800f166:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 800f16a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800f16e:	eee4 7a05 	vfma.f32	s15, s8, s10
 800f172:	ed9e 5a00 	vldr	s10, [lr]
 800f176:	ed9c 4a00 	vldr	s8, [ip]
 800f17a:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 800f17e:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 800f182:	4545      	cmp	r5, r8
 800f184:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800f188:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800f18c:	eee5 7a06 	vfma.f32	s15, s10, s12
 800f190:	ed9e 5a00 	vldr	s10, [lr]
 800f194:	ed9c 6a00 	vldr	s12, [ip]
 800f198:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f19c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f1a0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f1a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f1a8:	d1a9      	bne.n	800f0fe <ai_dict8_dot_array_f32+0x7a>
 800f1aa:	3401      	adds	r4, #1
 800f1ac:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800f1b0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 800f1b4:	42b3      	cmp	r3, r6
 800f1b6:	d280      	bcs.n	800f0ba <ai_dict8_dot_array_f32+0x36>
 800f1b8:	461c      	mov	r4, r3
 800f1ba:	780d      	ldrb	r5, [r1, #0]
 800f1bc:	ecf4 6a01 	vldmia	r4!, {s13}
 800f1c0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800f1c4:	42a6      	cmp	r6, r4
 800f1c6:	edd5 7a00 	vldr	s15, [r5]
 800f1ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f1ce:	f67f af74 	bls.w	800f0ba <ai_dict8_dot_array_f32+0x36>
 800f1d2:	784d      	ldrb	r5, [r1, #1]
 800f1d4:	f103 0408 	add.w	r4, r3, #8
 800f1d8:	edd3 6a01 	vldr	s13, [r3, #4]
 800f1dc:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800f1e0:	42a6      	cmp	r6, r4
 800f1e2:	edd5 7a00 	vldr	s15, [r5]
 800f1e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f1ea:	f67f af66 	bls.w	800f0ba <ai_dict8_dot_array_f32+0x36>
 800f1ee:	788d      	ldrb	r5, [r1, #2]
 800f1f0:	f103 040c 	add.w	r4, r3, #12
 800f1f4:	edd3 6a02 	vldr	s13, [r3, #8]
 800f1f8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800f1fc:	42a6      	cmp	r6, r4
 800f1fe:	edd5 7a00 	vldr	s15, [r5]
 800f202:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f206:	f67f af58 	bls.w	800f0ba <ai_dict8_dot_array_f32+0x36>
 800f20a:	78cd      	ldrb	r5, [r1, #3]
 800f20c:	f103 0410 	add.w	r4, r3, #16
 800f210:	edd3 6a03 	vldr	s13, [r3, #12]
 800f214:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800f218:	42a6      	cmp	r6, r4
 800f21a:	edd5 7a00 	vldr	s15, [r5]
 800f21e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f222:	f67f af4a 	bls.w	800f0ba <ai_dict8_dot_array_f32+0x36>
 800f226:	790d      	ldrb	r5, [r1, #4]
 800f228:	f103 0414 	add.w	r4, r3, #20
 800f22c:	edd3 6a04 	vldr	s13, [r3, #16]
 800f230:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800f234:	42a6      	cmp	r6, r4
 800f236:	edd5 7a00 	vldr	s15, [r5]
 800f23a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f23e:	f67f af3c 	bls.w	800f0ba <ai_dict8_dot_array_f32+0x36>
 800f242:	794d      	ldrb	r5, [r1, #5]
 800f244:	f103 0418 	add.w	r4, r3, #24
 800f248:	edd3 6a05 	vldr	s13, [r3, #20]
 800f24c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800f250:	42a6      	cmp	r6, r4
 800f252:	edd5 7a00 	vldr	s15, [r5]
 800f256:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f25a:	f67f af2e 	bls.w	800f0ba <ai_dict8_dot_array_f32+0x36>
 800f25e:	798d      	ldrb	r5, [r1, #6]
 800f260:	f103 041c 	add.w	r4, r3, #28
 800f264:	edd3 6a06 	vldr	s13, [r3, #24]
 800f268:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800f26c:	42a6      	cmp	r6, r4
 800f26e:	edd5 7a00 	vldr	s15, [r5]
 800f272:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f276:	f67f af20 	bls.w	800f0ba <ai_dict8_dot_array_f32+0x36>
 800f27a:	79cd      	ldrb	r5, [r1, #7]
 800f27c:	f103 0420 	add.w	r4, r3, #32
 800f280:	edd3 6a07 	vldr	s13, [r3, #28]
 800f284:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800f288:	42a6      	cmp	r6, r4
 800f28a:	edd5 7a00 	vldr	s15, [r5]
 800f28e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f292:	f67f af12 	bls.w	800f0ba <ai_dict8_dot_array_f32+0x36>
 800f296:	7a09      	ldrb	r1, [r1, #8]
 800f298:	edd3 7a08 	vldr	s15, [r3, #32]
 800f29c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f2a0:	edd2 6a00 	vldr	s13, [r2]
 800f2a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f2a8:	e707      	b.n	800f0ba <ai_dict8_dot_array_f32+0x36>
 800f2aa:	bf00      	nop
 800f2ac:	3ffffff8 	.word	0x3ffffff8
 800f2b0:	00000000 	.word	0x00000000
 800f2b4:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 800f2b0 <ai_dict8_dot_array_f32+0x22c>
 800f2b8:	780d      	ldrb	r5, [r1, #0]
 800f2ba:	3304      	adds	r3, #4
 800f2bc:	ed53 7a01 	vldr	s15, [r3, #-4]
 800f2c0:	3101      	adds	r1, #1
 800f2c2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800f2c6:	edd5 6a00 	vldr	s13, [r5]
 800f2ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f2ce:	780d      	ldrb	r5, [r1, #0]
 800f2d0:	1d1f      	adds	r7, r3, #4
 800f2d2:	edd3 7a00 	vldr	s15, [r3]
 800f2d6:	f101 0c01 	add.w	ip, r1, #1
 800f2da:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800f2de:	42bc      	cmp	r4, r7
 800f2e0:	edd5 6a00 	vldr	s13, [r5]
 800f2e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f2e8:	d365      	bcc.n	800f3b6 <ai_dict8_dot_array_f32+0x332>
 800f2ea:	3324      	adds	r3, #36	; 0x24
 800f2ec:	f101 0e11 	add.w	lr, r1, #17
 800f2f0:	3109      	adds	r1, #9
 800f2f2:	eba6 0803 	sub.w	r8, r6, r3
 800f2f6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800f2fa:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 800f2fe:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800f302:	3108      	adds	r1, #8
 800f304:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 800f308:	3320      	adds	r3, #32
 800f30a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800f30e:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 800f312:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f316:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 800f31a:	edd5 7a00 	vldr	s15, [r5]
 800f31e:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 800f322:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f326:	edd4 5a00 	vldr	s11, [r4]
 800f32a:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 800f32e:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 800f332:	eee5 7a86 	vfma.f32	s15, s11, s12
 800f336:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f33a:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800f33e:	ed94 4a00 	vldr	s8, [r4]
 800f342:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 800f346:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800f34a:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 800f34e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f352:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 800f356:	eee4 7a26 	vfma.f32	s15, s8, s13
 800f35a:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 800f35e:	ed94 4a00 	vldr	s8, [r4]
 800f362:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 800f366:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 800f36a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f36e:	eee4 7a05 	vfma.f32	s15, s8, s10
 800f372:	ed95 5a00 	vldr	s10, [r5]
 800f376:	ed94 4a00 	vldr	s8, [r4]
 800f37a:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800f37e:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 800f382:	458e      	cmp	lr, r1
 800f384:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800f388:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f38c:	eee5 7a06 	vfma.f32	s15, s10, s12
 800f390:	ed95 5a00 	vldr	s10, [r5]
 800f394:	ed94 6a00 	vldr	s12, [r4]
 800f398:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f39c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f3a0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f3a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f3a8:	d1a9      	bne.n	800f2fe <ai_dict8_dot_array_f32+0x27a>
 800f3aa:	f108 0801 	add.w	r8, r8, #1
 800f3ae:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800f3b2:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 800f3b6:	42b7      	cmp	r7, r6
 800f3b8:	f4bf ae7f 	bcs.w	800f0ba <ai_dict8_dot_array_f32+0x36>
 800f3bc:	463b      	mov	r3, r7
 800f3be:	f89c 1000 	ldrb.w	r1, [ip]
 800f3c2:	ecf3 6a01 	vldmia	r3!, {s13}
 800f3c6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f3ca:	429e      	cmp	r6, r3
 800f3cc:	edd1 7a00 	vldr	s15, [r1]
 800f3d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f3d4:	f67f ae71 	bls.w	800f0ba <ai_dict8_dot_array_f32+0x36>
 800f3d8:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800f3dc:	f107 0308 	add.w	r3, r7, #8
 800f3e0:	edd7 6a01 	vldr	s13, [r7, #4]
 800f3e4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f3e8:	429e      	cmp	r6, r3
 800f3ea:	edd1 7a00 	vldr	s15, [r1]
 800f3ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f3f2:	f67f ae62 	bls.w	800f0ba <ai_dict8_dot_array_f32+0x36>
 800f3f6:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800f3fa:	f107 030c 	add.w	r3, r7, #12
 800f3fe:	edd7 6a02 	vldr	s13, [r7, #8]
 800f402:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f406:	429e      	cmp	r6, r3
 800f408:	edd1 7a00 	vldr	s15, [r1]
 800f40c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f410:	f67f ae53 	bls.w	800f0ba <ai_dict8_dot_array_f32+0x36>
 800f414:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800f418:	f107 0310 	add.w	r3, r7, #16
 800f41c:	edd7 6a03 	vldr	s13, [r7, #12]
 800f420:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f424:	429e      	cmp	r6, r3
 800f426:	edd1 7a00 	vldr	s15, [r1]
 800f42a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f42e:	f67f ae44 	bls.w	800f0ba <ai_dict8_dot_array_f32+0x36>
 800f432:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800f436:	f107 0314 	add.w	r3, r7, #20
 800f43a:	edd7 6a04 	vldr	s13, [r7, #16]
 800f43e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f442:	429e      	cmp	r6, r3
 800f444:	edd1 7a00 	vldr	s15, [r1]
 800f448:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f44c:	f67f ae35 	bls.w	800f0ba <ai_dict8_dot_array_f32+0x36>
 800f450:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800f454:	f107 0318 	add.w	r3, r7, #24
 800f458:	edd7 6a05 	vldr	s13, [r7, #20]
 800f45c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f460:	429e      	cmp	r6, r3
 800f462:	edd1 7a00 	vldr	s15, [r1]
 800f466:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f46a:	f67f ae26 	bls.w	800f0ba <ai_dict8_dot_array_f32+0x36>
 800f46e:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800f472:	f107 031c 	add.w	r3, r7, #28
 800f476:	edd7 6a06 	vldr	s13, [r7, #24]
 800f47a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f47e:	429e      	cmp	r6, r3
 800f480:	edd1 7a00 	vldr	s15, [r1]
 800f484:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f488:	f67f ae17 	bls.w	800f0ba <ai_dict8_dot_array_f32+0x36>
 800f48c:	f89c 1007 	ldrb.w	r1, [ip, #7]
 800f490:	f107 0320 	add.w	r3, r7, #32
 800f494:	edd7 6a07 	vldr	s13, [r7, #28]
 800f498:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f49c:	429e      	cmp	r6, r3
 800f49e:	edd1 7a00 	vldr	s15, [r1]
 800f4a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f4a6:	f67f ae08 	bls.w	800f0ba <ai_dict8_dot_array_f32+0x36>
 800f4aa:	f89c 3008 	ldrb.w	r3, [ip, #8]
 800f4ae:	edd7 7a08 	vldr	s15, [r7, #32]
 800f4b2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f4b6:	edd2 6a00 	vldr	s13, [r2]
 800f4ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f4be:	e5fc      	b.n	800f0ba <ai_dict8_dot_array_f32+0x36>
 800f4c0:	780d      	ldrb	r5, [r1, #0]
 800f4c2:	3304      	adds	r3, #4
 800f4c4:	ed53 7a01 	vldr	s15, [r3, #-4]
 800f4c8:	3101      	adds	r1, #1
 800f4ca:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800f4ce:	ed95 7a00 	vldr	s14, [r5]
 800f4d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f4d6:	e6ef      	b.n	800f2b8 <ai_dict8_dot_array_f32+0x234>
 800f4d8:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 800f2b0 <ai_dict8_dot_array_f32+0x22c>
 800f4dc:	e6f7      	b.n	800f2ce <ai_dict8_dot_array_f32+0x24a>
 800f4de:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 800f2b0 <ai_dict8_dot_array_f32+0x22c>
 800f4e2:	e667      	b.n	800f1b4 <ai_dict8_dot_array_f32+0x130>

0800f4e4 <ai_dict4_dot_array_f32>:
 800f4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f4ea:	f027 0c01 	bic.w	ip, r7, #1
 800f4ee:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800f4f2:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800f4f6:	f000 80ad 	beq.w	800f654 <ai_dict4_dot_array_f32+0x170>
 800f4fa:	1d0d      	adds	r5, r1, #4
 800f4fc:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800f500:	f103 0420 	add.w	r4, r3, #32
 800f504:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800f65c <ai_dict4_dot_array_f32+0x178>
 800f508:	eb05 0e09 	add.w	lr, r5, r9
 800f50c:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800f510:	3504      	adds	r5, #4
 800f512:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 800f516:	3420      	adds	r4, #32
 800f518:	f006 0a0f 	and.w	sl, r6, #15
 800f51c:	0936      	lsrs	r6, r6, #4
 800f51e:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800f522:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800f526:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 800f52a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f52e:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 800f532:	edda 7a00 	vldr	s15, [sl]
 800f536:	edd6 5a00 	vldr	s11, [r6]
 800f53a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f53e:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 800f542:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 800f546:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800f54a:	f006 060f 	and.w	r6, r6, #15
 800f54e:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800f552:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 800f556:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800f55a:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 800f55e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f562:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 800f566:	ed9a 3a00 	vldr	s6, [sl]
 800f56a:	ed96 5a00 	vldr	s10, [r6]
 800f56e:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 800f572:	eee3 7a04 	vfma.f32	s15, s6, s8
 800f576:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 800f57a:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800f57e:	f00a 0a0f 	and.w	sl, sl, #15
 800f582:	45ae      	cmp	lr, r5
 800f584:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800f588:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800f58c:	ed9b 3a00 	vldr	s6, [fp]
 800f590:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 800f594:	eee5 7a06 	vfma.f32	s15, s10, s12
 800f598:	ed9a 4a00 	vldr	s8, [sl]
 800f59c:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 800f5a0:	f006 060f 	and.w	r6, r6, #15
 800f5a4:	ed9a 5a00 	vldr	s10, [sl]
 800f5a8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f5ac:	ed96 6a00 	vldr	s12, [r6]
 800f5b0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800f5b4:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f5b8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f5bc:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f5c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f5c4:	d1a2      	bne.n	800f50c <ai_dict4_dot_array_f32+0x28>
 800f5c6:	4449      	add	r1, r9
 800f5c8:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800f5cc:	459c      	cmp	ip, r3
 800f5ce:	d92d      	bls.n	800f62c <ai_dict4_dot_array_f32+0x148>
 800f5d0:	f10c 0c07 	add.w	ip, ip, #7
 800f5d4:	f103 0508 	add.w	r5, r3, #8
 800f5d8:	f103 0810 	add.w	r8, r3, #16
 800f5dc:	f101 3eff 	add.w	lr, r1, #4294967295
 800f5e0:	ebac 0c05 	sub.w	ip, ip, r5
 800f5e4:	f02c 0407 	bic.w	r4, ip, #7
 800f5e8:	44a0      	add	r8, r4
 800f5ea:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800f5ee:	3508      	adds	r5, #8
 800f5f0:	ed55 5a03 	vldr	s11, [r5, #-12]
 800f5f4:	f004 060f 	and.w	r6, r4, #15
 800f5f8:	0924      	lsrs	r4, r4, #4
 800f5fa:	ed55 6a04 	vldr	s13, [r5, #-16]
 800f5fe:	45a8      	cmp	r8, r5
 800f600:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f604:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f608:	edd6 7a00 	vldr	s15, [r6]
 800f60c:	ed94 6a00 	vldr	s12, [r4]
 800f610:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f614:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f618:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f61c:	d1e5      	bne.n	800f5ea <ai_dict4_dot_array_f32+0x106>
 800f61e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800f622:	f10c 0c01 	add.w	ip, ip, #1
 800f626:	4461      	add	r1, ip
 800f628:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800f62c:	07fc      	lsls	r4, r7, #31
 800f62e:	d509      	bpl.n	800f644 <ai_dict4_dot_array_f32+0x160>
 800f630:	7809      	ldrb	r1, [r1, #0]
 800f632:	edd3 7a00 	vldr	s15, [r3]
 800f636:	090b      	lsrs	r3, r1, #4
 800f638:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f63c:	edd2 6a00 	vldr	s13, [r2]
 800f640:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f644:	edd0 7a00 	vldr	s15, [r0]
 800f648:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f64c:	ed80 7a00 	vstr	s14, [r0]
 800f650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f654:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800f65c <ai_dict4_dot_array_f32+0x178>
 800f658:	e7b8      	b.n	800f5cc <ai_dict4_dot_array_f32+0xe8>
 800f65a:	bf00      	nop
 800f65c:	00000000 	.word	0x00000000

0800f660 <forward_dense>:
 800f660:	6942      	ldr	r2, [r0, #20]
 800f662:	8813      	ldrh	r3, [r2, #0]
 800f664:	2b00      	cmp	r3, #0
 800f666:	f000 81c8 	beq.w	800f9fa <forward_dense+0x39a>
 800f66a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f66e:	ed2d 8b08 	vpush	{d8-d11}
 800f672:	6851      	ldr	r1, [r2, #4]
 800f674:	b091      	sub	sp, #68	; 0x44
 800f676:	684d      	ldr	r5, [r1, #4]
 800f678:	b105      	cbz	r5, 800f67c <forward_dense+0x1c>
 800f67a:	682d      	ldr	r5, [r5, #0]
 800f67c:	2b01      	cmp	r3, #1
 800f67e:	f240 81b9 	bls.w	800f9f4 <forward_dense+0x394>
 800f682:	690a      	ldr	r2, [r1, #16]
 800f684:	b102      	cbz	r2, 800f688 <forward_dense+0x28>
 800f686:	6812      	ldr	r2, [r2, #0]
 800f688:	2b02      	cmp	r3, #2
 800f68a:	f000 81b8 	beq.w	800f9fe <forward_dense+0x39e>
 800f68e:	69cb      	ldr	r3, [r1, #28]
 800f690:	2b00      	cmp	r3, #0
 800f692:	f000 8209 	beq.w	800faa8 <forward_dense+0x448>
 800f696:	6818      	ldr	r0, [r3, #0]
 800f698:	9008      	str	r0, [sp, #32]
 800f69a:	f111 0018 	adds.w	r0, r1, #24
 800f69e:	f000 81dc 	beq.w	800fa5a <forward_dense+0x3fa>
 800f6a2:	8b09      	ldrh	r1, [r1, #24]
 800f6a4:	2901      	cmp	r1, #1
 800f6a6:	f240 81fc 	bls.w	800faa2 <forward_dense+0x442>
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	f000 81d7 	beq.w	800fa5e <forward_dense+0x3fe>
 800f6b0:	685b      	ldr	r3, [r3, #4]
 800f6b2:	9306      	str	r3, [sp, #24]
 800f6b4:	9b08      	ldr	r3, [sp, #32]
 800f6b6:	68d6      	ldr	r6, [r2, #12]
 800f6b8:	699b      	ldr	r3, [r3, #24]
 800f6ba:	68b0      	ldr	r0, [r6, #8]
 800f6bc:	681f      	ldr	r7, [r3, #0]
 800f6be:	68f4      	ldr	r4, [r6, #12]
 800f6c0:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 800f6c4:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 800f6c8:	f3c7 4743 	ubfx	r7, r7, #17, #4
 800f6cc:	fb04 f000 	mul.w	r0, r4, r0
 800f6d0:	fa4e f10c 	asr.w	r1, lr, ip
 800f6d4:	2f04      	cmp	r7, #4
 800f6d6:	9007      	str	r0, [sp, #28]
 800f6d8:	910b      	str	r1, [sp, #44]	; 0x2c
 800f6da:	68e9      	ldr	r1, [r5, #12]
 800f6dc:	6870      	ldr	r0, [r6, #4]
 800f6de:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800f6e2:	f000 81db 	beq.w	800fa9c <forward_dense+0x43c>
 800f6e6:	2f08      	cmp	r7, #8
 800f6e8:	f000 81d8 	beq.w	800fa9c <forward_dense+0x43c>
 800f6ec:	f04f 0a00 	mov.w	sl, #0
 800f6f0:	6992      	ldr	r2, [r2, #24]
 800f6f2:	0080      	lsls	r0, r0, #2
 800f6f4:	69a9      	ldr	r1, [r5, #24]
 800f6f6:	6894      	ldr	r4, [r2, #8]
 800f6f8:	9a08      	ldr	r2, [sp, #32]
 800f6fa:	9009      	str	r0, [sp, #36]	; 0x24
 800f6fc:	1826      	adds	r6, r4, r0
 800f6fe:	6952      	ldr	r2, [r2, #20]
 800f700:	9404      	str	r4, [sp, #16]
 800f702:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800f706:	9a07      	ldr	r2, [sp, #28]
 800f708:	688f      	ldr	r7, [r1, #8]
 800f70a:	2a00      	cmp	r2, #0
 800f70c:	f000 81c1 	beq.w	800fa92 <forward_dense+0x432>
 800f710:	f1a8 0210 	sub.w	r2, r8, #16
 800f714:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800f718:	689d      	ldr	r5, [r3, #8]
 800f71a:	0912      	lsrs	r2, r2, #4
 800f71c:	910a      	str	r1, [sp, #40]	; 0x28
 800f71e:	2100      	movs	r1, #0
 800f720:	9b06      	ldr	r3, [sp, #24]
 800f722:	3201      	adds	r2, #1
 800f724:	eddf 2acf 	vldr	s5, [pc, #828]	; 800fa64 <forward_dense+0x404>
 800f728:	9105      	str	r1, [sp, #20]
 800f72a:	f008 010f 	and.w	r1, r8, #15
 800f72e:	0192      	lsls	r2, r2, #6
 800f730:	910d      	str	r1, [sp, #52]	; 0x34
 800f732:	920c      	str	r2, [sp, #48]	; 0x30
 800f734:	2b00      	cmp	r3, #0
 800f736:	d042      	beq.n	800f7be <forward_dense+0x15e>
 800f738:	699b      	ldr	r3, [r3, #24]
 800f73a:	689c      	ldr	r4, [r3, #8]
 800f73c:	9b04      	ldr	r3, [sp, #16]
 800f73e:	f1ba 0f00 	cmp.w	sl, #0
 800f742:	d041      	beq.n	800f7c8 <forward_dense+0x168>
 800f744:	42b3      	cmp	r3, r6
 800f746:	d229      	bcs.n	800f79c <forward_dense+0x13c>
 800f748:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f74a:	469b      	mov	fp, r3
 800f74c:	ab0f      	add	r3, sp, #60	; 0x3c
 800f74e:	2a04      	cmp	r2, #4
 800f750:	9303      	str	r3, [sp, #12]
 800f752:	4633      	mov	r3, r6
 800f754:	4646      	mov	r6, r8
 800f756:	4698      	mov	r8, r3
 800f758:	f000 8154 	beq.w	800fa04 <forward_dense+0x3a4>
 800f75c:	2c00      	cmp	r4, #0
 800f75e:	f000 8183 	beq.w	800fa68 <forward_dense+0x408>
 800f762:	f8d4 c000 	ldr.w	ip, [r4]
 800f766:	463b      	mov	r3, r7
 800f768:	4629      	mov	r1, r5
 800f76a:	9600      	str	r6, [sp, #0]
 800f76c:	4652      	mov	r2, sl
 800f76e:	9803      	ldr	r0, [sp, #12]
 800f770:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800f774:	f7ff fc86 	bl	800f084 <ai_dict8_dot_array_f32>
 800f778:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f77a:	3404      	adds	r4, #4
 800f77c:	444d      	add	r5, r9
 800f77e:	f84b 3b04 	str.w	r3, [fp], #4
 800f782:	45c3      	cmp	fp, r8
 800f784:	d3ea      	bcc.n	800f75c <forward_dense+0xfc>
 800f786:	4643      	mov	r3, r8
 800f788:	46b0      	mov	r8, r6
 800f78a:	461e      	mov	r6, r3
 800f78c:	9a04      	ldr	r2, [sp, #16]
 800f78e:	43d3      	mvns	r3, r2
 800f790:	4433      	add	r3, r6
 800f792:	f023 0303 	bic.w	r3, r3, #3
 800f796:	3304      	adds	r3, #4
 800f798:	18d3      	adds	r3, r2, r3
 800f79a:	9304      	str	r3, [sp, #16]
 800f79c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f79e:	9b05      	ldr	r3, [sp, #20]
 800f7a0:	4417      	add	r7, r2
 800f7a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7a4:	3301      	adds	r3, #1
 800f7a6:	4416      	add	r6, r2
 800f7a8:	9a07      	ldr	r2, [sp, #28]
 800f7aa:	9305      	str	r3, [sp, #20]
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	f000 8170 	beq.w	800fa92 <forward_dense+0x432>
 800f7b2:	9b08      	ldr	r3, [sp, #32]
 800f7b4:	699b      	ldr	r3, [r3, #24]
 800f7b6:	689d      	ldr	r5, [r3, #8]
 800f7b8:	9b06      	ldr	r3, [sp, #24]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d1bc      	bne.n	800f738 <forward_dense+0xd8>
 800f7be:	461c      	mov	r4, r3
 800f7c0:	9b04      	ldr	r3, [sp, #16]
 800f7c2:	f1ba 0f00 	cmp.w	sl, #0
 800f7c6:	d1bd      	bne.n	800f744 <forward_dense+0xe4>
 800f7c8:	42b3      	cmp	r3, r6
 800f7ca:	d2e7      	bcs.n	800f79c <forward_dense+0x13c>
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7d0:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800f7d4:	eb07 0c03 	add.w	ip, r7, r3
 800f7d8:	469e      	mov	lr, r3
 800f7da:	2c00      	cmp	r4, #0
 800f7dc:	f000 80fe 	beq.w	800f9dc <forward_dense+0x37c>
 800f7e0:	f1b8 0f0f 	cmp.w	r8, #15
 800f7e4:	ed94 6a00 	vldr	s12, [r4]
 800f7e8:	f104 0404 	add.w	r4, r4, #4
 800f7ec:	f240 80fc 	bls.w	800f9e8 <forward_dense+0x388>
 800f7f0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f7f4:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800f7f8:	4641      	mov	r1, r8
 800f7fa:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800fa64 <forward_dense+0x404>
 800f7fe:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 800f802:	3910      	subs	r1, #16
 800f804:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 800f808:	3240      	adds	r2, #64	; 0x40
 800f80a:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 800f80e:	290f      	cmp	r1, #15
 800f810:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f814:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 800f818:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 800f81c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800f820:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 800f824:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f828:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 800f82c:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 800f830:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 800f834:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 800f838:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 800f83c:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 800f840:	eee2 7a03 	vfma.f32	s15, s4, s6
 800f844:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800f848:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 800f84c:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800f850:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800f854:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 800f858:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 800f85c:	eee3 7a84 	vfma.f32	s15, s7, s8
 800f860:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 800f864:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 800f868:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 800f86c:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 800f870:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 800f874:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 800f878:	eee4 7a85 	vfma.f32	s15, s9, s10
 800f87c:	ed13 2a14 	vldr	s4, [r3, #-80]	; 0xffffffb0
 800f880:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800f884:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 800f888:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 800f88c:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 800f890:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 800f894:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f898:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 800f89c:	ed12 7a11 	vldr	s14, [r2, #-68]	; 0xffffffbc
 800f8a0:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800f8a4:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800f8a8:	eee9 7a89 	vfma.f32	s15, s19, s18
 800f8ac:	eee8 7a88 	vfma.f32	s15, s17, s16
 800f8b0:	eee0 7a20 	vfma.f32	s15, s0, s1
 800f8b4:	eee1 7a21 	vfma.f32	s15, s2, s3
 800f8b8:	eee2 7a03 	vfma.f32	s15, s4, s6
 800f8bc:	eee3 7a84 	vfma.f32	s15, s7, s8
 800f8c0:	eee4 7a85 	vfma.f32	s15, s9, s10
 800f8c4:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f8c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f8cc:	d897      	bhi.n	800f7fe <forward_dense+0x19e>
 800f8ce:	eb05 010e 	add.w	r1, r5, lr
 800f8d2:	465b      	mov	r3, fp
 800f8d4:	4662      	mov	r2, ip
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d075      	beq.n	800f9c6 <forward_dense+0x366>
 800f8da:	ed91 7a00 	vldr	s14, [r1]
 800f8de:	2b01      	cmp	r3, #1
 800f8e0:	edd2 7a00 	vldr	s15, [r2]
 800f8e4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f8e8:	d06d      	beq.n	800f9c6 <forward_dense+0x366>
 800f8ea:	ed91 7a01 	vldr	s14, [r1, #4]
 800f8ee:	2b02      	cmp	r3, #2
 800f8f0:	edd2 7a01 	vldr	s15, [r2, #4]
 800f8f4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f8f8:	d065      	beq.n	800f9c6 <forward_dense+0x366>
 800f8fa:	ed91 7a02 	vldr	s14, [r1, #8]
 800f8fe:	2b03      	cmp	r3, #3
 800f900:	edd2 7a02 	vldr	s15, [r2, #8]
 800f904:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f908:	d05d      	beq.n	800f9c6 <forward_dense+0x366>
 800f90a:	ed91 7a03 	vldr	s14, [r1, #12]
 800f90e:	2b04      	cmp	r3, #4
 800f910:	edd2 7a03 	vldr	s15, [r2, #12]
 800f914:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f918:	d055      	beq.n	800f9c6 <forward_dense+0x366>
 800f91a:	ed91 7a04 	vldr	s14, [r1, #16]
 800f91e:	2b05      	cmp	r3, #5
 800f920:	edd2 7a04 	vldr	s15, [r2, #16]
 800f924:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f928:	d04d      	beq.n	800f9c6 <forward_dense+0x366>
 800f92a:	ed91 7a05 	vldr	s14, [r1, #20]
 800f92e:	2b06      	cmp	r3, #6
 800f930:	edd2 7a05 	vldr	s15, [r2, #20]
 800f934:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f938:	d045      	beq.n	800f9c6 <forward_dense+0x366>
 800f93a:	ed91 7a06 	vldr	s14, [r1, #24]
 800f93e:	2b07      	cmp	r3, #7
 800f940:	edd2 7a06 	vldr	s15, [r2, #24]
 800f944:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f948:	d03d      	beq.n	800f9c6 <forward_dense+0x366>
 800f94a:	ed91 7a07 	vldr	s14, [r1, #28]
 800f94e:	2b08      	cmp	r3, #8
 800f950:	edd2 7a07 	vldr	s15, [r2, #28]
 800f954:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f958:	d035      	beq.n	800f9c6 <forward_dense+0x366>
 800f95a:	ed91 7a08 	vldr	s14, [r1, #32]
 800f95e:	2b09      	cmp	r3, #9
 800f960:	edd2 7a08 	vldr	s15, [r2, #32]
 800f964:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f968:	d02d      	beq.n	800f9c6 <forward_dense+0x366>
 800f96a:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800f96e:	2b0a      	cmp	r3, #10
 800f970:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800f974:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f978:	d025      	beq.n	800f9c6 <forward_dense+0x366>
 800f97a:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800f97e:	2b0b      	cmp	r3, #11
 800f980:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800f984:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f988:	d01d      	beq.n	800f9c6 <forward_dense+0x366>
 800f98a:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800f98e:	2b0c      	cmp	r3, #12
 800f990:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800f994:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f998:	d015      	beq.n	800f9c6 <forward_dense+0x366>
 800f99a:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800f99e:	2b0d      	cmp	r3, #13
 800f9a0:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800f9a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f9a8:	d00d      	beq.n	800f9c6 <forward_dense+0x366>
 800f9aa:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800f9ae:	2b0e      	cmp	r3, #14
 800f9b0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800f9b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f9b8:	d005      	beq.n	800f9c6 <forward_dense+0x366>
 800f9ba:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800f9be:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800f9c2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f9c6:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f9ca:	444d      	add	r5, r9
 800f9cc:	ece0 6a01 	vstmia	r0!, {s13}
 800f9d0:	42b0      	cmp	r0, r6
 800f9d2:	f4bf aedb 	bcs.w	800f78c <forward_dense+0x12c>
 800f9d6:	2c00      	cmp	r4, #0
 800f9d8:	f47f af02 	bne.w	800f7e0 <forward_dense+0x180>
 800f9dc:	f1b8 0f0f 	cmp.w	r8, #15
 800f9e0:	eeb0 6a62 	vmov.f32	s12, s5
 800f9e4:	f63f af04 	bhi.w	800f7f0 <forward_dense+0x190>
 800f9e8:	4643      	mov	r3, r8
 800f9ea:	4629      	mov	r1, r5
 800f9ec:	463a      	mov	r2, r7
 800f9ee:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800fa64 <forward_dense+0x404>
 800f9f2:	e770      	b.n	800f8d6 <forward_dense+0x276>
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	deff      	udf	#255	; 0xff
 800f9fa:	685b      	ldr	r3, [r3, #4]
 800f9fc:	deff      	udf	#255	; 0xff
 800f9fe:	2300      	movs	r3, #0
 800fa00:	685b      	ldr	r3, [r3, #4]
 800fa02:	deff      	udf	#255	; 0xff
 800fa04:	b1a4      	cbz	r4, 800fa30 <forward_dense+0x3d0>
 800fa06:	f8d4 c000 	ldr.w	ip, [r4]
 800fa0a:	463b      	mov	r3, r7
 800fa0c:	4629      	mov	r1, r5
 800fa0e:	9600      	str	r6, [sp, #0]
 800fa10:	4652      	mov	r2, sl
 800fa12:	9803      	ldr	r0, [sp, #12]
 800fa14:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800fa18:	f7ff fd64 	bl	800f4e4 <ai_dict4_dot_array_f32>
 800fa1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa1e:	3404      	adds	r4, #4
 800fa20:	444d      	add	r5, r9
 800fa22:	f84b 3b04 	str.w	r3, [fp], #4
 800fa26:	45c3      	cmp	fp, r8
 800fa28:	f4bf aead 	bcs.w	800f786 <forward_dense+0x126>
 800fa2c:	2c00      	cmp	r4, #0
 800fa2e:	d1ea      	bne.n	800fa06 <forward_dense+0x3a6>
 800fa30:	4634      	mov	r4, r6
 800fa32:	4646      	mov	r6, r8
 800fa34:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800fa38:	463b      	mov	r3, r7
 800fa3a:	4629      	mov	r1, r5
 800fa3c:	9400      	str	r4, [sp, #0]
 800fa3e:	4652      	mov	r2, sl
 800fa40:	4640      	mov	r0, r8
 800fa42:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800fa46:	f7ff fd4d 	bl	800f4e4 <ai_dict4_dot_array_f32>
 800fa4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa4c:	444d      	add	r5, r9
 800fa4e:	f84b 3b04 	str.w	r3, [fp], #4
 800fa52:	45b3      	cmp	fp, r6
 800fa54:	d3f0      	bcc.n	800fa38 <forward_dense+0x3d8>
 800fa56:	46a0      	mov	r8, r4
 800fa58:	e698      	b.n	800f78c <forward_dense+0x12c>
 800fa5a:	9006      	str	r0, [sp, #24]
 800fa5c:	e62a      	b.n	800f6b4 <forward_dense+0x54>
 800fa5e:	9306      	str	r3, [sp, #24]
 800fa60:	e628      	b.n	800f6b4 <forward_dense+0x54>
 800fa62:	bf00      	nop
 800fa64:	00000000 	.word	0x00000000
 800fa68:	4634      	mov	r4, r6
 800fa6a:	4646      	mov	r6, r8
 800fa6c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800fa70:	463b      	mov	r3, r7
 800fa72:	4629      	mov	r1, r5
 800fa74:	9400      	str	r4, [sp, #0]
 800fa76:	4652      	mov	r2, sl
 800fa78:	4640      	mov	r0, r8
 800fa7a:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800fa7e:	f7ff fb01 	bl	800f084 <ai_dict8_dot_array_f32>
 800fa82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa84:	444d      	add	r5, r9
 800fa86:	f84b 3b04 	str.w	r3, [fp], #4
 800fa8a:	45b3      	cmp	fp, r6
 800fa8c:	d3f0      	bcc.n	800fa70 <forward_dense+0x410>
 800fa8e:	46a0      	mov	r8, r4
 800fa90:	e67c      	b.n	800f78c <forward_dense+0x12c>
 800fa92:	b011      	add	sp, #68	; 0x44
 800fa94:	ecbd 8b08 	vpop	{d8-d11}
 800fa98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa9c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800faa0:	e626      	b.n	800f6f0 <forward_dense+0x90>
 800faa2:	2300      	movs	r3, #0
 800faa4:	9306      	str	r3, [sp, #24]
 800faa6:	e605      	b.n	800f6b4 <forward_dense+0x54>
 800faa8:	9308      	str	r3, [sp, #32]
 800faaa:	e5f6      	b.n	800f69a <forward_dense+0x3a>

0800faac <nl_func_relu_generic_array_f32>:
 800faac:	b470      	push	{r4, r5, r6}
 800faae:	edd3 6a02 	vldr	s13, [r3, #8]
 800fab2:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800fab6:	6880      	ldr	r0, [r0, #8]
 800fab8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800fabc:	4414      	add	r4, r2
 800fabe:	688d      	ldr	r5, [r1, #8]
 800fac0:	00a4      	lsls	r4, r4, #2
 800fac2:	ed93 7a00 	vldr	s14, [r3]
 800fac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faca:	ed93 6a01 	vldr	s12, [r3, #4]
 800face:	eb00 0204 	add.w	r2, r0, r4
 800fad2:	442c      	add	r4, r5
 800fad4:	d420      	bmi.n	800fb18 <nl_func_relu_generic_array_f32+0x6c>
 800fad6:	42ac      	cmp	r4, r5
 800fad8:	d33b      	bcc.n	800fb52 <nl_func_relu_generic_array_f32+0xa6>
 800fada:	1d23      	adds	r3, r4, #4
 800fadc:	3204      	adds	r2, #4
 800fade:	e010      	b.n	800fb02 <nl_func_relu_generic_array_f32+0x56>
 800fae0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fae4:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800fae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faec:	dd01      	ble.n	800faf2 <nl_func_relu_generic_array_f32+0x46>
 800faee:	ee65 7a86 	vmul.f32	s15, s11, s12
 800faf2:	f1a3 0408 	sub.w	r4, r3, #8
 800faf6:	ed62 7a01 	vstmdb	r2!, {s15}
 800fafa:	4603      	mov	r3, r0
 800fafc:	6888      	ldr	r0, [r1, #8]
 800fafe:	4284      	cmp	r4, r0
 800fb00:	d327      	bcc.n	800fb52 <nl_func_relu_generic_array_f32+0xa6>
 800fb02:	ed53 7a01 	vldr	s15, [r3, #-4]
 800fb06:	1f18      	subs	r0, r3, #4
 800fb08:	eef4 6ae7 	vcmpe.f32	s13, s15
 800fb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb10:	dce6      	bgt.n	800fae0 <nl_func_relu_generic_array_f32+0x34>
 800fb12:	eef0 7a66 	vmov.f32	s15, s13
 800fb16:	e7ec      	b.n	800faf2 <nl_func_relu_generic_array_f32+0x46>
 800fb18:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800fb1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb20:	d019      	beq.n	800fb56 <nl_func_relu_generic_array_f32+0xaa>
 800fb22:	42ac      	cmp	r4, r5
 800fb24:	d315      	bcc.n	800fb52 <nl_func_relu_generic_array_f32+0xa6>
 800fb26:	1d23      	adds	r3, r4, #4
 800fb28:	3204      	adds	r2, #4
 800fb2a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800fb2e:	1f18      	subs	r0, r3, #4
 800fb30:	f1a3 0508 	sub.w	r5, r3, #8
 800fb34:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fb38:	4603      	mov	r3, r0
 800fb3a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800fb3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb42:	ee66 6a86 	vmul.f32	s13, s13, s12
 800fb46:	d51c      	bpl.n	800fb82 <nl_func_relu_generic_array_f32+0xd6>
 800fb48:	ed62 6a01 	vstmdb	r2!, {s13}
 800fb4c:	6888      	ldr	r0, [r1, #8]
 800fb4e:	42a8      	cmp	r0, r5
 800fb50:	d9eb      	bls.n	800fb2a <nl_func_relu_generic_array_f32+0x7e>
 800fb52:	bc70      	pop	{r4, r5, r6}
 800fb54:	4770      	bx	lr
 800fb56:	42ac      	cmp	r4, r5
 800fb58:	d3fb      	bcc.n	800fb52 <nl_func_relu_generic_array_f32+0xa6>
 800fb5a:	1d23      	adds	r3, r4, #4
 800fb5c:	3204      	adds	r2, #4
 800fb5e:	2600      	movs	r6, #0
 800fb60:	ed53 7a01 	vldr	s15, [r3, #-4]
 800fb64:	1f18      	subs	r0, r3, #4
 800fb66:	f1a3 0508 	sub.w	r5, r3, #8
 800fb6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fb6e:	4603      	mov	r3, r0
 800fb70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb74:	d80b      	bhi.n	800fb8e <nl_func_relu_generic_array_f32+0xe2>
 800fb76:	ed62 7a01 	vstmdb	r2!, {s15}
 800fb7a:	6888      	ldr	r0, [r1, #8]
 800fb7c:	42a8      	cmp	r0, r5
 800fb7e:	d9ef      	bls.n	800fb60 <nl_func_relu_generic_array_f32+0xb4>
 800fb80:	e7e7      	b.n	800fb52 <nl_func_relu_generic_array_f32+0xa6>
 800fb82:	ed62 7a01 	vstmdb	r2!, {s15}
 800fb86:	6888      	ldr	r0, [r1, #8]
 800fb88:	42a8      	cmp	r0, r5
 800fb8a:	d9ce      	bls.n	800fb2a <nl_func_relu_generic_array_f32+0x7e>
 800fb8c:	e7e1      	b.n	800fb52 <nl_func_relu_generic_array_f32+0xa6>
 800fb8e:	f842 6d04 	str.w	r6, [r2, #-4]!
 800fb92:	6888      	ldr	r0, [r1, #8]
 800fb94:	42a8      	cmp	r0, r5
 800fb96:	d9e3      	bls.n	800fb60 <nl_func_relu_generic_array_f32+0xb4>
 800fb98:	e7db      	b.n	800fb52 <nl_func_relu_generic_array_f32+0xa6>
 800fb9a:	bf00      	nop

0800fb9c <forward_relu>:
 800fb9c:	6942      	ldr	r2, [r0, #20]
 800fb9e:	8813      	ldrh	r3, [r2, #0]
 800fba0:	b33b      	cbz	r3, 800fbf2 <forward_relu+0x56>
 800fba2:	b4f0      	push	{r4, r5, r6, r7}
 800fba4:	6852      	ldr	r2, [r2, #4]
 800fba6:	6855      	ldr	r5, [r2, #4]
 800fba8:	b105      	cbz	r5, 800fbac <forward_relu+0x10>
 800fbaa:	682d      	ldr	r5, [r5, #0]
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d91d      	bls.n	800fbec <forward_relu+0x50>
 800fbb0:	6913      	ldr	r3, [r2, #16]
 800fbb2:	b103      	cbz	r3, 800fbb6 <forward_relu+0x1a>
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	6982      	ldr	r2, [r0, #24]
 800fbb8:	68ac      	ldr	r4, [r5, #8]
 800fbba:	6998      	ldr	r0, [r3, #24]
 800fbbc:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800fbc0:	69a9      	ldr	r1, [r5, #24]
 800fbc2:	2a00      	cmp	r2, #0
 800fbc4:	d040      	beq.n	800fc48 <forward_relu+0xac>
 800fbc6:	e9d2 6301 	ldrd	r6, r3, [r2, #4]
 800fbca:	2e01      	cmp	r6, #1
 800fbcc:	d013      	beq.n	800fbf6 <forward_relu+0x5a>
 800fbce:	2c00      	cmp	r4, #0
 800fbd0:	d068      	beq.n	800fca4 <forward_relu+0x108>
 800fbd2:	68ee      	ldr	r6, [r5, #12]
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800fbda:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fbde:	42a6      	cmp	r6, r4
 800fbe0:	fb05 f202 	mul.w	r2, r5, r2
 800fbe4:	d1f9      	bne.n	800fbda <forward_relu+0x3e>
 800fbe6:	bcf0      	pop	{r4, r5, r6, r7}
 800fbe8:	f7ff bf60 	b.w	800faac <nl_func_relu_generic_array_f32>
 800fbec:	2300      	movs	r3, #0
 800fbee:	685b      	ldr	r3, [r3, #4]
 800fbf0:	deff      	udf	#255	; 0xff
 800fbf2:	685b      	ldr	r3, [r3, #4]
 800fbf4:	deff      	udf	#255	; 0xff
 800fbf6:	6887      	ldr	r7, [r0, #8]
 800fbf8:	688a      	ldr	r2, [r1, #8]
 800fbfa:	ed93 7a00 	vldr	s14, [r3]
 800fbfe:	b184      	cbz	r4, 800fc22 <forward_relu+0x86>
 800fc00:	68ed      	ldr	r5, [r5, #12]
 800fc02:	4630      	mov	r0, r6
 800fc04:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800fc08:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800fc0c:	42a5      	cmp	r5, r4
 800fc0e:	fb03 f000 	mul.w	r0, r3, r0
 800fc12:	d1f9      	bne.n	800fc08 <forward_relu+0x6c>
 800fc14:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fc18:	4403      	add	r3, r0
 800fc1a:	009b      	lsls	r3, r3, #2
 800fc1c:	18d2      	adds	r2, r2, r3
 800fc1e:	441f      	add	r7, r3
 800fc20:	d236      	bcs.n	800fc90 <forward_relu+0xf4>
 800fc22:	1d13      	adds	r3, r2, #4
 800fc24:	2500      	movs	r5, #0
 800fc26:	1d3a      	adds	r2, r7, #4
 800fc28:	ed53 7a01 	vldr	s15, [r3, #-4]
 800fc2c:	1f18      	subs	r0, r3, #4
 800fc2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fc32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc36:	d82d      	bhi.n	800fc94 <forward_relu+0xf8>
 800fc38:	ed62 7a01 	vstmdb	r2!, {s15}
 800fc3c:	3b08      	subs	r3, #8
 800fc3e:	688c      	ldr	r4, [r1, #8]
 800fc40:	429c      	cmp	r4, r3
 800fc42:	d825      	bhi.n	800fc90 <forward_relu+0xf4>
 800fc44:	4603      	mov	r3, r0
 800fc46:	e7ef      	b.n	800fc28 <forward_relu+0x8c>
 800fc48:	6880      	ldr	r0, [r0, #8]
 800fc4a:	688b      	ldr	r3, [r1, #8]
 800fc4c:	b184      	cbz	r4, 800fc70 <forward_relu+0xd4>
 800fc4e:	68ee      	ldr	r6, [r5, #12]
 800fc50:	2201      	movs	r2, #1
 800fc52:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800fc56:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fc5a:	42a6      	cmp	r6, r4
 800fc5c:	fb05 f202 	mul.w	r2, r5, r2
 800fc60:	d1f9      	bne.n	800fc56 <forward_relu+0xba>
 800fc62:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800fc66:	4414      	add	r4, r2
 800fc68:	00a2      	lsls	r2, r4, #2
 800fc6a:	189b      	adds	r3, r3, r2
 800fc6c:	4410      	add	r0, r2
 800fc6e:	d20f      	bcs.n	800fc90 <forward_relu+0xf4>
 800fc70:	3304      	adds	r3, #4
 800fc72:	3004      	adds	r0, #4
 800fc74:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800fca8 <forward_relu+0x10c>
 800fc78:	ed53 7a01 	vldr	s15, [r3, #-4]
 800fc7c:	f1a3 0208 	sub.w	r2, r3, #8
 800fc80:	3b04      	subs	r3, #4
 800fc82:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800fc86:	ed60 7a01 	vstmdb	r0!, {s15}
 800fc8a:	688c      	ldr	r4, [r1, #8]
 800fc8c:	4294      	cmp	r4, r2
 800fc8e:	d9f3      	bls.n	800fc78 <forward_relu+0xdc>
 800fc90:	bcf0      	pop	{r4, r5, r6, r7}
 800fc92:	4770      	bx	lr
 800fc94:	f842 5d04 	str.w	r5, [r2, #-4]!
 800fc98:	3b08      	subs	r3, #8
 800fc9a:	688c      	ldr	r4, [r1, #8]
 800fc9c:	429c      	cmp	r4, r3
 800fc9e:	d8f7      	bhi.n	800fc90 <forward_relu+0xf4>
 800fca0:	4603      	mov	r3, r0
 800fca2:	e7c1      	b.n	800fc28 <forward_relu+0x8c>
 800fca4:	2201      	movs	r2, #1
 800fca6:	e79e      	b.n	800fbe6 <forward_relu+0x4a>
 800fca8:	00000000 	.word	0x00000000

0800fcac <ai_check_custom_types>:
 800fcac:	4b13      	ldr	r3, [pc, #76]	; (800fcfc <ai_check_custom_types+0x50>)
 800fcae:	b082      	sub	sp, #8
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	9301      	str	r3, [sp, #4]
 800fcb4:	b118      	cbz	r0, 800fcbe <ai_check_custom_types+0x12>
 800fcb6:	7803      	ldrb	r3, [r0, #0]
 800fcb8:	2b03      	cmp	r3, #3
 800fcba:	d002      	beq.n	800fcc2 <ai_check_custom_types+0x16>
 800fcbc:	2000      	movs	r0, #0
 800fcbe:	b002      	add	sp, #8
 800fcc0:	4770      	bx	lr
 800fcc2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fcc6:	4293      	cmp	r3, r2
 800fcc8:	d004      	beq.n	800fcd4 <ai_check_custom_types+0x28>
 800fcca:	2001      	movs	r0, #1
 800fccc:	f080 0001 	eor.w	r0, r0, #1
 800fcd0:	b002      	add	sp, #8
 800fcd2:	4770      	bx	lr
 800fcd4:	7842      	ldrb	r2, [r0, #1]
 800fcd6:	3001      	adds	r0, #1
 800fcd8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d1f4      	bne.n	800fcca <ai_check_custom_types+0x1e>
 800fce0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800fce4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d1ee      	bne.n	800fcca <ai_check_custom_types+0x1e>
 800fcec:	7842      	ldrb	r2, [r0, #1]
 800fcee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	d1e9      	bne.n	800fcca <ai_check_custom_types+0x1e>
 800fcf6:	2000      	movs	r0, #0
 800fcf8:	e7e8      	b.n	800fccc <ai_check_custom_types+0x20>
 800fcfa:	bf00      	nop
 800fcfc:	08013db8 	.word	0x08013db8

0800fd00 <ai_layers_forward_all>:
 800fd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd02:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800fd04:	4604      	mov	r4, r0
 800fd06:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800fd08:	b316      	cbz	r6, 800fd50 <ai_layers_forward_all+0x50>
 800fd0a:	b1c5      	cbz	r5, 800fd3e <ai_layers_forward_all+0x3e>
 800fd0c:	6545      	str	r5, [r0, #84]	; 0x54
 800fd0e:	4629      	mov	r1, r5
 800fd10:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800fd12:	2001      	movs	r0, #1
 800fd14:	47b0      	blx	r6
 800fd16:	2700      	movs	r7, #0
 800fd18:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800fd1a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800fd1c:	2002      	movs	r0, #2
 800fd1e:	47b0      	blx	r6
 800fd20:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800fd22:	692b      	ldr	r3, [r5, #16]
 800fd24:	4628      	mov	r0, r5
 800fd26:	4798      	blx	r3
 800fd28:	68eb      	ldr	r3, [r5, #12]
 800fd2a:	2003      	movs	r0, #3
 800fd2c:	429d      	cmp	r5, r3
 800fd2e:	4619      	mov	r1, r3
 800fd30:	d006      	beq.n	800fd40 <ai_layers_forward_all+0x40>
 800fd32:	6563      	str	r3, [r4, #84]	; 0x54
 800fd34:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800fd36:	47b0      	blx	r6
 800fd38:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800fd3a:	2900      	cmp	r1, #0
 800fd3c:	d1ed      	bne.n	800fd1a <ai_layers_forward_all+0x1a>
 800fd3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd40:	2100      	movs	r1, #0
 800fd42:	6567      	str	r7, [r4, #84]	; 0x54
 800fd44:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800fd46:	47b0      	blx	r6
 800fd48:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800fd4a:	2900      	cmp	r1, #0
 800fd4c:	d1e5      	bne.n	800fd1a <ai_layers_forward_all+0x1a>
 800fd4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd50:	2d00      	cmp	r5, #0
 800fd52:	d0f4      	beq.n	800fd3e <ai_layers_forward_all+0x3e>
 800fd54:	6545      	str	r5, [r0, #84]	; 0x54
 800fd56:	692b      	ldr	r3, [r5, #16]
 800fd58:	4628      	mov	r0, r5
 800fd5a:	4798      	blx	r3
 800fd5c:	68eb      	ldr	r3, [r5, #12]
 800fd5e:	42ab      	cmp	r3, r5
 800fd60:	461d      	mov	r5, r3
 800fd62:	d003      	beq.n	800fd6c <ai_layers_forward_all+0x6c>
 800fd64:	6563      	str	r3, [r4, #84]	; 0x54
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d1f5      	bne.n	800fd56 <ai_layers_forward_all+0x56>
 800fd6a:	e7e8      	b.n	800fd3e <ai_layers_forward_all+0x3e>
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	6563      	str	r3, [r4, #84]	; 0x54
 800fd70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd72:	bf00      	nop

0800fd74 <ai_array_to_buffer_fmt>:
 800fd74:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800fd78:	2b02      	cmp	r3, #2
 800fd7a:	d01f      	beq.n	800fdbc <ai_array_to_buffer_fmt+0x48>
 800fd7c:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800fd80:	4a1b      	ldr	r2, [pc, #108]	; (800fdf0 <ai_array_to_buffer_fmt+0x7c>)
 800fd82:	4293      	cmp	r3, r2
 800fd84:	d00a      	beq.n	800fd9c <ai_array_to_buffer_fmt+0x28>
 800fd86:	dc0d      	bgt.n	800fda4 <ai_array_to_buffer_fmt+0x30>
 800fd88:	4a1a      	ldr	r2, [pc, #104]	; (800fdf4 <ai_array_to_buffer_fmt+0x80>)
 800fd8a:	4293      	cmp	r3, r2
 800fd8c:	d006      	beq.n	800fd9c <ai_array_to_buffer_fmt+0x28>
 800fd8e:	dd1d      	ble.n	800fdcc <ai_array_to_buffer_fmt+0x58>
 800fd90:	4a19      	ldr	r2, [pc, #100]	; (800fdf8 <ai_array_to_buffer_fmt+0x84>)
 800fd92:	4293      	cmp	r3, r2
 800fd94:	d002      	beq.n	800fd9c <ai_array_to_buffer_fmt+0x28>
 800fd96:	320f      	adds	r2, #15
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d10d      	bne.n	800fdb8 <ai_array_to_buffer_fmt+0x44>
 800fd9c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800fda0:	4318      	orrs	r0, r3
 800fda2:	4770      	bx	lr
 800fda4:	4a15      	ldr	r2, [pc, #84]	; (800fdfc <ai_array_to_buffer_fmt+0x88>)
 800fda6:	4293      	cmp	r3, r2
 800fda8:	d0f8      	beq.n	800fd9c <ai_array_to_buffer_fmt+0x28>
 800fdaa:	dd18      	ble.n	800fdde <ai_array_to_buffer_fmt+0x6a>
 800fdac:	4a14      	ldr	r2, [pc, #80]	; (800fe00 <ai_array_to_buffer_fmt+0x8c>)
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	d0f4      	beq.n	800fd9c <ai_array_to_buffer_fmt+0x28>
 800fdb2:	4a14      	ldr	r2, [pc, #80]	; (800fe04 <ai_array_to_buffer_fmt+0x90>)
 800fdb4:	4293      	cmp	r3, r2
 800fdb6:	d0f1      	beq.n	800fd9c <ai_array_to_buffer_fmt+0x28>
 800fdb8:	2340      	movs	r3, #64	; 0x40
 800fdba:	e7ef      	b.n	800fd9c <ai_array_to_buffer_fmt+0x28>
 800fdbc:	4b12      	ldr	r3, [pc, #72]	; (800fe08 <ai_array_to_buffer_fmt+0x94>)
 800fdbe:	4003      	ands	r3, r0
 800fdc0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800fdc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fdc8:	4318      	orrs	r0, r3
 800fdca:	4770      	bx	lr
 800fdcc:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800fdd0:	4293      	cmp	r3, r2
 800fdd2:	d0e3      	beq.n	800fd9c <ai_array_to_buffer_fmt+0x28>
 800fdd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fdd8:	4293      	cmp	r3, r2
 800fdda:	d0df      	beq.n	800fd9c <ai_array_to_buffer_fmt+0x28>
 800fddc:	e7ec      	b.n	800fdb8 <ai_array_to_buffer_fmt+0x44>
 800fdde:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800fde2:	4293      	cmp	r3, r2
 800fde4:	d0da      	beq.n	800fd9c <ai_array_to_buffer_fmt+0x28>
 800fde6:	3207      	adds	r2, #7
 800fde8:	4293      	cmp	r3, r2
 800fdea:	d0d7      	beq.n	800fd9c <ai_array_to_buffer_fmt+0x28>
 800fdec:	e7e4      	b.n	800fdb8 <ai_array_to_buffer_fmt+0x44>
 800fdee:	bf00      	nop
 800fdf0:	00840040 	.word	0x00840040
 800fdf4:	00040447 	.word	0x00040447
 800fdf8:	00040840 	.word	0x00040840
 800fdfc:	00840840 	.word	0x00840840
 800fe00:	0084084f 	.word	0x0084084f
 800fe04:	01821040 	.word	0x01821040
 800fe08:	00803fff 	.word	0x00803fff

0800fe0c <ai_array_get_byte_size>:
 800fe0c:	b1e1      	cbz	r1, 800fe48 <ai_array_get_byte_size+0x3c>
 800fe0e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800fe12:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800fe16:	b410      	push	{r4}
 800fe18:	f3c0 3482 	ubfx	r4, r0, #14, #3
 800fe1c:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800fe20:	4423      	add	r3, r4
 800fe22:	2804      	cmp	r0, #4
 800fe24:	fb01 f103 	mul.w	r1, r1, r3
 800fe28:	f101 0107 	add.w	r1, r1, #7
 800fe2c:	f021 0107 	bic.w	r1, r1, #7
 800fe30:	fa21 f102 	lsr.w	r1, r1, r2
 800fe34:	d00a      	beq.n	800fe4c <ai_array_get_byte_size+0x40>
 800fe36:	2808      	cmp	r0, #8
 800fe38:	d101      	bne.n	800fe3e <ai_array_get_byte_size+0x32>
 800fe3a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800fe3e:	3107      	adds	r1, #7
 800fe40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe44:	08c8      	lsrs	r0, r1, #3
 800fe46:	4770      	bx	lr
 800fe48:	4608      	mov	r0, r1
 800fe4a:	4770      	bx	lr
 800fe4c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800fe50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe54:	3107      	adds	r1, #7
 800fe56:	08c8      	lsrs	r0, r1, #3
 800fe58:	4770      	bx	lr
 800fe5a:	bf00      	nop

0800fe5c <atof>:
 800fe5c:	2100      	movs	r1, #0
 800fe5e:	f001 bb5f 	b.w	8011520 <strtod>
	...

0800fe64 <__errno>:
 800fe64:	4b01      	ldr	r3, [pc, #4]	; (800fe6c <__errno+0x8>)
 800fe66:	6818      	ldr	r0, [r3, #0]
 800fe68:	4770      	bx	lr
 800fe6a:	bf00      	nop
 800fe6c:	24000608 	.word	0x24000608

0800fe70 <__libc_init_array>:
 800fe70:	b570      	push	{r4, r5, r6, lr}
 800fe72:	4e0d      	ldr	r6, [pc, #52]	; (800fea8 <__libc_init_array+0x38>)
 800fe74:	4c0d      	ldr	r4, [pc, #52]	; (800feac <__libc_init_array+0x3c>)
 800fe76:	1ba4      	subs	r4, r4, r6
 800fe78:	10a4      	asrs	r4, r4, #2
 800fe7a:	2500      	movs	r5, #0
 800fe7c:	42a5      	cmp	r5, r4
 800fe7e:	d109      	bne.n	800fe94 <__libc_init_array+0x24>
 800fe80:	4e0b      	ldr	r6, [pc, #44]	; (800feb0 <__libc_init_array+0x40>)
 800fe82:	4c0c      	ldr	r4, [pc, #48]	; (800feb4 <__libc_init_array+0x44>)
 800fe84:	f003 fed4 	bl	8013c30 <_init>
 800fe88:	1ba4      	subs	r4, r4, r6
 800fe8a:	10a4      	asrs	r4, r4, #2
 800fe8c:	2500      	movs	r5, #0
 800fe8e:	42a5      	cmp	r5, r4
 800fe90:	d105      	bne.n	800fe9e <__libc_init_array+0x2e>
 800fe92:	bd70      	pop	{r4, r5, r6, pc}
 800fe94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fe98:	4798      	blx	r3
 800fe9a:	3501      	adds	r5, #1
 800fe9c:	e7ee      	b.n	800fe7c <__libc_init_array+0xc>
 800fe9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fea2:	4798      	blx	r3
 800fea4:	3501      	adds	r5, #1
 800fea6:	e7f2      	b.n	800fe8e <__libc_init_array+0x1e>
 800fea8:	080146c8 	.word	0x080146c8
 800feac:	080146c8 	.word	0x080146c8
 800feb0:	080146c8 	.word	0x080146c8
 800feb4:	080146cc 	.word	0x080146cc

0800feb8 <malloc>:
 800feb8:	4b02      	ldr	r3, [pc, #8]	; (800fec4 <malloc+0xc>)
 800feba:	4601      	mov	r1, r0
 800febc:	6818      	ldr	r0, [r3, #0]
 800febe:	f000 b86d 	b.w	800ff9c <_malloc_r>
 800fec2:	bf00      	nop
 800fec4:	24000608 	.word	0x24000608

0800fec8 <free>:
 800fec8:	4b02      	ldr	r3, [pc, #8]	; (800fed4 <free+0xc>)
 800feca:	4601      	mov	r1, r0
 800fecc:	6818      	ldr	r0, [r3, #0]
 800fece:	f000 b817 	b.w	800ff00 <_free_r>
 800fed2:	bf00      	nop
 800fed4:	24000608 	.word	0x24000608

0800fed8 <memcpy>:
 800fed8:	b510      	push	{r4, lr}
 800feda:	1e43      	subs	r3, r0, #1
 800fedc:	440a      	add	r2, r1
 800fede:	4291      	cmp	r1, r2
 800fee0:	d100      	bne.n	800fee4 <memcpy+0xc>
 800fee2:	bd10      	pop	{r4, pc}
 800fee4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fee8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800feec:	e7f7      	b.n	800fede <memcpy+0x6>

0800feee <memset>:
 800feee:	4402      	add	r2, r0
 800fef0:	4603      	mov	r3, r0
 800fef2:	4293      	cmp	r3, r2
 800fef4:	d100      	bne.n	800fef8 <memset+0xa>
 800fef6:	4770      	bx	lr
 800fef8:	f803 1b01 	strb.w	r1, [r3], #1
 800fefc:	e7f9      	b.n	800fef2 <memset+0x4>
	...

0800ff00 <_free_r>:
 800ff00:	b538      	push	{r3, r4, r5, lr}
 800ff02:	4605      	mov	r5, r0
 800ff04:	2900      	cmp	r1, #0
 800ff06:	d045      	beq.n	800ff94 <_free_r+0x94>
 800ff08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff0c:	1f0c      	subs	r4, r1, #4
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	bfb8      	it	lt
 800ff12:	18e4      	addlt	r4, r4, r3
 800ff14:	f002 fd02 	bl	801291c <__malloc_lock>
 800ff18:	4a1f      	ldr	r2, [pc, #124]	; (800ff98 <_free_r+0x98>)
 800ff1a:	6813      	ldr	r3, [r2, #0]
 800ff1c:	4610      	mov	r0, r2
 800ff1e:	b933      	cbnz	r3, 800ff2e <_free_r+0x2e>
 800ff20:	6063      	str	r3, [r4, #4]
 800ff22:	6014      	str	r4, [r2, #0]
 800ff24:	4628      	mov	r0, r5
 800ff26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff2a:	f002 bcf8 	b.w	801291e <__malloc_unlock>
 800ff2e:	42a3      	cmp	r3, r4
 800ff30:	d90c      	bls.n	800ff4c <_free_r+0x4c>
 800ff32:	6821      	ldr	r1, [r4, #0]
 800ff34:	1862      	adds	r2, r4, r1
 800ff36:	4293      	cmp	r3, r2
 800ff38:	bf04      	itt	eq
 800ff3a:	681a      	ldreq	r2, [r3, #0]
 800ff3c:	685b      	ldreq	r3, [r3, #4]
 800ff3e:	6063      	str	r3, [r4, #4]
 800ff40:	bf04      	itt	eq
 800ff42:	1852      	addeq	r2, r2, r1
 800ff44:	6022      	streq	r2, [r4, #0]
 800ff46:	6004      	str	r4, [r0, #0]
 800ff48:	e7ec      	b.n	800ff24 <_free_r+0x24>
 800ff4a:	4613      	mov	r3, r2
 800ff4c:	685a      	ldr	r2, [r3, #4]
 800ff4e:	b10a      	cbz	r2, 800ff54 <_free_r+0x54>
 800ff50:	42a2      	cmp	r2, r4
 800ff52:	d9fa      	bls.n	800ff4a <_free_r+0x4a>
 800ff54:	6819      	ldr	r1, [r3, #0]
 800ff56:	1858      	adds	r0, r3, r1
 800ff58:	42a0      	cmp	r0, r4
 800ff5a:	d10b      	bne.n	800ff74 <_free_r+0x74>
 800ff5c:	6820      	ldr	r0, [r4, #0]
 800ff5e:	4401      	add	r1, r0
 800ff60:	1858      	adds	r0, r3, r1
 800ff62:	4282      	cmp	r2, r0
 800ff64:	6019      	str	r1, [r3, #0]
 800ff66:	d1dd      	bne.n	800ff24 <_free_r+0x24>
 800ff68:	6810      	ldr	r0, [r2, #0]
 800ff6a:	6852      	ldr	r2, [r2, #4]
 800ff6c:	605a      	str	r2, [r3, #4]
 800ff6e:	4401      	add	r1, r0
 800ff70:	6019      	str	r1, [r3, #0]
 800ff72:	e7d7      	b.n	800ff24 <_free_r+0x24>
 800ff74:	d902      	bls.n	800ff7c <_free_r+0x7c>
 800ff76:	230c      	movs	r3, #12
 800ff78:	602b      	str	r3, [r5, #0]
 800ff7a:	e7d3      	b.n	800ff24 <_free_r+0x24>
 800ff7c:	6820      	ldr	r0, [r4, #0]
 800ff7e:	1821      	adds	r1, r4, r0
 800ff80:	428a      	cmp	r2, r1
 800ff82:	bf04      	itt	eq
 800ff84:	6811      	ldreq	r1, [r2, #0]
 800ff86:	6852      	ldreq	r2, [r2, #4]
 800ff88:	6062      	str	r2, [r4, #4]
 800ff8a:	bf04      	itt	eq
 800ff8c:	1809      	addeq	r1, r1, r0
 800ff8e:	6021      	streq	r1, [r4, #0]
 800ff90:	605c      	str	r4, [r3, #4]
 800ff92:	e7c7      	b.n	800ff24 <_free_r+0x24>
 800ff94:	bd38      	pop	{r3, r4, r5, pc}
 800ff96:	bf00      	nop
 800ff98:	24000974 	.word	0x24000974

0800ff9c <_malloc_r>:
 800ff9c:	b570      	push	{r4, r5, r6, lr}
 800ff9e:	1ccd      	adds	r5, r1, #3
 800ffa0:	f025 0503 	bic.w	r5, r5, #3
 800ffa4:	3508      	adds	r5, #8
 800ffa6:	2d0c      	cmp	r5, #12
 800ffa8:	bf38      	it	cc
 800ffaa:	250c      	movcc	r5, #12
 800ffac:	2d00      	cmp	r5, #0
 800ffae:	4606      	mov	r6, r0
 800ffb0:	db01      	blt.n	800ffb6 <_malloc_r+0x1a>
 800ffb2:	42a9      	cmp	r1, r5
 800ffb4:	d903      	bls.n	800ffbe <_malloc_r+0x22>
 800ffb6:	230c      	movs	r3, #12
 800ffb8:	6033      	str	r3, [r6, #0]
 800ffba:	2000      	movs	r0, #0
 800ffbc:	bd70      	pop	{r4, r5, r6, pc}
 800ffbe:	f002 fcad 	bl	801291c <__malloc_lock>
 800ffc2:	4a21      	ldr	r2, [pc, #132]	; (8010048 <_malloc_r+0xac>)
 800ffc4:	6814      	ldr	r4, [r2, #0]
 800ffc6:	4621      	mov	r1, r4
 800ffc8:	b991      	cbnz	r1, 800fff0 <_malloc_r+0x54>
 800ffca:	4c20      	ldr	r4, [pc, #128]	; (801004c <_malloc_r+0xb0>)
 800ffcc:	6823      	ldr	r3, [r4, #0]
 800ffce:	b91b      	cbnz	r3, 800ffd8 <_malloc_r+0x3c>
 800ffd0:	4630      	mov	r0, r6
 800ffd2:	f000 fc91 	bl	80108f8 <_sbrk_r>
 800ffd6:	6020      	str	r0, [r4, #0]
 800ffd8:	4629      	mov	r1, r5
 800ffda:	4630      	mov	r0, r6
 800ffdc:	f000 fc8c 	bl	80108f8 <_sbrk_r>
 800ffe0:	1c43      	adds	r3, r0, #1
 800ffe2:	d124      	bne.n	801002e <_malloc_r+0x92>
 800ffe4:	230c      	movs	r3, #12
 800ffe6:	6033      	str	r3, [r6, #0]
 800ffe8:	4630      	mov	r0, r6
 800ffea:	f002 fc98 	bl	801291e <__malloc_unlock>
 800ffee:	e7e4      	b.n	800ffba <_malloc_r+0x1e>
 800fff0:	680b      	ldr	r3, [r1, #0]
 800fff2:	1b5b      	subs	r3, r3, r5
 800fff4:	d418      	bmi.n	8010028 <_malloc_r+0x8c>
 800fff6:	2b0b      	cmp	r3, #11
 800fff8:	d90f      	bls.n	801001a <_malloc_r+0x7e>
 800fffa:	600b      	str	r3, [r1, #0]
 800fffc:	50cd      	str	r5, [r1, r3]
 800fffe:	18cc      	adds	r4, r1, r3
 8010000:	4630      	mov	r0, r6
 8010002:	f002 fc8c 	bl	801291e <__malloc_unlock>
 8010006:	f104 000b 	add.w	r0, r4, #11
 801000a:	1d23      	adds	r3, r4, #4
 801000c:	f020 0007 	bic.w	r0, r0, #7
 8010010:	1ac3      	subs	r3, r0, r3
 8010012:	d0d3      	beq.n	800ffbc <_malloc_r+0x20>
 8010014:	425a      	negs	r2, r3
 8010016:	50e2      	str	r2, [r4, r3]
 8010018:	e7d0      	b.n	800ffbc <_malloc_r+0x20>
 801001a:	428c      	cmp	r4, r1
 801001c:	684b      	ldr	r3, [r1, #4]
 801001e:	bf16      	itet	ne
 8010020:	6063      	strne	r3, [r4, #4]
 8010022:	6013      	streq	r3, [r2, #0]
 8010024:	460c      	movne	r4, r1
 8010026:	e7eb      	b.n	8010000 <_malloc_r+0x64>
 8010028:	460c      	mov	r4, r1
 801002a:	6849      	ldr	r1, [r1, #4]
 801002c:	e7cc      	b.n	800ffc8 <_malloc_r+0x2c>
 801002e:	1cc4      	adds	r4, r0, #3
 8010030:	f024 0403 	bic.w	r4, r4, #3
 8010034:	42a0      	cmp	r0, r4
 8010036:	d005      	beq.n	8010044 <_malloc_r+0xa8>
 8010038:	1a21      	subs	r1, r4, r0
 801003a:	4630      	mov	r0, r6
 801003c:	f000 fc5c 	bl	80108f8 <_sbrk_r>
 8010040:	3001      	adds	r0, #1
 8010042:	d0cf      	beq.n	800ffe4 <_malloc_r+0x48>
 8010044:	6025      	str	r5, [r4, #0]
 8010046:	e7db      	b.n	8010000 <_malloc_r+0x64>
 8010048:	24000974 	.word	0x24000974
 801004c:	24000978 	.word	0x24000978

08010050 <__cvt>:
 8010050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010052:	ed2d 8b02 	vpush	{d8}
 8010056:	eeb0 8b40 	vmov.f64	d8, d0
 801005a:	b085      	sub	sp, #20
 801005c:	4617      	mov	r7, r2
 801005e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010060:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010062:	ee18 2a90 	vmov	r2, s17
 8010066:	f025 0520 	bic.w	r5, r5, #32
 801006a:	2a00      	cmp	r2, #0
 801006c:	bfb6      	itet	lt
 801006e:	222d      	movlt	r2, #45	; 0x2d
 8010070:	2200      	movge	r2, #0
 8010072:	eeb1 8b40 	vneglt.f64	d8, d0
 8010076:	2d46      	cmp	r5, #70	; 0x46
 8010078:	460c      	mov	r4, r1
 801007a:	701a      	strb	r2, [r3, #0]
 801007c:	d004      	beq.n	8010088 <__cvt+0x38>
 801007e:	2d45      	cmp	r5, #69	; 0x45
 8010080:	d100      	bne.n	8010084 <__cvt+0x34>
 8010082:	3401      	adds	r4, #1
 8010084:	2102      	movs	r1, #2
 8010086:	e000      	b.n	801008a <__cvt+0x3a>
 8010088:	2103      	movs	r1, #3
 801008a:	ab03      	add	r3, sp, #12
 801008c:	9301      	str	r3, [sp, #4]
 801008e:	ab02      	add	r3, sp, #8
 8010090:	9300      	str	r3, [sp, #0]
 8010092:	4622      	mov	r2, r4
 8010094:	4633      	mov	r3, r6
 8010096:	eeb0 0b48 	vmov.f64	d0, d8
 801009a:	f001 fae1 	bl	8011660 <_dtoa_r>
 801009e:	2d47      	cmp	r5, #71	; 0x47
 80100a0:	d101      	bne.n	80100a6 <__cvt+0x56>
 80100a2:	07fb      	lsls	r3, r7, #31
 80100a4:	d51e      	bpl.n	80100e4 <__cvt+0x94>
 80100a6:	2d46      	cmp	r5, #70	; 0x46
 80100a8:	eb00 0304 	add.w	r3, r0, r4
 80100ac:	d10c      	bne.n	80100c8 <__cvt+0x78>
 80100ae:	7802      	ldrb	r2, [r0, #0]
 80100b0:	2a30      	cmp	r2, #48	; 0x30
 80100b2:	d107      	bne.n	80100c4 <__cvt+0x74>
 80100b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80100b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100bc:	bf1c      	itt	ne
 80100be:	f1c4 0401 	rsbne	r4, r4, #1
 80100c2:	6034      	strne	r4, [r6, #0]
 80100c4:	6832      	ldr	r2, [r6, #0]
 80100c6:	4413      	add	r3, r2
 80100c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80100cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100d0:	d007      	beq.n	80100e2 <__cvt+0x92>
 80100d2:	2130      	movs	r1, #48	; 0x30
 80100d4:	9a03      	ldr	r2, [sp, #12]
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d204      	bcs.n	80100e4 <__cvt+0x94>
 80100da:	1c54      	adds	r4, r2, #1
 80100dc:	9403      	str	r4, [sp, #12]
 80100de:	7011      	strb	r1, [r2, #0]
 80100e0:	e7f8      	b.n	80100d4 <__cvt+0x84>
 80100e2:	9303      	str	r3, [sp, #12]
 80100e4:	9b03      	ldr	r3, [sp, #12]
 80100e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80100e8:	1a1b      	subs	r3, r3, r0
 80100ea:	6013      	str	r3, [r2, #0]
 80100ec:	b005      	add	sp, #20
 80100ee:	ecbd 8b02 	vpop	{d8}
 80100f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080100f4 <__exponent>:
 80100f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100f6:	2900      	cmp	r1, #0
 80100f8:	4604      	mov	r4, r0
 80100fa:	bfba      	itte	lt
 80100fc:	4249      	neglt	r1, r1
 80100fe:	232d      	movlt	r3, #45	; 0x2d
 8010100:	232b      	movge	r3, #43	; 0x2b
 8010102:	2909      	cmp	r1, #9
 8010104:	f804 2b02 	strb.w	r2, [r4], #2
 8010108:	7043      	strb	r3, [r0, #1]
 801010a:	dd20      	ble.n	801014e <__exponent+0x5a>
 801010c:	f10d 0307 	add.w	r3, sp, #7
 8010110:	461f      	mov	r7, r3
 8010112:	260a      	movs	r6, #10
 8010114:	fb91 f5f6 	sdiv	r5, r1, r6
 8010118:	fb06 1115 	mls	r1, r6, r5, r1
 801011c:	3130      	adds	r1, #48	; 0x30
 801011e:	2d09      	cmp	r5, #9
 8010120:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010124:	f103 32ff 	add.w	r2, r3, #4294967295
 8010128:	4629      	mov	r1, r5
 801012a:	dc09      	bgt.n	8010140 <__exponent+0x4c>
 801012c:	3130      	adds	r1, #48	; 0x30
 801012e:	3b02      	subs	r3, #2
 8010130:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010134:	42bb      	cmp	r3, r7
 8010136:	4622      	mov	r2, r4
 8010138:	d304      	bcc.n	8010144 <__exponent+0x50>
 801013a:	1a10      	subs	r0, r2, r0
 801013c:	b003      	add	sp, #12
 801013e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010140:	4613      	mov	r3, r2
 8010142:	e7e7      	b.n	8010114 <__exponent+0x20>
 8010144:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010148:	f804 2b01 	strb.w	r2, [r4], #1
 801014c:	e7f2      	b.n	8010134 <__exponent+0x40>
 801014e:	2330      	movs	r3, #48	; 0x30
 8010150:	4419      	add	r1, r3
 8010152:	7083      	strb	r3, [r0, #2]
 8010154:	1d02      	adds	r2, r0, #4
 8010156:	70c1      	strb	r1, [r0, #3]
 8010158:	e7ef      	b.n	801013a <__exponent+0x46>
 801015a:	0000      	movs	r0, r0
 801015c:	0000      	movs	r0, r0
	...

08010160 <_printf_float>:
 8010160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010164:	b08d      	sub	sp, #52	; 0x34
 8010166:	460c      	mov	r4, r1
 8010168:	4616      	mov	r6, r2
 801016a:	461f      	mov	r7, r3
 801016c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010170:	4605      	mov	r5, r0
 8010172:	f002 fbb3 	bl	80128dc <_localeconv_r>
 8010176:	f8d0 b000 	ldr.w	fp, [r0]
 801017a:	4658      	mov	r0, fp
 801017c:	f7f0 f8b0 	bl	80002e0 <strlen>
 8010180:	2300      	movs	r3, #0
 8010182:	930a      	str	r3, [sp, #40]	; 0x28
 8010184:	f8d8 3000 	ldr.w	r3, [r8]
 8010188:	9005      	str	r0, [sp, #20]
 801018a:	3307      	adds	r3, #7
 801018c:	f023 0307 	bic.w	r3, r3, #7
 8010190:	f103 0108 	add.w	r1, r3, #8
 8010194:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010198:	6822      	ldr	r2, [r4, #0]
 801019a:	f8c8 1000 	str.w	r1, [r8]
 801019e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80101a2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80101a6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8010430 <_printf_float+0x2d0>
 80101aa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80101ae:	eeb0 6bc0 	vabs.f64	d6, d0
 80101b2:	eeb4 6b47 	vcmp.f64	d6, d7
 80101b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ba:	dd24      	ble.n	8010206 <_printf_float+0xa6>
 80101bc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80101c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101c4:	d502      	bpl.n	80101cc <_printf_float+0x6c>
 80101c6:	232d      	movs	r3, #45	; 0x2d
 80101c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101cc:	499a      	ldr	r1, [pc, #616]	; (8010438 <_printf_float+0x2d8>)
 80101ce:	4b9b      	ldr	r3, [pc, #620]	; (801043c <_printf_float+0x2dc>)
 80101d0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80101d4:	bf8c      	ite	hi
 80101d6:	4688      	movhi	r8, r1
 80101d8:	4698      	movls	r8, r3
 80101da:	f022 0204 	bic.w	r2, r2, #4
 80101de:	2303      	movs	r3, #3
 80101e0:	6123      	str	r3, [r4, #16]
 80101e2:	6022      	str	r2, [r4, #0]
 80101e4:	f04f 0a00 	mov.w	sl, #0
 80101e8:	9700      	str	r7, [sp, #0]
 80101ea:	4633      	mov	r3, r6
 80101ec:	aa0b      	add	r2, sp, #44	; 0x2c
 80101ee:	4621      	mov	r1, r4
 80101f0:	4628      	mov	r0, r5
 80101f2:	f000 f9e1 	bl	80105b8 <_printf_common>
 80101f6:	3001      	adds	r0, #1
 80101f8:	f040 8089 	bne.w	801030e <_printf_float+0x1ae>
 80101fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010200:	b00d      	add	sp, #52	; 0x34
 8010202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010206:	eeb4 0b40 	vcmp.f64	d0, d0
 801020a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801020e:	d702      	bvc.n	8010216 <_printf_float+0xb6>
 8010210:	498b      	ldr	r1, [pc, #556]	; (8010440 <_printf_float+0x2e0>)
 8010212:	4b8c      	ldr	r3, [pc, #560]	; (8010444 <_printf_float+0x2e4>)
 8010214:	e7dc      	b.n	80101d0 <_printf_float+0x70>
 8010216:	6861      	ldr	r1, [r4, #4]
 8010218:	1c4b      	adds	r3, r1, #1
 801021a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801021e:	ab0a      	add	r3, sp, #40	; 0x28
 8010220:	a809      	add	r0, sp, #36	; 0x24
 8010222:	d13b      	bne.n	801029c <_printf_float+0x13c>
 8010224:	2106      	movs	r1, #6
 8010226:	6061      	str	r1, [r4, #4]
 8010228:	f04f 0c00 	mov.w	ip, #0
 801022c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8010230:	e9cd 0900 	strd	r0, r9, [sp]
 8010234:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010238:	6022      	str	r2, [r4, #0]
 801023a:	6861      	ldr	r1, [r4, #4]
 801023c:	4628      	mov	r0, r5
 801023e:	f7ff ff07 	bl	8010050 <__cvt>
 8010242:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8010246:	2b47      	cmp	r3, #71	; 0x47
 8010248:	4680      	mov	r8, r0
 801024a:	d109      	bne.n	8010260 <_printf_float+0x100>
 801024c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801024e:	1cd8      	adds	r0, r3, #3
 8010250:	db02      	blt.n	8010258 <_printf_float+0xf8>
 8010252:	6862      	ldr	r2, [r4, #4]
 8010254:	4293      	cmp	r3, r2
 8010256:	dd47      	ble.n	80102e8 <_printf_float+0x188>
 8010258:	f1a9 0902 	sub.w	r9, r9, #2
 801025c:	fa5f f989 	uxtb.w	r9, r9
 8010260:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010264:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010266:	d824      	bhi.n	80102b2 <_printf_float+0x152>
 8010268:	3901      	subs	r1, #1
 801026a:	464a      	mov	r2, r9
 801026c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010270:	9109      	str	r1, [sp, #36]	; 0x24
 8010272:	f7ff ff3f 	bl	80100f4 <__exponent>
 8010276:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010278:	1813      	adds	r3, r2, r0
 801027a:	2a01      	cmp	r2, #1
 801027c:	4682      	mov	sl, r0
 801027e:	6123      	str	r3, [r4, #16]
 8010280:	dc02      	bgt.n	8010288 <_printf_float+0x128>
 8010282:	6822      	ldr	r2, [r4, #0]
 8010284:	07d1      	lsls	r1, r2, #31
 8010286:	d501      	bpl.n	801028c <_printf_float+0x12c>
 8010288:	3301      	adds	r3, #1
 801028a:	6123      	str	r3, [r4, #16]
 801028c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010290:	2b00      	cmp	r3, #0
 8010292:	d0a9      	beq.n	80101e8 <_printf_float+0x88>
 8010294:	232d      	movs	r3, #45	; 0x2d
 8010296:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801029a:	e7a5      	b.n	80101e8 <_printf_float+0x88>
 801029c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 80102a0:	f000 8178 	beq.w	8010594 <_printf_float+0x434>
 80102a4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80102a8:	d1be      	bne.n	8010228 <_printf_float+0xc8>
 80102aa:	2900      	cmp	r1, #0
 80102ac:	d1bc      	bne.n	8010228 <_printf_float+0xc8>
 80102ae:	2101      	movs	r1, #1
 80102b0:	e7b9      	b.n	8010226 <_printf_float+0xc6>
 80102b2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80102b6:	d119      	bne.n	80102ec <_printf_float+0x18c>
 80102b8:	2900      	cmp	r1, #0
 80102ba:	6863      	ldr	r3, [r4, #4]
 80102bc:	dd0c      	ble.n	80102d8 <_printf_float+0x178>
 80102be:	6121      	str	r1, [r4, #16]
 80102c0:	b913      	cbnz	r3, 80102c8 <_printf_float+0x168>
 80102c2:	6822      	ldr	r2, [r4, #0]
 80102c4:	07d2      	lsls	r2, r2, #31
 80102c6:	d502      	bpl.n	80102ce <_printf_float+0x16e>
 80102c8:	3301      	adds	r3, #1
 80102ca:	440b      	add	r3, r1
 80102cc:	6123      	str	r3, [r4, #16]
 80102ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102d0:	65a3      	str	r3, [r4, #88]	; 0x58
 80102d2:	f04f 0a00 	mov.w	sl, #0
 80102d6:	e7d9      	b.n	801028c <_printf_float+0x12c>
 80102d8:	b913      	cbnz	r3, 80102e0 <_printf_float+0x180>
 80102da:	6822      	ldr	r2, [r4, #0]
 80102dc:	07d0      	lsls	r0, r2, #31
 80102de:	d501      	bpl.n	80102e4 <_printf_float+0x184>
 80102e0:	3302      	adds	r3, #2
 80102e2:	e7f3      	b.n	80102cc <_printf_float+0x16c>
 80102e4:	2301      	movs	r3, #1
 80102e6:	e7f1      	b.n	80102cc <_printf_float+0x16c>
 80102e8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80102ec:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80102f0:	4293      	cmp	r3, r2
 80102f2:	db05      	blt.n	8010300 <_printf_float+0x1a0>
 80102f4:	6822      	ldr	r2, [r4, #0]
 80102f6:	6123      	str	r3, [r4, #16]
 80102f8:	07d1      	lsls	r1, r2, #31
 80102fa:	d5e8      	bpl.n	80102ce <_printf_float+0x16e>
 80102fc:	3301      	adds	r3, #1
 80102fe:	e7e5      	b.n	80102cc <_printf_float+0x16c>
 8010300:	2b00      	cmp	r3, #0
 8010302:	bfd4      	ite	le
 8010304:	f1c3 0302 	rsble	r3, r3, #2
 8010308:	2301      	movgt	r3, #1
 801030a:	4413      	add	r3, r2
 801030c:	e7de      	b.n	80102cc <_printf_float+0x16c>
 801030e:	6823      	ldr	r3, [r4, #0]
 8010310:	055a      	lsls	r2, r3, #21
 8010312:	d407      	bmi.n	8010324 <_printf_float+0x1c4>
 8010314:	6923      	ldr	r3, [r4, #16]
 8010316:	4642      	mov	r2, r8
 8010318:	4631      	mov	r1, r6
 801031a:	4628      	mov	r0, r5
 801031c:	47b8      	blx	r7
 801031e:	3001      	adds	r0, #1
 8010320:	d12a      	bne.n	8010378 <_printf_float+0x218>
 8010322:	e76b      	b.n	80101fc <_printf_float+0x9c>
 8010324:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010328:	f240 80de 	bls.w	80104e8 <_printf_float+0x388>
 801032c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010330:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010338:	d133      	bne.n	80103a2 <_printf_float+0x242>
 801033a:	2301      	movs	r3, #1
 801033c:	4a42      	ldr	r2, [pc, #264]	; (8010448 <_printf_float+0x2e8>)
 801033e:	4631      	mov	r1, r6
 8010340:	4628      	mov	r0, r5
 8010342:	47b8      	blx	r7
 8010344:	3001      	adds	r0, #1
 8010346:	f43f af59 	beq.w	80101fc <_printf_float+0x9c>
 801034a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801034e:	429a      	cmp	r2, r3
 8010350:	db02      	blt.n	8010358 <_printf_float+0x1f8>
 8010352:	6823      	ldr	r3, [r4, #0]
 8010354:	07d8      	lsls	r0, r3, #31
 8010356:	d50f      	bpl.n	8010378 <_printf_float+0x218>
 8010358:	9b05      	ldr	r3, [sp, #20]
 801035a:	465a      	mov	r2, fp
 801035c:	4631      	mov	r1, r6
 801035e:	4628      	mov	r0, r5
 8010360:	47b8      	blx	r7
 8010362:	3001      	adds	r0, #1
 8010364:	f43f af4a 	beq.w	80101fc <_printf_float+0x9c>
 8010368:	f04f 0800 	mov.w	r8, #0
 801036c:	f104 091a 	add.w	r9, r4, #26
 8010370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010372:	3b01      	subs	r3, #1
 8010374:	4543      	cmp	r3, r8
 8010376:	dc09      	bgt.n	801038c <_printf_float+0x22c>
 8010378:	6823      	ldr	r3, [r4, #0]
 801037a:	079b      	lsls	r3, r3, #30
 801037c:	f100 8105 	bmi.w	801058a <_printf_float+0x42a>
 8010380:	68e0      	ldr	r0, [r4, #12]
 8010382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010384:	4298      	cmp	r0, r3
 8010386:	bfb8      	it	lt
 8010388:	4618      	movlt	r0, r3
 801038a:	e739      	b.n	8010200 <_printf_float+0xa0>
 801038c:	2301      	movs	r3, #1
 801038e:	464a      	mov	r2, r9
 8010390:	4631      	mov	r1, r6
 8010392:	4628      	mov	r0, r5
 8010394:	47b8      	blx	r7
 8010396:	3001      	adds	r0, #1
 8010398:	f43f af30 	beq.w	80101fc <_printf_float+0x9c>
 801039c:	f108 0801 	add.w	r8, r8, #1
 80103a0:	e7e6      	b.n	8010370 <_printf_float+0x210>
 80103a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	dc2b      	bgt.n	8010400 <_printf_float+0x2a0>
 80103a8:	2301      	movs	r3, #1
 80103aa:	4a27      	ldr	r2, [pc, #156]	; (8010448 <_printf_float+0x2e8>)
 80103ac:	4631      	mov	r1, r6
 80103ae:	4628      	mov	r0, r5
 80103b0:	47b8      	blx	r7
 80103b2:	3001      	adds	r0, #1
 80103b4:	f43f af22 	beq.w	80101fc <_printf_float+0x9c>
 80103b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103ba:	b923      	cbnz	r3, 80103c6 <_printf_float+0x266>
 80103bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103be:	b913      	cbnz	r3, 80103c6 <_printf_float+0x266>
 80103c0:	6823      	ldr	r3, [r4, #0]
 80103c2:	07d9      	lsls	r1, r3, #31
 80103c4:	d5d8      	bpl.n	8010378 <_printf_float+0x218>
 80103c6:	9b05      	ldr	r3, [sp, #20]
 80103c8:	465a      	mov	r2, fp
 80103ca:	4631      	mov	r1, r6
 80103cc:	4628      	mov	r0, r5
 80103ce:	47b8      	blx	r7
 80103d0:	3001      	adds	r0, #1
 80103d2:	f43f af13 	beq.w	80101fc <_printf_float+0x9c>
 80103d6:	f04f 0900 	mov.w	r9, #0
 80103da:	f104 0a1a 	add.w	sl, r4, #26
 80103de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103e0:	425b      	negs	r3, r3
 80103e2:	454b      	cmp	r3, r9
 80103e4:	dc01      	bgt.n	80103ea <_printf_float+0x28a>
 80103e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103e8:	e795      	b.n	8010316 <_printf_float+0x1b6>
 80103ea:	2301      	movs	r3, #1
 80103ec:	4652      	mov	r2, sl
 80103ee:	4631      	mov	r1, r6
 80103f0:	4628      	mov	r0, r5
 80103f2:	47b8      	blx	r7
 80103f4:	3001      	adds	r0, #1
 80103f6:	f43f af01 	beq.w	80101fc <_printf_float+0x9c>
 80103fa:	f109 0901 	add.w	r9, r9, #1
 80103fe:	e7ee      	b.n	80103de <_printf_float+0x27e>
 8010400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010402:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010404:	429a      	cmp	r2, r3
 8010406:	bfa8      	it	ge
 8010408:	461a      	movge	r2, r3
 801040a:	2a00      	cmp	r2, #0
 801040c:	4691      	mov	r9, r2
 801040e:	dd07      	ble.n	8010420 <_printf_float+0x2c0>
 8010410:	4613      	mov	r3, r2
 8010412:	4631      	mov	r1, r6
 8010414:	4642      	mov	r2, r8
 8010416:	4628      	mov	r0, r5
 8010418:	47b8      	blx	r7
 801041a:	3001      	adds	r0, #1
 801041c:	f43f aeee 	beq.w	80101fc <_printf_float+0x9c>
 8010420:	f104 031a 	add.w	r3, r4, #26
 8010424:	f04f 0a00 	mov.w	sl, #0
 8010428:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801042c:	9307      	str	r3, [sp, #28]
 801042e:	e017      	b.n	8010460 <_printf_float+0x300>
 8010430:	ffffffff 	.word	0xffffffff
 8010434:	7fefffff 	.word	0x7fefffff
 8010438:	080143ac 	.word	0x080143ac
 801043c:	080143a8 	.word	0x080143a8
 8010440:	080143b4 	.word	0x080143b4
 8010444:	080143b0 	.word	0x080143b0
 8010448:	080143b8 	.word	0x080143b8
 801044c:	2301      	movs	r3, #1
 801044e:	9a07      	ldr	r2, [sp, #28]
 8010450:	4631      	mov	r1, r6
 8010452:	4628      	mov	r0, r5
 8010454:	47b8      	blx	r7
 8010456:	3001      	adds	r0, #1
 8010458:	f43f aed0 	beq.w	80101fc <_printf_float+0x9c>
 801045c:	f10a 0a01 	add.w	sl, sl, #1
 8010460:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010462:	9306      	str	r3, [sp, #24]
 8010464:	eba3 0309 	sub.w	r3, r3, r9
 8010468:	4553      	cmp	r3, sl
 801046a:	dcef      	bgt.n	801044c <_printf_float+0x2ec>
 801046c:	9b06      	ldr	r3, [sp, #24]
 801046e:	4498      	add	r8, r3
 8010470:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010474:	429a      	cmp	r2, r3
 8010476:	db15      	blt.n	80104a4 <_printf_float+0x344>
 8010478:	6823      	ldr	r3, [r4, #0]
 801047a:	07da      	lsls	r2, r3, #31
 801047c:	d412      	bmi.n	80104a4 <_printf_float+0x344>
 801047e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010480:	9a06      	ldr	r2, [sp, #24]
 8010482:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010484:	1a9a      	subs	r2, r3, r2
 8010486:	eba3 0a01 	sub.w	sl, r3, r1
 801048a:	4592      	cmp	sl, r2
 801048c:	bfa8      	it	ge
 801048e:	4692      	movge	sl, r2
 8010490:	f1ba 0f00 	cmp.w	sl, #0
 8010494:	dc0e      	bgt.n	80104b4 <_printf_float+0x354>
 8010496:	f04f 0800 	mov.w	r8, #0
 801049a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801049e:	f104 091a 	add.w	r9, r4, #26
 80104a2:	e019      	b.n	80104d8 <_printf_float+0x378>
 80104a4:	9b05      	ldr	r3, [sp, #20]
 80104a6:	465a      	mov	r2, fp
 80104a8:	4631      	mov	r1, r6
 80104aa:	4628      	mov	r0, r5
 80104ac:	47b8      	blx	r7
 80104ae:	3001      	adds	r0, #1
 80104b0:	d1e5      	bne.n	801047e <_printf_float+0x31e>
 80104b2:	e6a3      	b.n	80101fc <_printf_float+0x9c>
 80104b4:	4653      	mov	r3, sl
 80104b6:	4642      	mov	r2, r8
 80104b8:	4631      	mov	r1, r6
 80104ba:	4628      	mov	r0, r5
 80104bc:	47b8      	blx	r7
 80104be:	3001      	adds	r0, #1
 80104c0:	d1e9      	bne.n	8010496 <_printf_float+0x336>
 80104c2:	e69b      	b.n	80101fc <_printf_float+0x9c>
 80104c4:	2301      	movs	r3, #1
 80104c6:	464a      	mov	r2, r9
 80104c8:	4631      	mov	r1, r6
 80104ca:	4628      	mov	r0, r5
 80104cc:	47b8      	blx	r7
 80104ce:	3001      	adds	r0, #1
 80104d0:	f43f ae94 	beq.w	80101fc <_printf_float+0x9c>
 80104d4:	f108 0801 	add.w	r8, r8, #1
 80104d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80104dc:	1a9b      	subs	r3, r3, r2
 80104de:	eba3 030a 	sub.w	r3, r3, sl
 80104e2:	4543      	cmp	r3, r8
 80104e4:	dcee      	bgt.n	80104c4 <_printf_float+0x364>
 80104e6:	e747      	b.n	8010378 <_printf_float+0x218>
 80104e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80104ea:	2a01      	cmp	r2, #1
 80104ec:	dc01      	bgt.n	80104f2 <_printf_float+0x392>
 80104ee:	07db      	lsls	r3, r3, #31
 80104f0:	d539      	bpl.n	8010566 <_printf_float+0x406>
 80104f2:	2301      	movs	r3, #1
 80104f4:	4642      	mov	r2, r8
 80104f6:	4631      	mov	r1, r6
 80104f8:	4628      	mov	r0, r5
 80104fa:	47b8      	blx	r7
 80104fc:	3001      	adds	r0, #1
 80104fe:	f43f ae7d 	beq.w	80101fc <_printf_float+0x9c>
 8010502:	9b05      	ldr	r3, [sp, #20]
 8010504:	465a      	mov	r2, fp
 8010506:	4631      	mov	r1, r6
 8010508:	4628      	mov	r0, r5
 801050a:	47b8      	blx	r7
 801050c:	3001      	adds	r0, #1
 801050e:	f108 0801 	add.w	r8, r8, #1
 8010512:	f43f ae73 	beq.w	80101fc <_printf_float+0x9c>
 8010516:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801051a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801051c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010524:	f103 33ff 	add.w	r3, r3, #4294967295
 8010528:	d018      	beq.n	801055c <_printf_float+0x3fc>
 801052a:	4642      	mov	r2, r8
 801052c:	4631      	mov	r1, r6
 801052e:	4628      	mov	r0, r5
 8010530:	47b8      	blx	r7
 8010532:	3001      	adds	r0, #1
 8010534:	d10e      	bne.n	8010554 <_printf_float+0x3f4>
 8010536:	e661      	b.n	80101fc <_printf_float+0x9c>
 8010538:	2301      	movs	r3, #1
 801053a:	464a      	mov	r2, r9
 801053c:	4631      	mov	r1, r6
 801053e:	4628      	mov	r0, r5
 8010540:	47b8      	blx	r7
 8010542:	3001      	adds	r0, #1
 8010544:	f43f ae5a 	beq.w	80101fc <_printf_float+0x9c>
 8010548:	f108 0801 	add.w	r8, r8, #1
 801054c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801054e:	3b01      	subs	r3, #1
 8010550:	4543      	cmp	r3, r8
 8010552:	dcf1      	bgt.n	8010538 <_printf_float+0x3d8>
 8010554:	4653      	mov	r3, sl
 8010556:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801055a:	e6dd      	b.n	8010318 <_printf_float+0x1b8>
 801055c:	f04f 0800 	mov.w	r8, #0
 8010560:	f104 091a 	add.w	r9, r4, #26
 8010564:	e7f2      	b.n	801054c <_printf_float+0x3ec>
 8010566:	2301      	movs	r3, #1
 8010568:	e7df      	b.n	801052a <_printf_float+0x3ca>
 801056a:	2301      	movs	r3, #1
 801056c:	464a      	mov	r2, r9
 801056e:	4631      	mov	r1, r6
 8010570:	4628      	mov	r0, r5
 8010572:	47b8      	blx	r7
 8010574:	3001      	adds	r0, #1
 8010576:	f43f ae41 	beq.w	80101fc <_printf_float+0x9c>
 801057a:	f108 0801 	add.w	r8, r8, #1
 801057e:	68e3      	ldr	r3, [r4, #12]
 8010580:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010582:	1a9b      	subs	r3, r3, r2
 8010584:	4543      	cmp	r3, r8
 8010586:	dcf0      	bgt.n	801056a <_printf_float+0x40a>
 8010588:	e6fa      	b.n	8010380 <_printf_float+0x220>
 801058a:	f04f 0800 	mov.w	r8, #0
 801058e:	f104 0919 	add.w	r9, r4, #25
 8010592:	e7f4      	b.n	801057e <_printf_float+0x41e>
 8010594:	2900      	cmp	r1, #0
 8010596:	f43f ae8a 	beq.w	80102ae <_printf_float+0x14e>
 801059a:	f04f 0c00 	mov.w	ip, #0
 801059e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80105a2:	e9cd 0900 	strd	r0, r9, [sp]
 80105a6:	6022      	str	r2, [r4, #0]
 80105a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80105ac:	4628      	mov	r0, r5
 80105ae:	f7ff fd4f 	bl	8010050 <__cvt>
 80105b2:	4680      	mov	r8, r0
 80105b4:	e64a      	b.n	801024c <_printf_float+0xec>
 80105b6:	bf00      	nop

080105b8 <_printf_common>:
 80105b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105bc:	4691      	mov	r9, r2
 80105be:	461f      	mov	r7, r3
 80105c0:	688a      	ldr	r2, [r1, #8]
 80105c2:	690b      	ldr	r3, [r1, #16]
 80105c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80105c8:	4293      	cmp	r3, r2
 80105ca:	bfb8      	it	lt
 80105cc:	4613      	movlt	r3, r2
 80105ce:	f8c9 3000 	str.w	r3, [r9]
 80105d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80105d6:	4606      	mov	r6, r0
 80105d8:	460c      	mov	r4, r1
 80105da:	b112      	cbz	r2, 80105e2 <_printf_common+0x2a>
 80105dc:	3301      	adds	r3, #1
 80105de:	f8c9 3000 	str.w	r3, [r9]
 80105e2:	6823      	ldr	r3, [r4, #0]
 80105e4:	0699      	lsls	r1, r3, #26
 80105e6:	bf42      	ittt	mi
 80105e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80105ec:	3302      	addmi	r3, #2
 80105ee:	f8c9 3000 	strmi.w	r3, [r9]
 80105f2:	6825      	ldr	r5, [r4, #0]
 80105f4:	f015 0506 	ands.w	r5, r5, #6
 80105f8:	d107      	bne.n	801060a <_printf_common+0x52>
 80105fa:	f104 0a19 	add.w	sl, r4, #25
 80105fe:	68e3      	ldr	r3, [r4, #12]
 8010600:	f8d9 2000 	ldr.w	r2, [r9]
 8010604:	1a9b      	subs	r3, r3, r2
 8010606:	42ab      	cmp	r3, r5
 8010608:	dc28      	bgt.n	801065c <_printf_common+0xa4>
 801060a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801060e:	6822      	ldr	r2, [r4, #0]
 8010610:	3300      	adds	r3, #0
 8010612:	bf18      	it	ne
 8010614:	2301      	movne	r3, #1
 8010616:	0692      	lsls	r2, r2, #26
 8010618:	d42d      	bmi.n	8010676 <_printf_common+0xbe>
 801061a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801061e:	4639      	mov	r1, r7
 8010620:	4630      	mov	r0, r6
 8010622:	47c0      	blx	r8
 8010624:	3001      	adds	r0, #1
 8010626:	d020      	beq.n	801066a <_printf_common+0xb2>
 8010628:	6823      	ldr	r3, [r4, #0]
 801062a:	68e5      	ldr	r5, [r4, #12]
 801062c:	f8d9 2000 	ldr.w	r2, [r9]
 8010630:	f003 0306 	and.w	r3, r3, #6
 8010634:	2b04      	cmp	r3, #4
 8010636:	bf08      	it	eq
 8010638:	1aad      	subeq	r5, r5, r2
 801063a:	68a3      	ldr	r3, [r4, #8]
 801063c:	6922      	ldr	r2, [r4, #16]
 801063e:	bf0c      	ite	eq
 8010640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010644:	2500      	movne	r5, #0
 8010646:	4293      	cmp	r3, r2
 8010648:	bfc4      	itt	gt
 801064a:	1a9b      	subgt	r3, r3, r2
 801064c:	18ed      	addgt	r5, r5, r3
 801064e:	f04f 0900 	mov.w	r9, #0
 8010652:	341a      	adds	r4, #26
 8010654:	454d      	cmp	r5, r9
 8010656:	d11a      	bne.n	801068e <_printf_common+0xd6>
 8010658:	2000      	movs	r0, #0
 801065a:	e008      	b.n	801066e <_printf_common+0xb6>
 801065c:	2301      	movs	r3, #1
 801065e:	4652      	mov	r2, sl
 8010660:	4639      	mov	r1, r7
 8010662:	4630      	mov	r0, r6
 8010664:	47c0      	blx	r8
 8010666:	3001      	adds	r0, #1
 8010668:	d103      	bne.n	8010672 <_printf_common+0xba>
 801066a:	f04f 30ff 	mov.w	r0, #4294967295
 801066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010672:	3501      	adds	r5, #1
 8010674:	e7c3      	b.n	80105fe <_printf_common+0x46>
 8010676:	18e1      	adds	r1, r4, r3
 8010678:	1c5a      	adds	r2, r3, #1
 801067a:	2030      	movs	r0, #48	; 0x30
 801067c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010680:	4422      	add	r2, r4
 8010682:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010686:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801068a:	3302      	adds	r3, #2
 801068c:	e7c5      	b.n	801061a <_printf_common+0x62>
 801068e:	2301      	movs	r3, #1
 8010690:	4622      	mov	r2, r4
 8010692:	4639      	mov	r1, r7
 8010694:	4630      	mov	r0, r6
 8010696:	47c0      	blx	r8
 8010698:	3001      	adds	r0, #1
 801069a:	d0e6      	beq.n	801066a <_printf_common+0xb2>
 801069c:	f109 0901 	add.w	r9, r9, #1
 80106a0:	e7d8      	b.n	8010654 <_printf_common+0x9c>
	...

080106a4 <_printf_i>:
 80106a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80106a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80106ac:	460c      	mov	r4, r1
 80106ae:	7e09      	ldrb	r1, [r1, #24]
 80106b0:	b085      	sub	sp, #20
 80106b2:	296e      	cmp	r1, #110	; 0x6e
 80106b4:	4617      	mov	r7, r2
 80106b6:	4606      	mov	r6, r0
 80106b8:	4698      	mov	r8, r3
 80106ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80106bc:	f000 80b3 	beq.w	8010826 <_printf_i+0x182>
 80106c0:	d822      	bhi.n	8010708 <_printf_i+0x64>
 80106c2:	2963      	cmp	r1, #99	; 0x63
 80106c4:	d036      	beq.n	8010734 <_printf_i+0x90>
 80106c6:	d80a      	bhi.n	80106de <_printf_i+0x3a>
 80106c8:	2900      	cmp	r1, #0
 80106ca:	f000 80b9 	beq.w	8010840 <_printf_i+0x19c>
 80106ce:	2958      	cmp	r1, #88	; 0x58
 80106d0:	f000 8083 	beq.w	80107da <_printf_i+0x136>
 80106d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80106d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80106dc:	e032      	b.n	8010744 <_printf_i+0xa0>
 80106de:	2964      	cmp	r1, #100	; 0x64
 80106e0:	d001      	beq.n	80106e6 <_printf_i+0x42>
 80106e2:	2969      	cmp	r1, #105	; 0x69
 80106e4:	d1f6      	bne.n	80106d4 <_printf_i+0x30>
 80106e6:	6820      	ldr	r0, [r4, #0]
 80106e8:	6813      	ldr	r3, [r2, #0]
 80106ea:	0605      	lsls	r5, r0, #24
 80106ec:	f103 0104 	add.w	r1, r3, #4
 80106f0:	d52a      	bpl.n	8010748 <_printf_i+0xa4>
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	6011      	str	r1, [r2, #0]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	da03      	bge.n	8010702 <_printf_i+0x5e>
 80106fa:	222d      	movs	r2, #45	; 0x2d
 80106fc:	425b      	negs	r3, r3
 80106fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010702:	486f      	ldr	r0, [pc, #444]	; (80108c0 <_printf_i+0x21c>)
 8010704:	220a      	movs	r2, #10
 8010706:	e039      	b.n	801077c <_printf_i+0xd8>
 8010708:	2973      	cmp	r1, #115	; 0x73
 801070a:	f000 809d 	beq.w	8010848 <_printf_i+0x1a4>
 801070e:	d808      	bhi.n	8010722 <_printf_i+0x7e>
 8010710:	296f      	cmp	r1, #111	; 0x6f
 8010712:	d020      	beq.n	8010756 <_printf_i+0xb2>
 8010714:	2970      	cmp	r1, #112	; 0x70
 8010716:	d1dd      	bne.n	80106d4 <_printf_i+0x30>
 8010718:	6823      	ldr	r3, [r4, #0]
 801071a:	f043 0320 	orr.w	r3, r3, #32
 801071e:	6023      	str	r3, [r4, #0]
 8010720:	e003      	b.n	801072a <_printf_i+0x86>
 8010722:	2975      	cmp	r1, #117	; 0x75
 8010724:	d017      	beq.n	8010756 <_printf_i+0xb2>
 8010726:	2978      	cmp	r1, #120	; 0x78
 8010728:	d1d4      	bne.n	80106d4 <_printf_i+0x30>
 801072a:	2378      	movs	r3, #120	; 0x78
 801072c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010730:	4864      	ldr	r0, [pc, #400]	; (80108c4 <_printf_i+0x220>)
 8010732:	e055      	b.n	80107e0 <_printf_i+0x13c>
 8010734:	6813      	ldr	r3, [r2, #0]
 8010736:	1d19      	adds	r1, r3, #4
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	6011      	str	r1, [r2, #0]
 801073c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010740:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010744:	2301      	movs	r3, #1
 8010746:	e08c      	b.n	8010862 <_printf_i+0x1be>
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	6011      	str	r1, [r2, #0]
 801074c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010750:	bf18      	it	ne
 8010752:	b21b      	sxthne	r3, r3
 8010754:	e7cf      	b.n	80106f6 <_printf_i+0x52>
 8010756:	6813      	ldr	r3, [r2, #0]
 8010758:	6825      	ldr	r5, [r4, #0]
 801075a:	1d18      	adds	r0, r3, #4
 801075c:	6010      	str	r0, [r2, #0]
 801075e:	0628      	lsls	r0, r5, #24
 8010760:	d501      	bpl.n	8010766 <_printf_i+0xc2>
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	e002      	b.n	801076c <_printf_i+0xc8>
 8010766:	0668      	lsls	r0, r5, #25
 8010768:	d5fb      	bpl.n	8010762 <_printf_i+0xbe>
 801076a:	881b      	ldrh	r3, [r3, #0]
 801076c:	4854      	ldr	r0, [pc, #336]	; (80108c0 <_printf_i+0x21c>)
 801076e:	296f      	cmp	r1, #111	; 0x6f
 8010770:	bf14      	ite	ne
 8010772:	220a      	movne	r2, #10
 8010774:	2208      	moveq	r2, #8
 8010776:	2100      	movs	r1, #0
 8010778:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801077c:	6865      	ldr	r5, [r4, #4]
 801077e:	60a5      	str	r5, [r4, #8]
 8010780:	2d00      	cmp	r5, #0
 8010782:	f2c0 8095 	blt.w	80108b0 <_printf_i+0x20c>
 8010786:	6821      	ldr	r1, [r4, #0]
 8010788:	f021 0104 	bic.w	r1, r1, #4
 801078c:	6021      	str	r1, [r4, #0]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d13d      	bne.n	801080e <_printf_i+0x16a>
 8010792:	2d00      	cmp	r5, #0
 8010794:	f040 808e 	bne.w	80108b4 <_printf_i+0x210>
 8010798:	4665      	mov	r5, ip
 801079a:	2a08      	cmp	r2, #8
 801079c:	d10b      	bne.n	80107b6 <_printf_i+0x112>
 801079e:	6823      	ldr	r3, [r4, #0]
 80107a0:	07db      	lsls	r3, r3, #31
 80107a2:	d508      	bpl.n	80107b6 <_printf_i+0x112>
 80107a4:	6923      	ldr	r3, [r4, #16]
 80107a6:	6862      	ldr	r2, [r4, #4]
 80107a8:	429a      	cmp	r2, r3
 80107aa:	bfde      	ittt	le
 80107ac:	2330      	movle	r3, #48	; 0x30
 80107ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80107b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80107b6:	ebac 0305 	sub.w	r3, ip, r5
 80107ba:	6123      	str	r3, [r4, #16]
 80107bc:	f8cd 8000 	str.w	r8, [sp]
 80107c0:	463b      	mov	r3, r7
 80107c2:	aa03      	add	r2, sp, #12
 80107c4:	4621      	mov	r1, r4
 80107c6:	4630      	mov	r0, r6
 80107c8:	f7ff fef6 	bl	80105b8 <_printf_common>
 80107cc:	3001      	adds	r0, #1
 80107ce:	d14d      	bne.n	801086c <_printf_i+0x1c8>
 80107d0:	f04f 30ff 	mov.w	r0, #4294967295
 80107d4:	b005      	add	sp, #20
 80107d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107da:	4839      	ldr	r0, [pc, #228]	; (80108c0 <_printf_i+0x21c>)
 80107dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80107e0:	6813      	ldr	r3, [r2, #0]
 80107e2:	6821      	ldr	r1, [r4, #0]
 80107e4:	1d1d      	adds	r5, r3, #4
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	6015      	str	r5, [r2, #0]
 80107ea:	060a      	lsls	r2, r1, #24
 80107ec:	d50b      	bpl.n	8010806 <_printf_i+0x162>
 80107ee:	07ca      	lsls	r2, r1, #31
 80107f0:	bf44      	itt	mi
 80107f2:	f041 0120 	orrmi.w	r1, r1, #32
 80107f6:	6021      	strmi	r1, [r4, #0]
 80107f8:	b91b      	cbnz	r3, 8010802 <_printf_i+0x15e>
 80107fa:	6822      	ldr	r2, [r4, #0]
 80107fc:	f022 0220 	bic.w	r2, r2, #32
 8010800:	6022      	str	r2, [r4, #0]
 8010802:	2210      	movs	r2, #16
 8010804:	e7b7      	b.n	8010776 <_printf_i+0xd2>
 8010806:	064d      	lsls	r5, r1, #25
 8010808:	bf48      	it	mi
 801080a:	b29b      	uxthmi	r3, r3
 801080c:	e7ef      	b.n	80107ee <_printf_i+0x14a>
 801080e:	4665      	mov	r5, ip
 8010810:	fbb3 f1f2 	udiv	r1, r3, r2
 8010814:	fb02 3311 	mls	r3, r2, r1, r3
 8010818:	5cc3      	ldrb	r3, [r0, r3]
 801081a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801081e:	460b      	mov	r3, r1
 8010820:	2900      	cmp	r1, #0
 8010822:	d1f5      	bne.n	8010810 <_printf_i+0x16c>
 8010824:	e7b9      	b.n	801079a <_printf_i+0xf6>
 8010826:	6813      	ldr	r3, [r2, #0]
 8010828:	6825      	ldr	r5, [r4, #0]
 801082a:	6961      	ldr	r1, [r4, #20]
 801082c:	1d18      	adds	r0, r3, #4
 801082e:	6010      	str	r0, [r2, #0]
 8010830:	0628      	lsls	r0, r5, #24
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	d501      	bpl.n	801083a <_printf_i+0x196>
 8010836:	6019      	str	r1, [r3, #0]
 8010838:	e002      	b.n	8010840 <_printf_i+0x19c>
 801083a:	066a      	lsls	r2, r5, #25
 801083c:	d5fb      	bpl.n	8010836 <_printf_i+0x192>
 801083e:	8019      	strh	r1, [r3, #0]
 8010840:	2300      	movs	r3, #0
 8010842:	6123      	str	r3, [r4, #16]
 8010844:	4665      	mov	r5, ip
 8010846:	e7b9      	b.n	80107bc <_printf_i+0x118>
 8010848:	6813      	ldr	r3, [r2, #0]
 801084a:	1d19      	adds	r1, r3, #4
 801084c:	6011      	str	r1, [r2, #0]
 801084e:	681d      	ldr	r5, [r3, #0]
 8010850:	6862      	ldr	r2, [r4, #4]
 8010852:	2100      	movs	r1, #0
 8010854:	4628      	mov	r0, r5
 8010856:	f7ef fd4b 	bl	80002f0 <memchr>
 801085a:	b108      	cbz	r0, 8010860 <_printf_i+0x1bc>
 801085c:	1b40      	subs	r0, r0, r5
 801085e:	6060      	str	r0, [r4, #4]
 8010860:	6863      	ldr	r3, [r4, #4]
 8010862:	6123      	str	r3, [r4, #16]
 8010864:	2300      	movs	r3, #0
 8010866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801086a:	e7a7      	b.n	80107bc <_printf_i+0x118>
 801086c:	6923      	ldr	r3, [r4, #16]
 801086e:	462a      	mov	r2, r5
 8010870:	4639      	mov	r1, r7
 8010872:	4630      	mov	r0, r6
 8010874:	47c0      	blx	r8
 8010876:	3001      	adds	r0, #1
 8010878:	d0aa      	beq.n	80107d0 <_printf_i+0x12c>
 801087a:	6823      	ldr	r3, [r4, #0]
 801087c:	079b      	lsls	r3, r3, #30
 801087e:	d413      	bmi.n	80108a8 <_printf_i+0x204>
 8010880:	68e0      	ldr	r0, [r4, #12]
 8010882:	9b03      	ldr	r3, [sp, #12]
 8010884:	4298      	cmp	r0, r3
 8010886:	bfb8      	it	lt
 8010888:	4618      	movlt	r0, r3
 801088a:	e7a3      	b.n	80107d4 <_printf_i+0x130>
 801088c:	2301      	movs	r3, #1
 801088e:	464a      	mov	r2, r9
 8010890:	4639      	mov	r1, r7
 8010892:	4630      	mov	r0, r6
 8010894:	47c0      	blx	r8
 8010896:	3001      	adds	r0, #1
 8010898:	d09a      	beq.n	80107d0 <_printf_i+0x12c>
 801089a:	3501      	adds	r5, #1
 801089c:	68e3      	ldr	r3, [r4, #12]
 801089e:	9a03      	ldr	r2, [sp, #12]
 80108a0:	1a9b      	subs	r3, r3, r2
 80108a2:	42ab      	cmp	r3, r5
 80108a4:	dcf2      	bgt.n	801088c <_printf_i+0x1e8>
 80108a6:	e7eb      	b.n	8010880 <_printf_i+0x1dc>
 80108a8:	2500      	movs	r5, #0
 80108aa:	f104 0919 	add.w	r9, r4, #25
 80108ae:	e7f5      	b.n	801089c <_printf_i+0x1f8>
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d1ac      	bne.n	801080e <_printf_i+0x16a>
 80108b4:	7803      	ldrb	r3, [r0, #0]
 80108b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80108ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80108be:	e76c      	b.n	801079a <_printf_i+0xf6>
 80108c0:	080143ba 	.word	0x080143ba
 80108c4:	080143cb 	.word	0x080143cb

080108c8 <iprintf>:
 80108c8:	b40f      	push	{r0, r1, r2, r3}
 80108ca:	4b0a      	ldr	r3, [pc, #40]	; (80108f4 <iprintf+0x2c>)
 80108cc:	b513      	push	{r0, r1, r4, lr}
 80108ce:	681c      	ldr	r4, [r3, #0]
 80108d0:	b124      	cbz	r4, 80108dc <iprintf+0x14>
 80108d2:	69a3      	ldr	r3, [r4, #24]
 80108d4:	b913      	cbnz	r3, 80108dc <iprintf+0x14>
 80108d6:	4620      	mov	r0, r4
 80108d8:	f001 fc4e 	bl	8012178 <__sinit>
 80108dc:	ab05      	add	r3, sp, #20
 80108de:	9a04      	ldr	r2, [sp, #16]
 80108e0:	68a1      	ldr	r1, [r4, #8]
 80108e2:	9301      	str	r3, [sp, #4]
 80108e4:	4620      	mov	r0, r4
 80108e6:	f002 fdcb 	bl	8013480 <_vfiprintf_r>
 80108ea:	b002      	add	sp, #8
 80108ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108f0:	b004      	add	sp, #16
 80108f2:	4770      	bx	lr
 80108f4:	24000608 	.word	0x24000608

080108f8 <_sbrk_r>:
 80108f8:	b538      	push	{r3, r4, r5, lr}
 80108fa:	4c06      	ldr	r4, [pc, #24]	; (8010914 <_sbrk_r+0x1c>)
 80108fc:	2300      	movs	r3, #0
 80108fe:	4605      	mov	r5, r0
 8010900:	4608      	mov	r0, r1
 8010902:	6023      	str	r3, [r4, #0]
 8010904:	f7f0 fdc4 	bl	8001490 <_sbrk>
 8010908:	1c43      	adds	r3, r0, #1
 801090a:	d102      	bne.n	8010912 <_sbrk_r+0x1a>
 801090c:	6823      	ldr	r3, [r4, #0]
 801090e:	b103      	cbz	r3, 8010912 <_sbrk_r+0x1a>
 8010910:	602b      	str	r3, [r5, #0]
 8010912:	bd38      	pop	{r3, r4, r5, pc}
 8010914:	24001b18 	.word	0x24001b18

08010918 <siprintf>:
 8010918:	b40e      	push	{r1, r2, r3}
 801091a:	b500      	push	{lr}
 801091c:	b09c      	sub	sp, #112	; 0x70
 801091e:	ab1d      	add	r3, sp, #116	; 0x74
 8010920:	9002      	str	r0, [sp, #8]
 8010922:	9006      	str	r0, [sp, #24]
 8010924:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010928:	4809      	ldr	r0, [pc, #36]	; (8010950 <siprintf+0x38>)
 801092a:	9107      	str	r1, [sp, #28]
 801092c:	9104      	str	r1, [sp, #16]
 801092e:	4909      	ldr	r1, [pc, #36]	; (8010954 <siprintf+0x3c>)
 8010930:	f853 2b04 	ldr.w	r2, [r3], #4
 8010934:	9105      	str	r1, [sp, #20]
 8010936:	6800      	ldr	r0, [r0, #0]
 8010938:	9301      	str	r3, [sp, #4]
 801093a:	a902      	add	r1, sp, #8
 801093c:	f002 fc7e 	bl	801323c <_svfiprintf_r>
 8010940:	9b02      	ldr	r3, [sp, #8]
 8010942:	2200      	movs	r2, #0
 8010944:	701a      	strb	r2, [r3, #0]
 8010946:	b01c      	add	sp, #112	; 0x70
 8010948:	f85d eb04 	ldr.w	lr, [sp], #4
 801094c:	b003      	add	sp, #12
 801094e:	4770      	bx	lr
 8010950:	24000608 	.word	0x24000608
 8010954:	ffff0208 	.word	0xffff0208

08010958 <sulp>:
 8010958:	b570      	push	{r4, r5, r6, lr}
 801095a:	4604      	mov	r4, r0
 801095c:	460d      	mov	r5, r1
 801095e:	4616      	mov	r6, r2
 8010960:	ec45 4b10 	vmov	d0, r4, r5
 8010964:	f002 faa8 	bl	8012eb8 <__ulp>
 8010968:	b17e      	cbz	r6, 801098a <sulp+0x32>
 801096a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801096e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010972:	2b00      	cmp	r3, #0
 8010974:	dd09      	ble.n	801098a <sulp+0x32>
 8010976:	051b      	lsls	r3, r3, #20
 8010978:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801097c:	2000      	movs	r0, #0
 801097e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8010982:	ec41 0b17 	vmov	d7, r0, r1
 8010986:	ee20 0b07 	vmul.f64	d0, d0, d7
 801098a:	bd70      	pop	{r4, r5, r6, pc}
 801098c:	0000      	movs	r0, r0
	...

08010990 <_strtod_l>:
 8010990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010994:	ed2d 8b0c 	vpush	{d8-d13}
 8010998:	4698      	mov	r8, r3
 801099a:	b09d      	sub	sp, #116	; 0x74
 801099c:	2300      	movs	r3, #0
 801099e:	4604      	mov	r4, r0
 80109a0:	4640      	mov	r0, r8
 80109a2:	460e      	mov	r6, r1
 80109a4:	9214      	str	r2, [sp, #80]	; 0x50
 80109a6:	9318      	str	r3, [sp, #96]	; 0x60
 80109a8:	f001 ff96 	bl	80128d8 <__localeconv_l>
 80109ac:	4681      	mov	r9, r0
 80109ae:	6800      	ldr	r0, [r0, #0]
 80109b0:	f7ef fc96 	bl	80002e0 <strlen>
 80109b4:	f04f 0a00 	mov.w	sl, #0
 80109b8:	4607      	mov	r7, r0
 80109ba:	f04f 0b00 	mov.w	fp, #0
 80109be:	9617      	str	r6, [sp, #92]	; 0x5c
 80109c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80109c2:	781a      	ldrb	r2, [r3, #0]
 80109c4:	2a0d      	cmp	r2, #13
 80109c6:	d834      	bhi.n	8010a32 <_strtod_l+0xa2>
 80109c8:	2a09      	cmp	r2, #9
 80109ca:	d238      	bcs.n	8010a3e <_strtod_l+0xae>
 80109cc:	2a00      	cmp	r2, #0
 80109ce:	d040      	beq.n	8010a52 <_strtod_l+0xc2>
 80109d0:	2300      	movs	r3, #0
 80109d2:	930d      	str	r3, [sp, #52]	; 0x34
 80109d4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80109d6:	782b      	ldrb	r3, [r5, #0]
 80109d8:	2b30      	cmp	r3, #48	; 0x30
 80109da:	f040 80b3 	bne.w	8010b44 <_strtod_l+0x1b4>
 80109de:	786b      	ldrb	r3, [r5, #1]
 80109e0:	2b58      	cmp	r3, #88	; 0x58
 80109e2:	d001      	beq.n	80109e8 <_strtod_l+0x58>
 80109e4:	2b78      	cmp	r3, #120	; 0x78
 80109e6:	d169      	bne.n	8010abc <_strtod_l+0x12c>
 80109e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109ea:	9301      	str	r3, [sp, #4]
 80109ec:	ab18      	add	r3, sp, #96	; 0x60
 80109ee:	9300      	str	r3, [sp, #0]
 80109f0:	f8cd 8008 	str.w	r8, [sp, #8]
 80109f4:	ab19      	add	r3, sp, #100	; 0x64
 80109f6:	4a8f      	ldr	r2, [pc, #572]	; (8010c34 <_strtod_l+0x2a4>)
 80109f8:	a917      	add	r1, sp, #92	; 0x5c
 80109fa:	4620      	mov	r0, r4
 80109fc:	f001 fc95 	bl	801232a <__gethex>
 8010a00:	f010 0607 	ands.w	r6, r0, #7
 8010a04:	4607      	mov	r7, r0
 8010a06:	d005      	beq.n	8010a14 <_strtod_l+0x84>
 8010a08:	2e06      	cmp	r6, #6
 8010a0a:	d12c      	bne.n	8010a66 <_strtod_l+0xd6>
 8010a0c:	3501      	adds	r5, #1
 8010a0e:	2300      	movs	r3, #0
 8010a10:	9517      	str	r5, [sp, #92]	; 0x5c
 8010a12:	930d      	str	r3, [sp, #52]	; 0x34
 8010a14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	f040 855e 	bne.w	80114d8 <_strtod_l+0xb48>
 8010a1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a1e:	b1eb      	cbz	r3, 8010a5c <_strtod_l+0xcc>
 8010a20:	ec4b ab17 	vmov	d7, sl, fp
 8010a24:	eeb1 0b47 	vneg.f64	d0, d7
 8010a28:	b01d      	add	sp, #116	; 0x74
 8010a2a:	ecbd 8b0c 	vpop	{d8-d13}
 8010a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a32:	2a2b      	cmp	r2, #43	; 0x2b
 8010a34:	d015      	beq.n	8010a62 <_strtod_l+0xd2>
 8010a36:	2a2d      	cmp	r2, #45	; 0x2d
 8010a38:	d004      	beq.n	8010a44 <_strtod_l+0xb4>
 8010a3a:	2a20      	cmp	r2, #32
 8010a3c:	d1c8      	bne.n	80109d0 <_strtod_l+0x40>
 8010a3e:	3301      	adds	r3, #1
 8010a40:	9317      	str	r3, [sp, #92]	; 0x5c
 8010a42:	e7bd      	b.n	80109c0 <_strtod_l+0x30>
 8010a44:	2201      	movs	r2, #1
 8010a46:	920d      	str	r2, [sp, #52]	; 0x34
 8010a48:	1c5a      	adds	r2, r3, #1
 8010a4a:	9217      	str	r2, [sp, #92]	; 0x5c
 8010a4c:	785b      	ldrb	r3, [r3, #1]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d1c0      	bne.n	80109d4 <_strtod_l+0x44>
 8010a52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010a54:	9617      	str	r6, [sp, #92]	; 0x5c
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	f040 853c 	bne.w	80114d4 <_strtod_l+0xb44>
 8010a5c:	ec4b ab10 	vmov	d0, sl, fp
 8010a60:	e7e2      	b.n	8010a28 <_strtod_l+0x98>
 8010a62:	2200      	movs	r2, #0
 8010a64:	e7ef      	b.n	8010a46 <_strtod_l+0xb6>
 8010a66:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010a68:	b13a      	cbz	r2, 8010a7a <_strtod_l+0xea>
 8010a6a:	2135      	movs	r1, #53	; 0x35
 8010a6c:	a81a      	add	r0, sp, #104	; 0x68
 8010a6e:	f002 fb1c 	bl	80130aa <__copybits>
 8010a72:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010a74:	4620      	mov	r0, r4
 8010a76:	f001 ff87 	bl	8012988 <_Bfree>
 8010a7a:	3e01      	subs	r6, #1
 8010a7c:	2e04      	cmp	r6, #4
 8010a7e:	d806      	bhi.n	8010a8e <_strtod_l+0xfe>
 8010a80:	e8df f006 	tbb	[pc, r6]
 8010a84:	1714030a 	.word	0x1714030a
 8010a88:	0a          	.byte	0x0a
 8010a89:	00          	.byte	0x00
 8010a8a:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8010a8e:	073b      	lsls	r3, r7, #28
 8010a90:	d5c0      	bpl.n	8010a14 <_strtod_l+0x84>
 8010a92:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010a96:	e7bd      	b.n	8010a14 <_strtod_l+0x84>
 8010a98:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010a9c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010a9e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010aa2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010aa6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010aaa:	e7f0      	b.n	8010a8e <_strtod_l+0xfe>
 8010aac:	f8df b188 	ldr.w	fp, [pc, #392]	; 8010c38 <_strtod_l+0x2a8>
 8010ab0:	e7ed      	b.n	8010a8e <_strtod_l+0xfe>
 8010ab2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010ab6:	f04f 3aff 	mov.w	sl, #4294967295
 8010aba:	e7e8      	b.n	8010a8e <_strtod_l+0xfe>
 8010abc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010abe:	1c5a      	adds	r2, r3, #1
 8010ac0:	9217      	str	r2, [sp, #92]	; 0x5c
 8010ac2:	785b      	ldrb	r3, [r3, #1]
 8010ac4:	2b30      	cmp	r3, #48	; 0x30
 8010ac6:	d0f9      	beq.n	8010abc <_strtod_l+0x12c>
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d0a3      	beq.n	8010a14 <_strtod_l+0x84>
 8010acc:	2301      	movs	r3, #1
 8010ace:	930a      	str	r3, [sp, #40]	; 0x28
 8010ad0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010ad2:	930c      	str	r3, [sp, #48]	; 0x30
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	9306      	str	r3, [sp, #24]
 8010ad8:	9308      	str	r3, [sp, #32]
 8010ada:	461d      	mov	r5, r3
 8010adc:	220a      	movs	r2, #10
 8010ade:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010ae0:	f890 8000 	ldrb.w	r8, [r0]
 8010ae4:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8010ae8:	b2d9      	uxtb	r1, r3
 8010aea:	2909      	cmp	r1, #9
 8010aec:	d92c      	bls.n	8010b48 <_strtod_l+0x1b8>
 8010aee:	463a      	mov	r2, r7
 8010af0:	f8d9 1000 	ldr.w	r1, [r9]
 8010af4:	f002 fe1d 	bl	8013732 <strncmp>
 8010af8:	2800      	cmp	r0, #0
 8010afa:	d035      	beq.n	8010b68 <_strtod_l+0x1d8>
 8010afc:	2000      	movs	r0, #0
 8010afe:	4642      	mov	r2, r8
 8010b00:	462b      	mov	r3, r5
 8010b02:	4601      	mov	r1, r0
 8010b04:	9004      	str	r0, [sp, #16]
 8010b06:	2a65      	cmp	r2, #101	; 0x65
 8010b08:	d001      	beq.n	8010b0e <_strtod_l+0x17e>
 8010b0a:	2a45      	cmp	r2, #69	; 0x45
 8010b0c:	d117      	bne.n	8010b3e <_strtod_l+0x1ae>
 8010b0e:	b923      	cbnz	r3, 8010b1a <_strtod_l+0x18a>
 8010b10:	b910      	cbnz	r0, 8010b18 <_strtod_l+0x188>
 8010b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d09c      	beq.n	8010a52 <_strtod_l+0xc2>
 8010b18:	2300      	movs	r3, #0
 8010b1a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010b1c:	1c72      	adds	r2, r6, #1
 8010b1e:	9217      	str	r2, [sp, #92]	; 0x5c
 8010b20:	7872      	ldrb	r2, [r6, #1]
 8010b22:	2a2b      	cmp	r2, #43	; 0x2b
 8010b24:	f000 8082 	beq.w	8010c2c <_strtod_l+0x29c>
 8010b28:	2a2d      	cmp	r2, #45	; 0x2d
 8010b2a:	d079      	beq.n	8010c20 <_strtod_l+0x290>
 8010b2c:	f04f 0e00 	mov.w	lr, #0
 8010b30:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8010b34:	f1bc 0f09 	cmp.w	ip, #9
 8010b38:	f240 8086 	bls.w	8010c48 <_strtod_l+0x2b8>
 8010b3c:	9617      	str	r6, [sp, #92]	; 0x5c
 8010b3e:	f04f 0800 	mov.w	r8, #0
 8010b42:	e0a8      	b.n	8010c96 <_strtod_l+0x306>
 8010b44:	2300      	movs	r3, #0
 8010b46:	e7c2      	b.n	8010ace <_strtod_l+0x13e>
 8010b48:	2d08      	cmp	r5, #8
 8010b4a:	bfd5      	itete	le
 8010b4c:	9908      	ldrle	r1, [sp, #32]
 8010b4e:	9906      	ldrgt	r1, [sp, #24]
 8010b50:	fb02 3301 	mlale	r3, r2, r1, r3
 8010b54:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010b58:	f100 0001 	add.w	r0, r0, #1
 8010b5c:	bfd4      	ite	le
 8010b5e:	9308      	strle	r3, [sp, #32]
 8010b60:	9306      	strgt	r3, [sp, #24]
 8010b62:	3501      	adds	r5, #1
 8010b64:	9017      	str	r0, [sp, #92]	; 0x5c
 8010b66:	e7ba      	b.n	8010ade <_strtod_l+0x14e>
 8010b68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010b6a:	19da      	adds	r2, r3, r7
 8010b6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8010b6e:	5dda      	ldrb	r2, [r3, r7]
 8010b70:	2d00      	cmp	r5, #0
 8010b72:	d038      	beq.n	8010be6 <_strtod_l+0x256>
 8010b74:	4601      	mov	r1, r0
 8010b76:	462b      	mov	r3, r5
 8010b78:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8010b7c:	2f09      	cmp	r7, #9
 8010b7e:	d913      	bls.n	8010ba8 <_strtod_l+0x218>
 8010b80:	2701      	movs	r7, #1
 8010b82:	9704      	str	r7, [sp, #16]
 8010b84:	e7bf      	b.n	8010b06 <_strtod_l+0x176>
 8010b86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010b88:	1c5a      	adds	r2, r3, #1
 8010b8a:	9217      	str	r2, [sp, #92]	; 0x5c
 8010b8c:	785a      	ldrb	r2, [r3, #1]
 8010b8e:	3001      	adds	r0, #1
 8010b90:	2a30      	cmp	r2, #48	; 0x30
 8010b92:	d0f8      	beq.n	8010b86 <_strtod_l+0x1f6>
 8010b94:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010b98:	2b08      	cmp	r3, #8
 8010b9a:	f200 84a2 	bhi.w	80114e2 <_strtod_l+0xb52>
 8010b9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010ba0:	930c      	str	r3, [sp, #48]	; 0x30
 8010ba2:	4601      	mov	r1, r0
 8010ba4:	2000      	movs	r0, #0
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 8010bac:	f100 0701 	add.w	r7, r0, #1
 8010bb0:	d013      	beq.n	8010bda <_strtod_l+0x24a>
 8010bb2:	4439      	add	r1, r7
 8010bb4:	eb00 0e03 	add.w	lr, r0, r3
 8010bb8:	461f      	mov	r7, r3
 8010bba:	f04f 0c0a 	mov.w	ip, #10
 8010bbe:	45be      	cmp	lr, r7
 8010bc0:	d113      	bne.n	8010bea <_strtod_l+0x25a>
 8010bc2:	181f      	adds	r7, r3, r0
 8010bc4:	2f08      	cmp	r7, #8
 8010bc6:	f103 0301 	add.w	r3, r3, #1
 8010bca:	4403      	add	r3, r0
 8010bcc:	dc1d      	bgt.n	8010c0a <_strtod_l+0x27a>
 8010bce:	9a08      	ldr	r2, [sp, #32]
 8010bd0:	200a      	movs	r0, #10
 8010bd2:	fb00 8202 	mla	r2, r0, r2, r8
 8010bd6:	9208      	str	r2, [sp, #32]
 8010bd8:	2700      	movs	r7, #0
 8010bda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010bdc:	1c50      	adds	r0, r2, #1
 8010bde:	9017      	str	r0, [sp, #92]	; 0x5c
 8010be0:	7852      	ldrb	r2, [r2, #1]
 8010be2:	4638      	mov	r0, r7
 8010be4:	e7c8      	b.n	8010b78 <_strtod_l+0x1e8>
 8010be6:	4628      	mov	r0, r5
 8010be8:	e7d2      	b.n	8010b90 <_strtod_l+0x200>
 8010bea:	2f08      	cmp	r7, #8
 8010bec:	f107 0701 	add.w	r7, r7, #1
 8010bf0:	dc04      	bgt.n	8010bfc <_strtod_l+0x26c>
 8010bf2:	9a08      	ldr	r2, [sp, #32]
 8010bf4:	fb0c f202 	mul.w	r2, ip, r2
 8010bf8:	9208      	str	r2, [sp, #32]
 8010bfa:	e7e0      	b.n	8010bbe <_strtod_l+0x22e>
 8010bfc:	2f10      	cmp	r7, #16
 8010bfe:	bfde      	ittt	le
 8010c00:	9a06      	ldrle	r2, [sp, #24]
 8010c02:	fb0c f202 	mulle.w	r2, ip, r2
 8010c06:	9206      	strle	r2, [sp, #24]
 8010c08:	e7d9      	b.n	8010bbe <_strtod_l+0x22e>
 8010c0a:	2b10      	cmp	r3, #16
 8010c0c:	bfdf      	itttt	le
 8010c0e:	9a06      	ldrle	r2, [sp, #24]
 8010c10:	200a      	movle	r0, #10
 8010c12:	fb00 8202 	mlale	r2, r0, r2, r8
 8010c16:	9206      	strle	r2, [sp, #24]
 8010c18:	e7de      	b.n	8010bd8 <_strtod_l+0x248>
 8010c1a:	2301      	movs	r3, #1
 8010c1c:	9304      	str	r3, [sp, #16]
 8010c1e:	e777      	b.n	8010b10 <_strtod_l+0x180>
 8010c20:	f04f 0e01 	mov.w	lr, #1
 8010c24:	1cb2      	adds	r2, r6, #2
 8010c26:	9217      	str	r2, [sp, #92]	; 0x5c
 8010c28:	78b2      	ldrb	r2, [r6, #2]
 8010c2a:	e781      	b.n	8010b30 <_strtod_l+0x1a0>
 8010c2c:	f04f 0e00 	mov.w	lr, #0
 8010c30:	e7f8      	b.n	8010c24 <_strtod_l+0x294>
 8010c32:	bf00      	nop
 8010c34:	080143dc 	.word	0x080143dc
 8010c38:	7ff00000 	.word	0x7ff00000
 8010c3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010c3e:	f102 0c01 	add.w	ip, r2, #1
 8010c42:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8010c46:	7852      	ldrb	r2, [r2, #1]
 8010c48:	2a30      	cmp	r2, #48	; 0x30
 8010c4a:	d0f7      	beq.n	8010c3c <_strtod_l+0x2ac>
 8010c4c:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 8010c50:	f1bc 0f08 	cmp.w	ip, #8
 8010c54:	f63f af73 	bhi.w	8010b3e <_strtod_l+0x1ae>
 8010c58:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 8010c5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010c5e:	920e      	str	r2, [sp, #56]	; 0x38
 8010c60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010c62:	f102 0c01 	add.w	ip, r2, #1
 8010c66:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8010c6a:	7852      	ldrb	r2, [r2, #1]
 8010c6c:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8010c70:	f1b9 0f09 	cmp.w	r9, #9
 8010c74:	d939      	bls.n	8010cea <_strtod_l+0x35a>
 8010c76:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8010c78:	ebac 0c07 	sub.w	ip, ip, r7
 8010c7c:	f1bc 0f08 	cmp.w	ip, #8
 8010c80:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 8010c84:	dc37      	bgt.n	8010cf6 <_strtod_l+0x366>
 8010c86:	45e0      	cmp	r8, ip
 8010c88:	bfa8      	it	ge
 8010c8a:	46e0      	movge	r8, ip
 8010c8c:	f1be 0f00 	cmp.w	lr, #0
 8010c90:	d001      	beq.n	8010c96 <_strtod_l+0x306>
 8010c92:	f1c8 0800 	rsb	r8, r8, #0
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d151      	bne.n	8010d3e <_strtod_l+0x3ae>
 8010c9a:	2800      	cmp	r0, #0
 8010c9c:	f47f aeba 	bne.w	8010a14 <_strtod_l+0x84>
 8010ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	f47f aeb6 	bne.w	8010a14 <_strtod_l+0x84>
 8010ca8:	9b04      	ldr	r3, [sp, #16]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	f47f aed1 	bne.w	8010a52 <_strtod_l+0xc2>
 8010cb0:	2a4e      	cmp	r2, #78	; 0x4e
 8010cb2:	d027      	beq.n	8010d04 <_strtod_l+0x374>
 8010cb4:	dc21      	bgt.n	8010cfa <_strtod_l+0x36a>
 8010cb6:	2a49      	cmp	r2, #73	; 0x49
 8010cb8:	f47f aecb 	bne.w	8010a52 <_strtod_l+0xc2>
 8010cbc:	499a      	ldr	r1, [pc, #616]	; (8010f28 <_strtod_l+0x598>)
 8010cbe:	a817      	add	r0, sp, #92	; 0x5c
 8010cc0:	f001 fd66 	bl	8012790 <__match>
 8010cc4:	2800      	cmp	r0, #0
 8010cc6:	f43f aec4 	beq.w	8010a52 <_strtod_l+0xc2>
 8010cca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010ccc:	4997      	ldr	r1, [pc, #604]	; (8010f2c <_strtod_l+0x59c>)
 8010cce:	3b01      	subs	r3, #1
 8010cd0:	a817      	add	r0, sp, #92	; 0x5c
 8010cd2:	9317      	str	r3, [sp, #92]	; 0x5c
 8010cd4:	f001 fd5c 	bl	8012790 <__match>
 8010cd8:	b910      	cbnz	r0, 8010ce0 <_strtod_l+0x350>
 8010cda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010cdc:	3301      	adds	r3, #1
 8010cde:	9317      	str	r3, [sp, #92]	; 0x5c
 8010ce0:	f8df b260 	ldr.w	fp, [pc, #608]	; 8010f44 <_strtod_l+0x5b4>
 8010ce4:	f04f 0a00 	mov.w	sl, #0
 8010ce8:	e694      	b.n	8010a14 <_strtod_l+0x84>
 8010cea:	270a      	movs	r7, #10
 8010cec:	fb07 2808 	mla	r8, r7, r8, r2
 8010cf0:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8010cf4:	e7b4      	b.n	8010c60 <_strtod_l+0x2d0>
 8010cf6:	46e0      	mov	r8, ip
 8010cf8:	e7c8      	b.n	8010c8c <_strtod_l+0x2fc>
 8010cfa:	2a69      	cmp	r2, #105	; 0x69
 8010cfc:	d0de      	beq.n	8010cbc <_strtod_l+0x32c>
 8010cfe:	2a6e      	cmp	r2, #110	; 0x6e
 8010d00:	f47f aea7 	bne.w	8010a52 <_strtod_l+0xc2>
 8010d04:	498a      	ldr	r1, [pc, #552]	; (8010f30 <_strtod_l+0x5a0>)
 8010d06:	a817      	add	r0, sp, #92	; 0x5c
 8010d08:	f001 fd42 	bl	8012790 <__match>
 8010d0c:	2800      	cmp	r0, #0
 8010d0e:	f43f aea0 	beq.w	8010a52 <_strtod_l+0xc2>
 8010d12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d14:	781b      	ldrb	r3, [r3, #0]
 8010d16:	2b28      	cmp	r3, #40	; 0x28
 8010d18:	d10e      	bne.n	8010d38 <_strtod_l+0x3a8>
 8010d1a:	aa1a      	add	r2, sp, #104	; 0x68
 8010d1c:	4985      	ldr	r1, [pc, #532]	; (8010f34 <_strtod_l+0x5a4>)
 8010d1e:	a817      	add	r0, sp, #92	; 0x5c
 8010d20:	f001 fd4a 	bl	80127b8 <__hexnan>
 8010d24:	2805      	cmp	r0, #5
 8010d26:	d107      	bne.n	8010d38 <_strtod_l+0x3a8>
 8010d28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010d2a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8010d2e:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010d32:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010d36:	e66d      	b.n	8010a14 <_strtod_l+0x84>
 8010d38:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8010f48 <_strtod_l+0x5b8>
 8010d3c:	e7d2      	b.n	8010ce4 <_strtod_l+0x354>
 8010d3e:	eddd 7a08 	vldr	s15, [sp, #32]
 8010d42:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010d46:	eba8 0201 	sub.w	r2, r8, r1
 8010d4a:	2d00      	cmp	r5, #0
 8010d4c:	bf08      	it	eq
 8010d4e:	461d      	moveq	r5, r3
 8010d50:	2b10      	cmp	r3, #16
 8010d52:	9204      	str	r2, [sp, #16]
 8010d54:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010d58:	461a      	mov	r2, r3
 8010d5a:	bfa8      	it	ge
 8010d5c:	2210      	movge	r2, #16
 8010d5e:	2b09      	cmp	r3, #9
 8010d60:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8010d64:	dc14      	bgt.n	8010d90 <_strtod_l+0x400>
 8010d66:	9904      	ldr	r1, [sp, #16]
 8010d68:	2900      	cmp	r1, #0
 8010d6a:	f43f ae53 	beq.w	8010a14 <_strtod_l+0x84>
 8010d6e:	9904      	ldr	r1, [sp, #16]
 8010d70:	dd72      	ble.n	8010e58 <_strtod_l+0x4c8>
 8010d72:	2916      	cmp	r1, #22
 8010d74:	dc5a      	bgt.n	8010e2c <_strtod_l+0x49c>
 8010d76:	4970      	ldr	r1, [pc, #448]	; (8010f38 <_strtod_l+0x5a8>)
 8010d78:	9b04      	ldr	r3, [sp, #16]
 8010d7a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010d7e:	ed91 7b00 	vldr	d7, [r1]
 8010d82:	ec4b ab16 	vmov	d6, sl, fp
 8010d86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d8a:	ec5b ab17 	vmov	sl, fp, d7
 8010d8e:	e641      	b.n	8010a14 <_strtod_l+0x84>
 8010d90:	4969      	ldr	r1, [pc, #420]	; (8010f38 <_strtod_l+0x5a8>)
 8010d92:	eddd 7a06 	vldr	s15, [sp, #24]
 8010d96:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010d9a:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8010d9e:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8010da2:	2b0f      	cmp	r3, #15
 8010da4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010da8:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010dac:	ec5b ab17 	vmov	sl, fp, d7
 8010db0:	ddd9      	ble.n	8010d66 <_strtod_l+0x3d6>
 8010db2:	9904      	ldr	r1, [sp, #16]
 8010db4:	1a9a      	subs	r2, r3, r2
 8010db6:	440a      	add	r2, r1
 8010db8:	2a00      	cmp	r2, #0
 8010dba:	f340 8096 	ble.w	8010eea <_strtod_l+0x55a>
 8010dbe:	f012 000f 	ands.w	r0, r2, #15
 8010dc2:	d00a      	beq.n	8010dda <_strtod_l+0x44a>
 8010dc4:	495c      	ldr	r1, [pc, #368]	; (8010f38 <_strtod_l+0x5a8>)
 8010dc6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010dca:	ed91 7b00 	vldr	d7, [r1]
 8010dce:	ec4b ab16 	vmov	d6, sl, fp
 8010dd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010dd6:	ec5b ab17 	vmov	sl, fp, d7
 8010dda:	f032 020f 	bics.w	r2, r2, #15
 8010dde:	d072      	beq.n	8010ec6 <_strtod_l+0x536>
 8010de0:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8010de4:	dd45      	ble.n	8010e72 <_strtod_l+0x4e2>
 8010de6:	2500      	movs	r5, #0
 8010de8:	46a8      	mov	r8, r5
 8010dea:	9506      	str	r5, [sp, #24]
 8010dec:	46a9      	mov	r9, r5
 8010dee:	2322      	movs	r3, #34	; 0x22
 8010df0:	f8df b150 	ldr.w	fp, [pc, #336]	; 8010f44 <_strtod_l+0x5b4>
 8010df4:	6023      	str	r3, [r4, #0]
 8010df6:	f04f 0a00 	mov.w	sl, #0
 8010dfa:	9b06      	ldr	r3, [sp, #24]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	f43f ae09 	beq.w	8010a14 <_strtod_l+0x84>
 8010e02:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010e04:	4620      	mov	r0, r4
 8010e06:	f001 fdbf 	bl	8012988 <_Bfree>
 8010e0a:	4649      	mov	r1, r9
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	f001 fdbb 	bl	8012988 <_Bfree>
 8010e12:	4641      	mov	r1, r8
 8010e14:	4620      	mov	r0, r4
 8010e16:	f001 fdb7 	bl	8012988 <_Bfree>
 8010e1a:	9906      	ldr	r1, [sp, #24]
 8010e1c:	4620      	mov	r0, r4
 8010e1e:	f001 fdb3 	bl	8012988 <_Bfree>
 8010e22:	4629      	mov	r1, r5
 8010e24:	4620      	mov	r0, r4
 8010e26:	f001 fdaf 	bl	8012988 <_Bfree>
 8010e2a:	e5f3      	b.n	8010a14 <_strtod_l+0x84>
 8010e2c:	9804      	ldr	r0, [sp, #16]
 8010e2e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8010e32:	4281      	cmp	r1, r0
 8010e34:	dbbd      	blt.n	8010db2 <_strtod_l+0x422>
 8010e36:	4a40      	ldr	r2, [pc, #256]	; (8010f38 <_strtod_l+0x5a8>)
 8010e38:	f1c3 030f 	rsb	r3, r3, #15
 8010e3c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8010e40:	ed91 7b00 	vldr	d7, [r1]
 8010e44:	ec4b ab16 	vmov	d6, sl, fp
 8010e48:	1ac3      	subs	r3, r0, r3
 8010e4a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010e4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e52:	ed92 6b00 	vldr	d6, [r2]
 8010e56:	e796      	b.n	8010d86 <_strtod_l+0x3f6>
 8010e58:	3116      	adds	r1, #22
 8010e5a:	dbaa      	blt.n	8010db2 <_strtod_l+0x422>
 8010e5c:	4936      	ldr	r1, [pc, #216]	; (8010f38 <_strtod_l+0x5a8>)
 8010e5e:	9b04      	ldr	r3, [sp, #16]
 8010e60:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8010e64:	ed91 7b00 	vldr	d7, [r1]
 8010e68:	ec4b ab16 	vmov	d6, sl, fp
 8010e6c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010e70:	e78b      	b.n	8010d8a <_strtod_l+0x3fa>
 8010e72:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8010e76:	2000      	movs	r0, #0
 8010e78:	4e30      	ldr	r6, [pc, #192]	; (8010f3c <_strtod_l+0x5ac>)
 8010e7a:	1112      	asrs	r2, r2, #4
 8010e7c:	4601      	mov	r1, r0
 8010e7e:	2a01      	cmp	r2, #1
 8010e80:	dc23      	bgt.n	8010eca <_strtod_l+0x53a>
 8010e82:	b108      	cbz	r0, 8010e88 <_strtod_l+0x4f8>
 8010e84:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8010e88:	4a2c      	ldr	r2, [pc, #176]	; (8010f3c <_strtod_l+0x5ac>)
 8010e8a:	482d      	ldr	r0, [pc, #180]	; (8010f40 <_strtod_l+0x5b0>)
 8010e8c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8010e90:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010e94:	ed91 7b00 	vldr	d7, [r1]
 8010e98:	ec4b ab16 	vmov	d6, sl, fp
 8010e9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010ea0:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010ea4:	9907      	ldr	r1, [sp, #28]
 8010ea6:	4a27      	ldr	r2, [pc, #156]	; (8010f44 <_strtod_l+0x5b4>)
 8010ea8:	400a      	ands	r2, r1
 8010eaa:	4282      	cmp	r2, r0
 8010eac:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8010eb0:	d899      	bhi.n	8010de6 <_strtod_l+0x456>
 8010eb2:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8010eb6:	4282      	cmp	r2, r0
 8010eb8:	bf86      	itte	hi
 8010eba:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 8010f4c <_strtod_l+0x5bc>
 8010ebe:	f04f 3aff 	movhi.w	sl, #4294967295
 8010ec2:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 8010ec6:	2700      	movs	r7, #0
 8010ec8:	e070      	b.n	8010fac <_strtod_l+0x61c>
 8010eca:	07d7      	lsls	r7, r2, #31
 8010ecc:	d50a      	bpl.n	8010ee4 <_strtod_l+0x554>
 8010ece:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 8010ed2:	ed90 7b00 	vldr	d7, [r0]
 8010ed6:	ed9d 6b06 	vldr	d6, [sp, #24]
 8010eda:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010ede:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010ee2:	2001      	movs	r0, #1
 8010ee4:	3101      	adds	r1, #1
 8010ee6:	1052      	asrs	r2, r2, #1
 8010ee8:	e7c9      	b.n	8010e7e <_strtod_l+0x4ee>
 8010eea:	d0ec      	beq.n	8010ec6 <_strtod_l+0x536>
 8010eec:	4252      	negs	r2, r2
 8010eee:	f012 000f 	ands.w	r0, r2, #15
 8010ef2:	d00a      	beq.n	8010f0a <_strtod_l+0x57a>
 8010ef4:	4910      	ldr	r1, [pc, #64]	; (8010f38 <_strtod_l+0x5a8>)
 8010ef6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010efa:	ed91 7b00 	vldr	d7, [r1]
 8010efe:	ec4b ab16 	vmov	d6, sl, fp
 8010f02:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010f06:	ec5b ab17 	vmov	sl, fp, d7
 8010f0a:	1112      	asrs	r2, r2, #4
 8010f0c:	d0db      	beq.n	8010ec6 <_strtod_l+0x536>
 8010f0e:	2a1f      	cmp	r2, #31
 8010f10:	dd1e      	ble.n	8010f50 <_strtod_l+0x5c0>
 8010f12:	2500      	movs	r5, #0
 8010f14:	46a8      	mov	r8, r5
 8010f16:	9506      	str	r5, [sp, #24]
 8010f18:	46a9      	mov	r9, r5
 8010f1a:	2322      	movs	r3, #34	; 0x22
 8010f1c:	f04f 0a00 	mov.w	sl, #0
 8010f20:	f04f 0b00 	mov.w	fp, #0
 8010f24:	6023      	str	r3, [r4, #0]
 8010f26:	e768      	b.n	8010dfa <_strtod_l+0x46a>
 8010f28:	080143ad 	.word	0x080143ad
 8010f2c:	08014433 	.word	0x08014433
 8010f30:	080143b5 	.word	0x080143b5
 8010f34:	080143f0 	.word	0x080143f0
 8010f38:	080144d8 	.word	0x080144d8
 8010f3c:	080144b0 	.word	0x080144b0
 8010f40:	7ca00000 	.word	0x7ca00000
 8010f44:	7ff00000 	.word	0x7ff00000
 8010f48:	fff80000 	.word	0xfff80000
 8010f4c:	7fefffff 	.word	0x7fefffff
 8010f50:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8010f54:	f012 0710 	ands.w	r7, r2, #16
 8010f58:	49ab      	ldr	r1, [pc, #684]	; (8011208 <_strtod_l+0x878>)
 8010f5a:	bf18      	it	ne
 8010f5c:	276a      	movne	r7, #106	; 0x6a
 8010f5e:	2000      	movs	r0, #0
 8010f60:	2a00      	cmp	r2, #0
 8010f62:	f300 8113 	bgt.w	801118c <_strtod_l+0x7fc>
 8010f66:	b108      	cbz	r0, 8010f6c <_strtod_l+0x5dc>
 8010f68:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8010f6c:	b1bf      	cbz	r7, 8010f9e <_strtod_l+0x60e>
 8010f6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010f72:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8010f76:	2a00      	cmp	r2, #0
 8010f78:	4659      	mov	r1, fp
 8010f7a:	dd10      	ble.n	8010f9e <_strtod_l+0x60e>
 8010f7c:	2a1f      	cmp	r2, #31
 8010f7e:	f340 8113 	ble.w	80111a8 <_strtod_l+0x818>
 8010f82:	2a34      	cmp	r2, #52	; 0x34
 8010f84:	bfde      	ittt	le
 8010f86:	3a20      	suble	r2, #32
 8010f88:	f04f 30ff 	movle.w	r0, #4294967295
 8010f8c:	fa00 f202 	lslle.w	r2, r0, r2
 8010f90:	f04f 0a00 	mov.w	sl, #0
 8010f94:	bfcc      	ite	gt
 8010f96:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010f9a:	ea02 0b01 	andle.w	fp, r2, r1
 8010f9e:	ec4b ab17 	vmov	d7, sl, fp
 8010fa2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010faa:	d0b2      	beq.n	8010f12 <_strtod_l+0x582>
 8010fac:	9a08      	ldr	r2, [sp, #32]
 8010fae:	9200      	str	r2, [sp, #0]
 8010fb0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010fb2:	462a      	mov	r2, r5
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	f001 fd39 	bl	8012a2c <__s2b>
 8010fba:	9006      	str	r0, [sp, #24]
 8010fbc:	2800      	cmp	r0, #0
 8010fbe:	f43f af12 	beq.w	8010de6 <_strtod_l+0x456>
 8010fc2:	9a04      	ldr	r2, [sp, #16]
 8010fc4:	9b04      	ldr	r3, [sp, #16]
 8010fc6:	2a00      	cmp	r2, #0
 8010fc8:	f1c3 0300 	rsb	r3, r3, #0
 8010fcc:	ed9f 9b88 	vldr	d9, [pc, #544]	; 80111f0 <_strtod_l+0x860>
 8010fd0:	bfa8      	it	ge
 8010fd2:	2300      	movge	r3, #0
 8010fd4:	ed9f ab88 	vldr	d10, [pc, #544]	; 80111f8 <_strtod_l+0x868>
 8010fd8:	ed9f bb89 	vldr	d11, [pc, #548]	; 8011200 <_strtod_l+0x870>
 8010fdc:	930e      	str	r3, [sp, #56]	; 0x38
 8010fde:	2500      	movs	r5, #0
 8010fe0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010fe4:	9310      	str	r3, [sp, #64]	; 0x40
 8010fe6:	46a8      	mov	r8, r5
 8010fe8:	9b06      	ldr	r3, [sp, #24]
 8010fea:	4620      	mov	r0, r4
 8010fec:	6859      	ldr	r1, [r3, #4]
 8010fee:	f001 fc97 	bl	8012920 <_Balloc>
 8010ff2:	4681      	mov	r9, r0
 8010ff4:	2800      	cmp	r0, #0
 8010ff6:	f43f aefa 	beq.w	8010dee <_strtod_l+0x45e>
 8010ffa:	9b06      	ldr	r3, [sp, #24]
 8010ffc:	691a      	ldr	r2, [r3, #16]
 8010ffe:	3202      	adds	r2, #2
 8011000:	f103 010c 	add.w	r1, r3, #12
 8011004:	0092      	lsls	r2, r2, #2
 8011006:	300c      	adds	r0, #12
 8011008:	f7fe ff66 	bl	800fed8 <memcpy>
 801100c:	aa1a      	add	r2, sp, #104	; 0x68
 801100e:	a919      	add	r1, sp, #100	; 0x64
 8011010:	ec4b ab10 	vmov	d0, sl, fp
 8011014:	4620      	mov	r0, r4
 8011016:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801101a:	f001 ffc3 	bl	8012fa4 <__d2b>
 801101e:	9018      	str	r0, [sp, #96]	; 0x60
 8011020:	2800      	cmp	r0, #0
 8011022:	f43f aee4 	beq.w	8010dee <_strtod_l+0x45e>
 8011026:	2101      	movs	r1, #1
 8011028:	4620      	mov	r0, r4
 801102a:	f001 fd8b 	bl	8012b44 <__i2b>
 801102e:	4680      	mov	r8, r0
 8011030:	2800      	cmp	r0, #0
 8011032:	f43f aedc 	beq.w	8010dee <_strtod_l+0x45e>
 8011036:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8011038:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801103a:	2e00      	cmp	r6, #0
 801103c:	bfb1      	iteee	lt
 801103e:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8011040:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011042:	9810      	ldrge	r0, [sp, #64]	; 0x40
 8011044:	18f3      	addge	r3, r6, r3
 8011046:	bfba      	itte	lt
 8011048:	1b98      	sublt	r0, r3, r6
 801104a:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801104c:	9308      	strge	r3, [sp, #32]
 801104e:	eba6 0607 	sub.w	r6, r6, r7
 8011052:	bfb8      	it	lt
 8011054:	9308      	strlt	r3, [sp, #32]
 8011056:	4416      	add	r6, r2
 8011058:	4b6c      	ldr	r3, [pc, #432]	; (801120c <_strtod_l+0x87c>)
 801105a:	3e01      	subs	r6, #1
 801105c:	429e      	cmp	r6, r3
 801105e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011062:	f280 80b4 	bge.w	80111ce <_strtod_l+0x83e>
 8011066:	1b9b      	subs	r3, r3, r6
 8011068:	2b1f      	cmp	r3, #31
 801106a:	eba2 0203 	sub.w	r2, r2, r3
 801106e:	f04f 0101 	mov.w	r1, #1
 8011072:	f300 80a0 	bgt.w	80111b6 <_strtod_l+0x826>
 8011076:	fa01 f303 	lsl.w	r3, r1, r3
 801107a:	9311      	str	r3, [sp, #68]	; 0x44
 801107c:	2300      	movs	r3, #0
 801107e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011080:	9b08      	ldr	r3, [sp, #32]
 8011082:	4413      	add	r3, r2
 8011084:	4402      	add	r2, r0
 8011086:	18be      	adds	r6, r7, r2
 8011088:	9a08      	ldr	r2, [sp, #32]
 801108a:	429a      	cmp	r2, r3
 801108c:	bfa8      	it	ge
 801108e:	461a      	movge	r2, r3
 8011090:	42b2      	cmp	r2, r6
 8011092:	bfa8      	it	ge
 8011094:	4632      	movge	r2, r6
 8011096:	2a00      	cmp	r2, #0
 8011098:	dd04      	ble.n	80110a4 <_strtod_l+0x714>
 801109a:	9908      	ldr	r1, [sp, #32]
 801109c:	1a9b      	subs	r3, r3, r2
 801109e:	1ab6      	subs	r6, r6, r2
 80110a0:	1a8a      	subs	r2, r1, r2
 80110a2:	9208      	str	r2, [sp, #32]
 80110a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80110a6:	b1c2      	cbz	r2, 80110da <_strtod_l+0x74a>
 80110a8:	4641      	mov	r1, r8
 80110aa:	4620      	mov	r0, r4
 80110ac:	9315      	str	r3, [sp, #84]	; 0x54
 80110ae:	f001 fde9 	bl	8012c84 <__pow5mult>
 80110b2:	4680      	mov	r8, r0
 80110b4:	2800      	cmp	r0, #0
 80110b6:	f43f ae9a 	beq.w	8010dee <_strtod_l+0x45e>
 80110ba:	4601      	mov	r1, r0
 80110bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80110be:	4620      	mov	r0, r4
 80110c0:	f001 fd49 	bl	8012b56 <__multiply>
 80110c4:	900c      	str	r0, [sp, #48]	; 0x30
 80110c6:	2800      	cmp	r0, #0
 80110c8:	f43f ae91 	beq.w	8010dee <_strtod_l+0x45e>
 80110cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80110ce:	4620      	mov	r0, r4
 80110d0:	f001 fc5a 	bl	8012988 <_Bfree>
 80110d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80110d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80110d8:	9218      	str	r2, [sp, #96]	; 0x60
 80110da:	2b00      	cmp	r3, #0
 80110dc:	dc7c      	bgt.n	80111d8 <_strtod_l+0x848>
 80110de:	9b04      	ldr	r3, [sp, #16]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	dd08      	ble.n	80110f6 <_strtod_l+0x766>
 80110e4:	4649      	mov	r1, r9
 80110e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80110e8:	4620      	mov	r0, r4
 80110ea:	f001 fdcb 	bl	8012c84 <__pow5mult>
 80110ee:	4681      	mov	r9, r0
 80110f0:	2800      	cmp	r0, #0
 80110f2:	f43f ae7c 	beq.w	8010dee <_strtod_l+0x45e>
 80110f6:	2e00      	cmp	r6, #0
 80110f8:	dd08      	ble.n	801110c <_strtod_l+0x77c>
 80110fa:	4649      	mov	r1, r9
 80110fc:	4632      	mov	r2, r6
 80110fe:	4620      	mov	r0, r4
 8011100:	f001 fe0e 	bl	8012d20 <__lshift>
 8011104:	4681      	mov	r9, r0
 8011106:	2800      	cmp	r0, #0
 8011108:	f43f ae71 	beq.w	8010dee <_strtod_l+0x45e>
 801110c:	9b08      	ldr	r3, [sp, #32]
 801110e:	2b00      	cmp	r3, #0
 8011110:	dd08      	ble.n	8011124 <_strtod_l+0x794>
 8011112:	4641      	mov	r1, r8
 8011114:	461a      	mov	r2, r3
 8011116:	4620      	mov	r0, r4
 8011118:	f001 fe02 	bl	8012d20 <__lshift>
 801111c:	4680      	mov	r8, r0
 801111e:	2800      	cmp	r0, #0
 8011120:	f43f ae65 	beq.w	8010dee <_strtod_l+0x45e>
 8011124:	464a      	mov	r2, r9
 8011126:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011128:	4620      	mov	r0, r4
 801112a:	f001 fe67 	bl	8012dfc <__mdiff>
 801112e:	4605      	mov	r5, r0
 8011130:	2800      	cmp	r0, #0
 8011132:	f43f ae5c 	beq.w	8010dee <_strtod_l+0x45e>
 8011136:	68c3      	ldr	r3, [r0, #12]
 8011138:	930c      	str	r3, [sp, #48]	; 0x30
 801113a:	2300      	movs	r3, #0
 801113c:	60c3      	str	r3, [r0, #12]
 801113e:	4641      	mov	r1, r8
 8011140:	f001 fe42 	bl	8012dc8 <__mcmp>
 8011144:	2800      	cmp	r0, #0
 8011146:	da63      	bge.n	8011210 <_strtod_l+0x880>
 8011148:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801114a:	b9e3      	cbnz	r3, 8011186 <_strtod_l+0x7f6>
 801114c:	f1ba 0f00 	cmp.w	sl, #0
 8011150:	d119      	bne.n	8011186 <_strtod_l+0x7f6>
 8011152:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011156:	b9b3      	cbnz	r3, 8011186 <_strtod_l+0x7f6>
 8011158:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801115c:	0d1b      	lsrs	r3, r3, #20
 801115e:	051b      	lsls	r3, r3, #20
 8011160:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011164:	d90f      	bls.n	8011186 <_strtod_l+0x7f6>
 8011166:	696b      	ldr	r3, [r5, #20]
 8011168:	b913      	cbnz	r3, 8011170 <_strtod_l+0x7e0>
 801116a:	692b      	ldr	r3, [r5, #16]
 801116c:	2b01      	cmp	r3, #1
 801116e:	dd0a      	ble.n	8011186 <_strtod_l+0x7f6>
 8011170:	4629      	mov	r1, r5
 8011172:	2201      	movs	r2, #1
 8011174:	4620      	mov	r0, r4
 8011176:	f001 fdd3 	bl	8012d20 <__lshift>
 801117a:	4641      	mov	r1, r8
 801117c:	4605      	mov	r5, r0
 801117e:	f001 fe23 	bl	8012dc8 <__mcmp>
 8011182:	2800      	cmp	r0, #0
 8011184:	dc75      	bgt.n	8011272 <_strtod_l+0x8e2>
 8011186:	2f00      	cmp	r7, #0
 8011188:	d17f      	bne.n	801128a <_strtod_l+0x8fa>
 801118a:	e63a      	b.n	8010e02 <_strtod_l+0x472>
 801118c:	07d6      	lsls	r6, r2, #31
 801118e:	d508      	bpl.n	80111a2 <_strtod_l+0x812>
 8011190:	ed9d 6b06 	vldr	d6, [sp, #24]
 8011194:	ed91 7b00 	vldr	d7, [r1]
 8011198:	ee26 7b07 	vmul.f64	d7, d6, d7
 801119c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80111a0:	2001      	movs	r0, #1
 80111a2:	1052      	asrs	r2, r2, #1
 80111a4:	3108      	adds	r1, #8
 80111a6:	e6db      	b.n	8010f60 <_strtod_l+0x5d0>
 80111a8:	f04f 31ff 	mov.w	r1, #4294967295
 80111ac:	fa01 f202 	lsl.w	r2, r1, r2
 80111b0:	ea02 0a0a 	and.w	sl, r2, sl
 80111b4:	e6f3      	b.n	8010f9e <_strtod_l+0x60e>
 80111b6:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80111ba:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80111be:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80111c2:	36e2      	adds	r6, #226	; 0xe2
 80111c4:	fa01 f306 	lsl.w	r3, r1, r6
 80111c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80111ca:	9111      	str	r1, [sp, #68]	; 0x44
 80111cc:	e758      	b.n	8011080 <_strtod_l+0x6f0>
 80111ce:	2300      	movs	r3, #0
 80111d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80111d2:	2301      	movs	r3, #1
 80111d4:	9311      	str	r3, [sp, #68]	; 0x44
 80111d6:	e753      	b.n	8011080 <_strtod_l+0x6f0>
 80111d8:	461a      	mov	r2, r3
 80111da:	9918      	ldr	r1, [sp, #96]	; 0x60
 80111dc:	4620      	mov	r0, r4
 80111de:	f001 fd9f 	bl	8012d20 <__lshift>
 80111e2:	9018      	str	r0, [sp, #96]	; 0x60
 80111e4:	2800      	cmp	r0, #0
 80111e6:	f47f af7a 	bne.w	80110de <_strtod_l+0x74e>
 80111ea:	e600      	b.n	8010dee <_strtod_l+0x45e>
 80111ec:	f3af 8000 	nop.w
 80111f0:	94a03595 	.word	0x94a03595
 80111f4:	3fdfffff 	.word	0x3fdfffff
 80111f8:	35afe535 	.word	0x35afe535
 80111fc:	3fe00000 	.word	0x3fe00000
 8011200:	94a03595 	.word	0x94a03595
 8011204:	3fcfffff 	.word	0x3fcfffff
 8011208:	08014408 	.word	0x08014408
 801120c:	fffffc02 	.word	0xfffffc02
 8011210:	f8cd b020 	str.w	fp, [sp, #32]
 8011214:	f040 8085 	bne.w	8011322 <_strtod_l+0x992>
 8011218:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801121a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801121e:	b322      	cbz	r2, 801126a <_strtod_l+0x8da>
 8011220:	4ab7      	ldr	r2, [pc, #732]	; (8011500 <_strtod_l+0xb70>)
 8011222:	4293      	cmp	r3, r2
 8011224:	d154      	bne.n	80112d0 <_strtod_l+0x940>
 8011226:	4651      	mov	r1, sl
 8011228:	b1e7      	cbz	r7, 8011264 <_strtod_l+0x8d4>
 801122a:	4bb6      	ldr	r3, [pc, #728]	; (8011504 <_strtod_l+0xb74>)
 801122c:	465a      	mov	r2, fp
 801122e:	4013      	ands	r3, r2
 8011230:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011234:	f04f 32ff 	mov.w	r2, #4294967295
 8011238:	d803      	bhi.n	8011242 <_strtod_l+0x8b2>
 801123a:	0d1b      	lsrs	r3, r3, #20
 801123c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011240:	409a      	lsls	r2, r3
 8011242:	4291      	cmp	r1, r2
 8011244:	d144      	bne.n	80112d0 <_strtod_l+0x940>
 8011246:	4bb0      	ldr	r3, [pc, #704]	; (8011508 <_strtod_l+0xb78>)
 8011248:	9a08      	ldr	r2, [sp, #32]
 801124a:	429a      	cmp	r2, r3
 801124c:	d102      	bne.n	8011254 <_strtod_l+0x8c4>
 801124e:	3101      	adds	r1, #1
 8011250:	f43f adcd 	beq.w	8010dee <_strtod_l+0x45e>
 8011254:	4bab      	ldr	r3, [pc, #684]	; (8011504 <_strtod_l+0xb74>)
 8011256:	9a08      	ldr	r2, [sp, #32]
 8011258:	401a      	ands	r2, r3
 801125a:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 801125e:	f04f 0a00 	mov.w	sl, #0
 8011262:	e790      	b.n	8011186 <_strtod_l+0x7f6>
 8011264:	f04f 32ff 	mov.w	r2, #4294967295
 8011268:	e7eb      	b.n	8011242 <_strtod_l+0x8b2>
 801126a:	bb8b      	cbnz	r3, 80112d0 <_strtod_l+0x940>
 801126c:	f1ba 0f00 	cmp.w	sl, #0
 8011270:	d12e      	bne.n	80112d0 <_strtod_l+0x940>
 8011272:	465b      	mov	r3, fp
 8011274:	4aa3      	ldr	r2, [pc, #652]	; (8011504 <_strtod_l+0xb74>)
 8011276:	b30f      	cbz	r7, 80112bc <_strtod_l+0x92c>
 8011278:	ea02 010b 	and.w	r1, r2, fp
 801127c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011280:	dc1c      	bgt.n	80112bc <_strtod_l+0x92c>
 8011282:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011286:	f77f ae48 	ble.w	8010f1a <_strtod_l+0x58a>
 801128a:	4aa0      	ldr	r2, [pc, #640]	; (801150c <_strtod_l+0xb7c>)
 801128c:	2300      	movs	r3, #0
 801128e:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 8011292:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 8011296:	ec4b ab17 	vmov	d7, sl, fp
 801129a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801129e:	ed8d 7b04 	vstr	d7, [sp, #16]
 80112a2:	9b05      	ldr	r3, [sp, #20]
 80112a4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	f47f adaa 	bne.w	8010e02 <_strtod_l+0x472>
 80112ae:	9b04      	ldr	r3, [sp, #16]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	f47f ada6 	bne.w	8010e02 <_strtod_l+0x472>
 80112b6:	2322      	movs	r3, #34	; 0x22
 80112b8:	6023      	str	r3, [r4, #0]
 80112ba:	e5a2      	b.n	8010e02 <_strtod_l+0x472>
 80112bc:	4013      	ands	r3, r2
 80112be:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80112c2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80112c6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80112ca:	f04f 3aff 	mov.w	sl, #4294967295
 80112ce:	e75a      	b.n	8011186 <_strtod_l+0x7f6>
 80112d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80112d2:	b18b      	cbz	r3, 80112f8 <_strtod_l+0x968>
 80112d4:	9a08      	ldr	r2, [sp, #32]
 80112d6:	4213      	tst	r3, r2
 80112d8:	f43f af55 	beq.w	8011186 <_strtod_l+0x7f6>
 80112dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80112de:	463a      	mov	r2, r7
 80112e0:	4650      	mov	r0, sl
 80112e2:	4659      	mov	r1, fp
 80112e4:	b163      	cbz	r3, 8011300 <_strtod_l+0x970>
 80112e6:	f7ff fb37 	bl	8010958 <sulp>
 80112ea:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80112ee:	ee37 7b00 	vadd.f64	d7, d7, d0
 80112f2:	ec5b ab17 	vmov	sl, fp, d7
 80112f6:	e746      	b.n	8011186 <_strtod_l+0x7f6>
 80112f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80112fa:	ea13 0f0a 	tst.w	r3, sl
 80112fe:	e7eb      	b.n	80112d8 <_strtod_l+0x948>
 8011300:	f7ff fb2a 	bl	8010958 <sulp>
 8011304:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8011308:	ee37 7b40 	vsub.f64	d7, d7, d0
 801130c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011310:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011318:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801131c:	f43f adfd 	beq.w	8010f1a <_strtod_l+0x58a>
 8011320:	e731      	b.n	8011186 <_strtod_l+0x7f6>
 8011322:	4641      	mov	r1, r8
 8011324:	4628      	mov	r0, r5
 8011326:	f001 fe8c 	bl	8013042 <__ratio>
 801132a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801132e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011336:	d869      	bhi.n	801140c <_strtod_l+0xa7c>
 8011338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801133a:	2b00      	cmp	r3, #0
 801133c:	d045      	beq.n	80113ca <_strtod_l+0xa3a>
 801133e:	4b74      	ldr	r3, [pc, #464]	; (8011510 <_strtod_l+0xb80>)
 8011340:	2200      	movs	r2, #0
 8011342:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8011346:	9808      	ldr	r0, [sp, #32]
 8011348:	496e      	ldr	r1, [pc, #440]	; (8011504 <_strtod_l+0xb74>)
 801134a:	ea00 0601 	and.w	r6, r0, r1
 801134e:	4871      	ldr	r0, [pc, #452]	; (8011514 <_strtod_l+0xb84>)
 8011350:	4286      	cmp	r6, r0
 8011352:	f040 8089 	bne.w	8011468 <_strtod_l+0xad8>
 8011356:	910f      	str	r1, [sp, #60]	; 0x3c
 8011358:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801135c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8011360:	9908      	ldr	r1, [sp, #32]
 8011362:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8011366:	ec4b ab10 	vmov	d0, sl, fp
 801136a:	ec43 2b1c 	vmov	d12, r2, r3
 801136e:	f001 fda3 	bl	8012eb8 <__ulp>
 8011372:	ec4b ab1d 	vmov	d13, sl, fp
 8011376:	eeac db00 	vfma.f64	d13, d12, d0
 801137a:	ed8d db08 	vstr	d13, [sp, #32]
 801137e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011380:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011382:	4a65      	ldr	r2, [pc, #404]	; (8011518 <_strtod_l+0xb88>)
 8011384:	4019      	ands	r1, r3
 8011386:	4291      	cmp	r1, r2
 8011388:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 801138c:	d948      	bls.n	8011420 <_strtod_l+0xa90>
 801138e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011390:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011394:	4293      	cmp	r3, r2
 8011396:	d103      	bne.n	80113a0 <_strtod_l+0xa10>
 8011398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801139a:	3301      	adds	r3, #1
 801139c:	f43f ad27 	beq.w	8010dee <_strtod_l+0x45e>
 80113a0:	f8df b164 	ldr.w	fp, [pc, #356]	; 8011508 <_strtod_l+0xb78>
 80113a4:	f04f 3aff 	mov.w	sl, #4294967295
 80113a8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80113aa:	4620      	mov	r0, r4
 80113ac:	f001 faec 	bl	8012988 <_Bfree>
 80113b0:	4649      	mov	r1, r9
 80113b2:	4620      	mov	r0, r4
 80113b4:	f001 fae8 	bl	8012988 <_Bfree>
 80113b8:	4641      	mov	r1, r8
 80113ba:	4620      	mov	r0, r4
 80113bc:	f001 fae4 	bl	8012988 <_Bfree>
 80113c0:	4629      	mov	r1, r5
 80113c2:	4620      	mov	r0, r4
 80113c4:	f001 fae0 	bl	8012988 <_Bfree>
 80113c8:	e60e      	b.n	8010fe8 <_strtod_l+0x658>
 80113ca:	f1ba 0f00 	cmp.w	sl, #0
 80113ce:	d113      	bne.n	80113f8 <_strtod_l+0xa68>
 80113d0:	9b08      	ldr	r3, [sp, #32]
 80113d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80113d6:	b9b3      	cbnz	r3, 8011406 <_strtod_l+0xa76>
 80113d8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80113dc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80113e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113e4:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80113e8:	d401      	bmi.n	80113ee <_strtod_l+0xa5e>
 80113ea:	ee20 8b08 	vmul.f64	d8, d0, d8
 80113ee:	eeb1 7b48 	vneg.f64	d7, d8
 80113f2:	ec53 2b17 	vmov	r2, r3, d7
 80113f6:	e7a6      	b.n	8011346 <_strtod_l+0x9b6>
 80113f8:	f1ba 0f01 	cmp.w	sl, #1
 80113fc:	d103      	bne.n	8011406 <_strtod_l+0xa76>
 80113fe:	9b08      	ldr	r3, [sp, #32]
 8011400:	2b00      	cmp	r3, #0
 8011402:	f43f ad8a 	beq.w	8010f1a <_strtod_l+0x58a>
 8011406:	2200      	movs	r2, #0
 8011408:	4b44      	ldr	r3, [pc, #272]	; (801151c <_strtod_l+0xb8c>)
 801140a:	e79a      	b.n	8011342 <_strtod_l+0x9b2>
 801140c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801140e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011412:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011416:	2b00      	cmp	r3, #0
 8011418:	d0e9      	beq.n	80113ee <_strtod_l+0xa5e>
 801141a:	ec53 2b18 	vmov	r2, r3, d8
 801141e:	e792      	b.n	8011346 <_strtod_l+0x9b6>
 8011420:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011424:	2f00      	cmp	r7, #0
 8011426:	d1bf      	bne.n	80113a8 <_strtod_l+0xa18>
 8011428:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801142c:	0d1b      	lsrs	r3, r3, #20
 801142e:	051b      	lsls	r3, r3, #20
 8011430:	429e      	cmp	r6, r3
 8011432:	d1b9      	bne.n	80113a8 <_strtod_l+0xa18>
 8011434:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8011438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801143a:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 801143e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011442:	b92b      	cbnz	r3, 8011450 <_strtod_l+0xac0>
 8011444:	f1ba 0f00 	cmp.w	sl, #0
 8011448:	d102      	bne.n	8011450 <_strtod_l+0xac0>
 801144a:	f3cb 0213 	ubfx	r2, fp, #0, #20
 801144e:	b3d2      	cbz	r2, 80114c6 <_strtod_l+0xb36>
 8011450:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8011454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011458:	f53f acd3 	bmi.w	8010e02 <_strtod_l+0x472>
 801145c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8011460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011464:	dda0      	ble.n	80113a8 <_strtod_l+0xa18>
 8011466:	e4cc      	b.n	8010e02 <_strtod_l+0x472>
 8011468:	b1ef      	cbz	r7, 80114a6 <_strtod_l+0xb16>
 801146a:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 801146e:	d81a      	bhi.n	80114a6 <_strtod_l+0xb16>
 8011470:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80114f8 <_strtod_l+0xb68>
 8011474:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801147c:	d810      	bhi.n	80114a0 <_strtod_l+0xb10>
 801147e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8011482:	ee17 3a90 	vmov	r3, s15
 8011486:	2b00      	cmp	r3, #0
 8011488:	bf08      	it	eq
 801148a:	2301      	moveq	r3, #1
 801148c:	ee07 3a90 	vmov	s15, r3
 8011490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011492:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8011496:	b99b      	cbnz	r3, 80114c0 <_strtod_l+0xb30>
 8011498:	eeb1 7b48 	vneg.f64	d7, d8
 801149c:	ec53 2b17 	vmov	r2, r3, d7
 80114a0:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 80114a4:	1b8b      	subs	r3, r1, r6
 80114a6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80114aa:	ec43 2b1c 	vmov	d12, r2, r3
 80114ae:	f001 fd03 	bl	8012eb8 <__ulp>
 80114b2:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80114b6:	eeac 7b00 	vfma.f64	d7, d12, d0
 80114ba:	ec5b ab17 	vmov	sl, fp, d7
 80114be:	e7b1      	b.n	8011424 <_strtod_l+0xa94>
 80114c0:	ec53 2b18 	vmov	r2, r3, d8
 80114c4:	e7ec      	b.n	80114a0 <_strtod_l+0xb10>
 80114c6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80114ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ce:	f57f af6b 	bpl.w	80113a8 <_strtod_l+0xa18>
 80114d2:	e496      	b.n	8010e02 <_strtod_l+0x472>
 80114d4:	2300      	movs	r3, #0
 80114d6:	930d      	str	r3, [sp, #52]	; 0x34
 80114d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80114da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80114dc:	6013      	str	r3, [r2, #0]
 80114de:	f7ff ba9d 	b.w	8010a1c <_strtod_l+0x8c>
 80114e2:	2a65      	cmp	r2, #101	; 0x65
 80114e4:	f04f 0100 	mov.w	r1, #0
 80114e8:	f43f ab97 	beq.w	8010c1a <_strtod_l+0x28a>
 80114ec:	2701      	movs	r7, #1
 80114ee:	460b      	mov	r3, r1
 80114f0:	9704      	str	r7, [sp, #16]
 80114f2:	f7ff bb0a 	b.w	8010b0a <_strtod_l+0x17a>
 80114f6:	bf00      	nop
 80114f8:	ffc00000 	.word	0xffc00000
 80114fc:	41dfffff 	.word	0x41dfffff
 8011500:	000fffff 	.word	0x000fffff
 8011504:	7ff00000 	.word	0x7ff00000
 8011508:	7fefffff 	.word	0x7fefffff
 801150c:	39500000 	.word	0x39500000
 8011510:	3ff00000 	.word	0x3ff00000
 8011514:	7fe00000 	.word	0x7fe00000
 8011518:	7c9fffff 	.word	0x7c9fffff
 801151c:	bff00000 	.word	0xbff00000

08011520 <strtod>:
 8011520:	4b07      	ldr	r3, [pc, #28]	; (8011540 <strtod+0x20>)
 8011522:	4a08      	ldr	r2, [pc, #32]	; (8011544 <strtod+0x24>)
 8011524:	b410      	push	{r4}
 8011526:	681c      	ldr	r4, [r3, #0]
 8011528:	6a23      	ldr	r3, [r4, #32]
 801152a:	2b00      	cmp	r3, #0
 801152c:	bf08      	it	eq
 801152e:	4613      	moveq	r3, r2
 8011530:	460a      	mov	r2, r1
 8011532:	4601      	mov	r1, r0
 8011534:	4620      	mov	r0, r4
 8011536:	f85d 4b04 	ldr.w	r4, [sp], #4
 801153a:	f7ff ba29 	b.w	8010990 <_strtod_l>
 801153e:	bf00      	nop
 8011540:	24000608 	.word	0x24000608
 8011544:	2400066c 	.word	0x2400066c

08011548 <quorem>:
 8011548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801154c:	6903      	ldr	r3, [r0, #16]
 801154e:	690c      	ldr	r4, [r1, #16]
 8011550:	42a3      	cmp	r3, r4
 8011552:	4680      	mov	r8, r0
 8011554:	f2c0 8082 	blt.w	801165c <quorem+0x114>
 8011558:	3c01      	subs	r4, #1
 801155a:	f101 0714 	add.w	r7, r1, #20
 801155e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8011562:	f100 0614 	add.w	r6, r0, #20
 8011566:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801156a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801156e:	eb06 030c 	add.w	r3, r6, ip
 8011572:	3501      	adds	r5, #1
 8011574:	eb07 090c 	add.w	r9, r7, ip
 8011578:	9301      	str	r3, [sp, #4]
 801157a:	fbb0 f5f5 	udiv	r5, r0, r5
 801157e:	b395      	cbz	r5, 80115e6 <quorem+0x9e>
 8011580:	f04f 0a00 	mov.w	sl, #0
 8011584:	4638      	mov	r0, r7
 8011586:	46b6      	mov	lr, r6
 8011588:	46d3      	mov	fp, sl
 801158a:	f850 2b04 	ldr.w	r2, [r0], #4
 801158e:	b293      	uxth	r3, r2
 8011590:	fb05 a303 	mla	r3, r5, r3, sl
 8011594:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011598:	b29b      	uxth	r3, r3
 801159a:	ebab 0303 	sub.w	r3, fp, r3
 801159e:	0c12      	lsrs	r2, r2, #16
 80115a0:	f8de b000 	ldr.w	fp, [lr]
 80115a4:	fb05 a202 	mla	r2, r5, r2, sl
 80115a8:	fa13 f38b 	uxtah	r3, r3, fp
 80115ac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80115b0:	fa1f fb82 	uxth.w	fp, r2
 80115b4:	f8de 2000 	ldr.w	r2, [lr]
 80115b8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80115bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80115c0:	b29b      	uxth	r3, r3
 80115c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80115c6:	4581      	cmp	r9, r0
 80115c8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80115cc:	f84e 3b04 	str.w	r3, [lr], #4
 80115d0:	d2db      	bcs.n	801158a <quorem+0x42>
 80115d2:	f856 300c 	ldr.w	r3, [r6, ip]
 80115d6:	b933      	cbnz	r3, 80115e6 <quorem+0x9e>
 80115d8:	9b01      	ldr	r3, [sp, #4]
 80115da:	3b04      	subs	r3, #4
 80115dc:	429e      	cmp	r6, r3
 80115de:	461a      	mov	r2, r3
 80115e0:	d330      	bcc.n	8011644 <quorem+0xfc>
 80115e2:	f8c8 4010 	str.w	r4, [r8, #16]
 80115e6:	4640      	mov	r0, r8
 80115e8:	f001 fbee 	bl	8012dc8 <__mcmp>
 80115ec:	2800      	cmp	r0, #0
 80115ee:	db25      	blt.n	801163c <quorem+0xf4>
 80115f0:	3501      	adds	r5, #1
 80115f2:	4630      	mov	r0, r6
 80115f4:	f04f 0c00 	mov.w	ip, #0
 80115f8:	f857 2b04 	ldr.w	r2, [r7], #4
 80115fc:	f8d0 e000 	ldr.w	lr, [r0]
 8011600:	b293      	uxth	r3, r2
 8011602:	ebac 0303 	sub.w	r3, ip, r3
 8011606:	0c12      	lsrs	r2, r2, #16
 8011608:	fa13 f38e 	uxtah	r3, r3, lr
 801160c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011610:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011614:	b29b      	uxth	r3, r3
 8011616:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801161a:	45b9      	cmp	r9, r7
 801161c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011620:	f840 3b04 	str.w	r3, [r0], #4
 8011624:	d2e8      	bcs.n	80115f8 <quorem+0xb0>
 8011626:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801162a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801162e:	b92a      	cbnz	r2, 801163c <quorem+0xf4>
 8011630:	3b04      	subs	r3, #4
 8011632:	429e      	cmp	r6, r3
 8011634:	461a      	mov	r2, r3
 8011636:	d30b      	bcc.n	8011650 <quorem+0x108>
 8011638:	f8c8 4010 	str.w	r4, [r8, #16]
 801163c:	4628      	mov	r0, r5
 801163e:	b003      	add	sp, #12
 8011640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011644:	6812      	ldr	r2, [r2, #0]
 8011646:	3b04      	subs	r3, #4
 8011648:	2a00      	cmp	r2, #0
 801164a:	d1ca      	bne.n	80115e2 <quorem+0x9a>
 801164c:	3c01      	subs	r4, #1
 801164e:	e7c5      	b.n	80115dc <quorem+0x94>
 8011650:	6812      	ldr	r2, [r2, #0]
 8011652:	3b04      	subs	r3, #4
 8011654:	2a00      	cmp	r2, #0
 8011656:	d1ef      	bne.n	8011638 <quorem+0xf0>
 8011658:	3c01      	subs	r4, #1
 801165a:	e7ea      	b.n	8011632 <quorem+0xea>
 801165c:	2000      	movs	r0, #0
 801165e:	e7ee      	b.n	801163e <quorem+0xf6>

08011660 <_dtoa_r>:
 8011660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011664:	ec57 6b10 	vmov	r6, r7, d0
 8011668:	b095      	sub	sp, #84	; 0x54
 801166a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801166c:	9108      	str	r1, [sp, #32]
 801166e:	4604      	mov	r4, r0
 8011670:	920a      	str	r2, [sp, #40]	; 0x28
 8011672:	9311      	str	r3, [sp, #68]	; 0x44
 8011674:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8011678:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801167c:	b93d      	cbnz	r5, 801168e <_dtoa_r+0x2e>
 801167e:	2010      	movs	r0, #16
 8011680:	f7fe fc1a 	bl	800feb8 <malloc>
 8011684:	6260      	str	r0, [r4, #36]	; 0x24
 8011686:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801168a:	6005      	str	r5, [r0, #0]
 801168c:	60c5      	str	r5, [r0, #12]
 801168e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011690:	6819      	ldr	r1, [r3, #0]
 8011692:	b151      	cbz	r1, 80116aa <_dtoa_r+0x4a>
 8011694:	685a      	ldr	r2, [r3, #4]
 8011696:	604a      	str	r2, [r1, #4]
 8011698:	2301      	movs	r3, #1
 801169a:	4093      	lsls	r3, r2
 801169c:	608b      	str	r3, [r1, #8]
 801169e:	4620      	mov	r0, r4
 80116a0:	f001 f972 	bl	8012988 <_Bfree>
 80116a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116a6:	2200      	movs	r2, #0
 80116a8:	601a      	str	r2, [r3, #0]
 80116aa:	1e3b      	subs	r3, r7, #0
 80116ac:	bfb9      	ittee	lt
 80116ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80116b2:	9303      	strlt	r3, [sp, #12]
 80116b4:	2300      	movge	r3, #0
 80116b6:	f8c8 3000 	strge.w	r3, [r8]
 80116ba:	9d03      	ldr	r5, [sp, #12]
 80116bc:	4bac      	ldr	r3, [pc, #688]	; (8011970 <_dtoa_r+0x310>)
 80116be:	bfbc      	itt	lt
 80116c0:	2201      	movlt	r2, #1
 80116c2:	f8c8 2000 	strlt.w	r2, [r8]
 80116c6:	43ab      	bics	r3, r5
 80116c8:	d11b      	bne.n	8011702 <_dtoa_r+0xa2>
 80116ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80116cc:	f242 730f 	movw	r3, #9999	; 0x270f
 80116d0:	6013      	str	r3, [r2, #0]
 80116d2:	9b02      	ldr	r3, [sp, #8]
 80116d4:	b923      	cbnz	r3, 80116e0 <_dtoa_r+0x80>
 80116d6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80116da:	2d00      	cmp	r5, #0
 80116dc:	f000 84dd 	beq.w	801209a <_dtoa_r+0xa3a>
 80116e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80116e2:	b953      	cbnz	r3, 80116fa <_dtoa_r+0x9a>
 80116e4:	4ba3      	ldr	r3, [pc, #652]	; (8011974 <_dtoa_r+0x314>)
 80116e6:	e020      	b.n	801172a <_dtoa_r+0xca>
 80116e8:	4ba3      	ldr	r3, [pc, #652]	; (8011978 <_dtoa_r+0x318>)
 80116ea:	9304      	str	r3, [sp, #16]
 80116ec:	3308      	adds	r3, #8
 80116ee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80116f0:	6013      	str	r3, [r2, #0]
 80116f2:	9804      	ldr	r0, [sp, #16]
 80116f4:	b015      	add	sp, #84	; 0x54
 80116f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116fa:	4b9e      	ldr	r3, [pc, #632]	; (8011974 <_dtoa_r+0x314>)
 80116fc:	9304      	str	r3, [sp, #16]
 80116fe:	3303      	adds	r3, #3
 8011700:	e7f5      	b.n	80116ee <_dtoa_r+0x8e>
 8011702:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011706:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801170a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801170e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011712:	d10c      	bne.n	801172e <_dtoa_r+0xce>
 8011714:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011716:	2301      	movs	r3, #1
 8011718:	6013      	str	r3, [r2, #0]
 801171a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801171c:	2b00      	cmp	r3, #0
 801171e:	f000 84b9 	beq.w	8012094 <_dtoa_r+0xa34>
 8011722:	4b96      	ldr	r3, [pc, #600]	; (801197c <_dtoa_r+0x31c>)
 8011724:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011726:	6013      	str	r3, [r2, #0]
 8011728:	3b01      	subs	r3, #1
 801172a:	9304      	str	r3, [sp, #16]
 801172c:	e7e1      	b.n	80116f2 <_dtoa_r+0x92>
 801172e:	a913      	add	r1, sp, #76	; 0x4c
 8011730:	aa12      	add	r2, sp, #72	; 0x48
 8011732:	ed9d 0b04 	vldr	d0, [sp, #16]
 8011736:	4620      	mov	r0, r4
 8011738:	f001 fc34 	bl	8012fa4 <__d2b>
 801173c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8011740:	9001      	str	r0, [sp, #4]
 8011742:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011744:	2e00      	cmp	r6, #0
 8011746:	d046      	beq.n	80117d6 <_dtoa_r+0x176>
 8011748:	9805      	ldr	r0, [sp, #20]
 801174a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801174e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011752:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8011756:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801175a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 801175e:	2700      	movs	r7, #0
 8011760:	ee07 aa90 	vmov	s15, sl
 8011764:	ec43 2b16 	vmov	d6, r2, r3
 8011768:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801176c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8011958 <_dtoa_r+0x2f8>
 8011770:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011774:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011778:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8011960 <_dtoa_r+0x300>
 801177c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8011780:	eeb0 7b46 	vmov.f64	d7, d6
 8011784:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8011968 <_dtoa_r+0x308>
 8011788:	eea5 7b06 	vfma.f64	d7, d5, d6
 801178c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011790:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011798:	ee16 ba90 	vmov	fp, s13
 801179c:	d508      	bpl.n	80117b0 <_dtoa_r+0x150>
 801179e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80117a2:	eeb4 6b47 	vcmp.f64	d6, d7
 80117a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117aa:	bf18      	it	ne
 80117ac:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80117b0:	f1bb 0f16 	cmp.w	fp, #22
 80117b4:	d834      	bhi.n	8011820 <_dtoa_r+0x1c0>
 80117b6:	4b72      	ldr	r3, [pc, #456]	; (8011980 <_dtoa_r+0x320>)
 80117b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80117bc:	ed93 7b00 	vldr	d7, [r3]
 80117c0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80117c4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80117c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117cc:	dd01      	ble.n	80117d2 <_dtoa_r+0x172>
 80117ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80117d2:	2300      	movs	r3, #0
 80117d4:	e025      	b.n	8011822 <_dtoa_r+0x1c2>
 80117d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80117d8:	eb01 0a03 	add.w	sl, r1, r3
 80117dc:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 80117e0:	2b20      	cmp	r3, #32
 80117e2:	dd17      	ble.n	8011814 <_dtoa_r+0x1b4>
 80117e4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80117e8:	9a02      	ldr	r2, [sp, #8]
 80117ea:	409d      	lsls	r5, r3
 80117ec:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 80117f0:	fa22 f303 	lsr.w	r3, r2, r3
 80117f4:	432b      	orrs	r3, r5
 80117f6:	ee07 3a90 	vmov	s15, r3
 80117fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80117fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011802:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011806:	9805      	ldr	r0, [sp, #20]
 8011808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801180c:	2701      	movs	r7, #1
 801180e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8011812:	e7a5      	b.n	8011760 <_dtoa_r+0x100>
 8011814:	9a02      	ldr	r2, [sp, #8]
 8011816:	f1c3 0320 	rsb	r3, r3, #32
 801181a:	fa02 f303 	lsl.w	r3, r2, r3
 801181e:	e7ea      	b.n	80117f6 <_dtoa_r+0x196>
 8011820:	2301      	movs	r3, #1
 8011822:	eba1 0a0a 	sub.w	sl, r1, sl
 8011826:	9310      	str	r3, [sp, #64]	; 0x40
 8011828:	f1ba 0301 	subs.w	r3, sl, #1
 801182c:	9307      	str	r3, [sp, #28]
 801182e:	bf43      	ittte	mi
 8011830:	2300      	movmi	r3, #0
 8011832:	f1ca 0a01 	rsbmi	sl, sl, #1
 8011836:	9307      	strmi	r3, [sp, #28]
 8011838:	f04f 0a00 	movpl.w	sl, #0
 801183c:	f1bb 0f00 	cmp.w	fp, #0
 8011840:	db19      	blt.n	8011876 <_dtoa_r+0x216>
 8011842:	9b07      	ldr	r3, [sp, #28]
 8011844:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8011848:	445b      	add	r3, fp
 801184a:	9307      	str	r3, [sp, #28]
 801184c:	f04f 0800 	mov.w	r8, #0
 8011850:	9b08      	ldr	r3, [sp, #32]
 8011852:	2b09      	cmp	r3, #9
 8011854:	d866      	bhi.n	8011924 <_dtoa_r+0x2c4>
 8011856:	2b05      	cmp	r3, #5
 8011858:	bfc4      	itt	gt
 801185a:	3b04      	subgt	r3, #4
 801185c:	9308      	strgt	r3, [sp, #32]
 801185e:	9b08      	ldr	r3, [sp, #32]
 8011860:	f1a3 0302 	sub.w	r3, r3, #2
 8011864:	bfcc      	ite	gt
 8011866:	2500      	movgt	r5, #0
 8011868:	2501      	movle	r5, #1
 801186a:	2b03      	cmp	r3, #3
 801186c:	d866      	bhi.n	801193c <_dtoa_r+0x2dc>
 801186e:	e8df f003 	tbb	[pc, r3]
 8011872:	5755      	.short	0x5755
 8011874:	4909      	.short	0x4909
 8011876:	2300      	movs	r3, #0
 8011878:	ebaa 0a0b 	sub.w	sl, sl, fp
 801187c:	f1cb 0800 	rsb	r8, fp, #0
 8011880:	930b      	str	r3, [sp, #44]	; 0x2c
 8011882:	e7e5      	b.n	8011850 <_dtoa_r+0x1f0>
 8011884:	2301      	movs	r3, #1
 8011886:	9309      	str	r3, [sp, #36]	; 0x24
 8011888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801188a:	2b00      	cmp	r3, #0
 801188c:	dd59      	ble.n	8011942 <_dtoa_r+0x2e2>
 801188e:	9306      	str	r3, [sp, #24]
 8011890:	4699      	mov	r9, r3
 8011892:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011894:	2200      	movs	r2, #0
 8011896:	6072      	str	r2, [r6, #4]
 8011898:	2204      	movs	r2, #4
 801189a:	f102 0014 	add.w	r0, r2, #20
 801189e:	4298      	cmp	r0, r3
 80118a0:	6871      	ldr	r1, [r6, #4]
 80118a2:	d953      	bls.n	801194c <_dtoa_r+0x2ec>
 80118a4:	4620      	mov	r0, r4
 80118a6:	f001 f83b 	bl	8012920 <_Balloc>
 80118aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80118ac:	6030      	str	r0, [r6, #0]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	9304      	str	r3, [sp, #16]
 80118b2:	f1b9 0f0e 	cmp.w	r9, #14
 80118b6:	f200 80c2 	bhi.w	8011a3e <_dtoa_r+0x3de>
 80118ba:	2d00      	cmp	r5, #0
 80118bc:	f000 80bf 	beq.w	8011a3e <_dtoa_r+0x3de>
 80118c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80118c4:	f1bb 0f00 	cmp.w	fp, #0
 80118c8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80118cc:	f340 80e6 	ble.w	8011a9c <_dtoa_r+0x43c>
 80118d0:	4a2b      	ldr	r2, [pc, #172]	; (8011980 <_dtoa_r+0x320>)
 80118d2:	f00b 030f 	and.w	r3, fp, #15
 80118d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80118da:	ed93 7b00 	vldr	d7, [r3]
 80118de:	ea4f 132b 	mov.w	r3, fp, asr #4
 80118e2:	06da      	lsls	r2, r3, #27
 80118e4:	f140 80d8 	bpl.w	8011a98 <_dtoa_r+0x438>
 80118e8:	4a26      	ldr	r2, [pc, #152]	; (8011984 <_dtoa_r+0x324>)
 80118ea:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 80118ee:	ed92 6b08 	vldr	d6, [r2, #32]
 80118f2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80118f6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80118fa:	f003 030f 	and.w	r3, r3, #15
 80118fe:	2203      	movs	r2, #3
 8011900:	4920      	ldr	r1, [pc, #128]	; (8011984 <_dtoa_r+0x324>)
 8011902:	e04a      	b.n	801199a <_dtoa_r+0x33a>
 8011904:	2301      	movs	r3, #1
 8011906:	9309      	str	r3, [sp, #36]	; 0x24
 8011908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801190a:	445b      	add	r3, fp
 801190c:	f103 0901 	add.w	r9, r3, #1
 8011910:	9306      	str	r3, [sp, #24]
 8011912:	464b      	mov	r3, r9
 8011914:	2b01      	cmp	r3, #1
 8011916:	bfb8      	it	lt
 8011918:	2301      	movlt	r3, #1
 801191a:	e7ba      	b.n	8011892 <_dtoa_r+0x232>
 801191c:	2300      	movs	r3, #0
 801191e:	e7b2      	b.n	8011886 <_dtoa_r+0x226>
 8011920:	2300      	movs	r3, #0
 8011922:	e7f0      	b.n	8011906 <_dtoa_r+0x2a6>
 8011924:	2501      	movs	r5, #1
 8011926:	2300      	movs	r3, #0
 8011928:	e9cd 3508 	strd	r3, r5, [sp, #32]
 801192c:	f04f 33ff 	mov.w	r3, #4294967295
 8011930:	9306      	str	r3, [sp, #24]
 8011932:	4699      	mov	r9, r3
 8011934:	2200      	movs	r2, #0
 8011936:	2312      	movs	r3, #18
 8011938:	920a      	str	r2, [sp, #40]	; 0x28
 801193a:	e7aa      	b.n	8011892 <_dtoa_r+0x232>
 801193c:	2301      	movs	r3, #1
 801193e:	9309      	str	r3, [sp, #36]	; 0x24
 8011940:	e7f4      	b.n	801192c <_dtoa_r+0x2cc>
 8011942:	2301      	movs	r3, #1
 8011944:	9306      	str	r3, [sp, #24]
 8011946:	4699      	mov	r9, r3
 8011948:	461a      	mov	r2, r3
 801194a:	e7f5      	b.n	8011938 <_dtoa_r+0x2d8>
 801194c:	3101      	adds	r1, #1
 801194e:	6071      	str	r1, [r6, #4]
 8011950:	0052      	lsls	r2, r2, #1
 8011952:	e7a2      	b.n	801189a <_dtoa_r+0x23a>
 8011954:	f3af 8000 	nop.w
 8011958:	636f4361 	.word	0x636f4361
 801195c:	3fd287a7 	.word	0x3fd287a7
 8011960:	8b60c8b3 	.word	0x8b60c8b3
 8011964:	3fc68a28 	.word	0x3fc68a28
 8011968:	509f79fb 	.word	0x509f79fb
 801196c:	3fd34413 	.word	0x3fd34413
 8011970:	7ff00000 	.word	0x7ff00000
 8011974:	08014439 	.word	0x08014439
 8011978:	08014430 	.word	0x08014430
 801197c:	080143b9 	.word	0x080143b9
 8011980:	080144d8 	.word	0x080144d8
 8011984:	080144b0 	.word	0x080144b0
 8011988:	07de      	lsls	r6, r3, #31
 801198a:	d504      	bpl.n	8011996 <_dtoa_r+0x336>
 801198c:	ed91 6b00 	vldr	d6, [r1]
 8011990:	3201      	adds	r2, #1
 8011992:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011996:	105b      	asrs	r3, r3, #1
 8011998:	3108      	adds	r1, #8
 801199a:	2b00      	cmp	r3, #0
 801199c:	d1f4      	bne.n	8011988 <_dtoa_r+0x328>
 801199e:	ed9d 6b02 	vldr	d6, [sp, #8]
 80119a2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80119a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80119aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	f000 80a7 	beq.w	8011b00 <_dtoa_r+0x4a0>
 80119b2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80119b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80119ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80119be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119c2:	f140 809d 	bpl.w	8011b00 <_dtoa_r+0x4a0>
 80119c6:	f1b9 0f00 	cmp.w	r9, #0
 80119ca:	f000 8099 	beq.w	8011b00 <_dtoa_r+0x4a0>
 80119ce:	9b06      	ldr	r3, [sp, #24]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	dd30      	ble.n	8011a36 <_dtoa_r+0x3d6>
 80119d4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80119d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80119dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80119e0:	9d06      	ldr	r5, [sp, #24]
 80119e2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80119e6:	3201      	adds	r2, #1
 80119e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80119ec:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80119f0:	ee07 2a90 	vmov	s15, r2
 80119f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80119f8:	eea7 5b06 	vfma.f64	d5, d7, d6
 80119fc:	ed8d 5b02 	vstr	d5, [sp, #8]
 8011a00:	9a03      	ldr	r2, [sp, #12]
 8011a02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a06:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8011a0a:	2d00      	cmp	r5, #0
 8011a0c:	d17b      	bne.n	8011b06 <_dtoa_r+0x4a6>
 8011a0e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011a12:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011a16:	ec41 0b17 	vmov	d7, r0, r1
 8011a1a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a22:	f300 8253 	bgt.w	8011ecc <_dtoa_r+0x86c>
 8011a26:	eeb1 7b47 	vneg.f64	d7, d7
 8011a2a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a32:	f100 8249 	bmi.w	8011ec8 <_dtoa_r+0x868>
 8011a36:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011a3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011a3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	f2c0 8119 	blt.w	8011c78 <_dtoa_r+0x618>
 8011a46:	f1bb 0f0e 	cmp.w	fp, #14
 8011a4a:	f300 8115 	bgt.w	8011c78 <_dtoa_r+0x618>
 8011a4e:	4bc3      	ldr	r3, [pc, #780]	; (8011d5c <_dtoa_r+0x6fc>)
 8011a50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011a54:	ed93 6b00 	vldr	d6, [r3]
 8011a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	f280 80ba 	bge.w	8011bd4 <_dtoa_r+0x574>
 8011a60:	f1b9 0f00 	cmp.w	r9, #0
 8011a64:	f300 80b6 	bgt.w	8011bd4 <_dtoa_r+0x574>
 8011a68:	f040 822d 	bne.w	8011ec6 <_dtoa_r+0x866>
 8011a6c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011a70:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011a74:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011a78:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a80:	464d      	mov	r5, r9
 8011a82:	464f      	mov	r7, r9
 8011a84:	f280 8204 	bge.w	8011e90 <_dtoa_r+0x830>
 8011a88:	9b04      	ldr	r3, [sp, #16]
 8011a8a:	9a04      	ldr	r2, [sp, #16]
 8011a8c:	1c5e      	adds	r6, r3, #1
 8011a8e:	2331      	movs	r3, #49	; 0x31
 8011a90:	7013      	strb	r3, [r2, #0]
 8011a92:	f10b 0b01 	add.w	fp, fp, #1
 8011a96:	e1ff      	b.n	8011e98 <_dtoa_r+0x838>
 8011a98:	2202      	movs	r2, #2
 8011a9a:	e731      	b.n	8011900 <_dtoa_r+0x2a0>
 8011a9c:	d02e      	beq.n	8011afc <_dtoa_r+0x49c>
 8011a9e:	f1cb 0300 	rsb	r3, fp, #0
 8011aa2:	4aae      	ldr	r2, [pc, #696]	; (8011d5c <_dtoa_r+0x6fc>)
 8011aa4:	f003 010f 	and.w	r1, r3, #15
 8011aa8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011aac:	ed92 7b00 	vldr	d7, [r2]
 8011ab0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8011ab4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011ab8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8011abc:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8011ac0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8011ac4:	49a6      	ldr	r1, [pc, #664]	; (8011d60 <_dtoa_r+0x700>)
 8011ac6:	111b      	asrs	r3, r3, #4
 8011ac8:	2000      	movs	r0, #0
 8011aca:	2202      	movs	r2, #2
 8011acc:	b93b      	cbnz	r3, 8011ade <_dtoa_r+0x47e>
 8011ace:	2800      	cmp	r0, #0
 8011ad0:	f43f af6b 	beq.w	80119aa <_dtoa_r+0x34a>
 8011ad4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011ad8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011adc:	e765      	b.n	80119aa <_dtoa_r+0x34a>
 8011ade:	07dd      	lsls	r5, r3, #31
 8011ae0:	d509      	bpl.n	8011af6 <_dtoa_r+0x496>
 8011ae2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8011ae6:	ed91 7b00 	vldr	d7, [r1]
 8011aea:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011aee:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8011af2:	3201      	adds	r2, #1
 8011af4:	2001      	movs	r0, #1
 8011af6:	105b      	asrs	r3, r3, #1
 8011af8:	3108      	adds	r1, #8
 8011afa:	e7e7      	b.n	8011acc <_dtoa_r+0x46c>
 8011afc:	2202      	movs	r2, #2
 8011afe:	e754      	b.n	80119aa <_dtoa_r+0x34a>
 8011b00:	465b      	mov	r3, fp
 8011b02:	464d      	mov	r5, r9
 8011b04:	e770      	b.n	80119e8 <_dtoa_r+0x388>
 8011b06:	4a95      	ldr	r2, [pc, #596]	; (8011d5c <_dtoa_r+0x6fc>)
 8011b08:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8011b0c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b12:	ec41 0b17 	vmov	d7, r0, r1
 8011b16:	b35a      	cbz	r2, 8011b70 <_dtoa_r+0x510>
 8011b18:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011b1c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011b20:	9e04      	ldr	r6, [sp, #16]
 8011b22:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011b26:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011b2a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011b2e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011b32:	ee14 2a90 	vmov	r2, s9
 8011b36:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011b3a:	3230      	adds	r2, #48	; 0x30
 8011b3c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011b40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b48:	f806 2b01 	strb.w	r2, [r6], #1
 8011b4c:	d43b      	bmi.n	8011bc6 <_dtoa_r+0x566>
 8011b4e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011b52:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b5a:	d472      	bmi.n	8011c42 <_dtoa_r+0x5e2>
 8011b5c:	9a04      	ldr	r2, [sp, #16]
 8011b5e:	1ab2      	subs	r2, r6, r2
 8011b60:	4295      	cmp	r5, r2
 8011b62:	f77f af68 	ble.w	8011a36 <_dtoa_r+0x3d6>
 8011b66:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011b6a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011b6e:	e7de      	b.n	8011b2e <_dtoa_r+0x4ce>
 8011b70:	9a04      	ldr	r2, [sp, #16]
 8011b72:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011b76:	1956      	adds	r6, r2, r5
 8011b78:	4611      	mov	r1, r2
 8011b7a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011b7e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011b82:	ee14 2a90 	vmov	r2, s9
 8011b86:	3230      	adds	r2, #48	; 0x30
 8011b88:	f801 2b01 	strb.w	r2, [r1], #1
 8011b8c:	42b1      	cmp	r1, r6
 8011b8e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011b92:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011b96:	d11a      	bne.n	8011bce <_dtoa_r+0x56e>
 8011b98:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011b9c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011ba0:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ba8:	dc4b      	bgt.n	8011c42 <_dtoa_r+0x5e2>
 8011baa:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011bae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bb6:	f57f af3e 	bpl.w	8011a36 <_dtoa_r+0x3d6>
 8011bba:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011bbe:	2a30      	cmp	r2, #48	; 0x30
 8011bc0:	f106 31ff 	add.w	r1, r6, #4294967295
 8011bc4:	d001      	beq.n	8011bca <_dtoa_r+0x56a>
 8011bc6:	469b      	mov	fp, r3
 8011bc8:	e02a      	b.n	8011c20 <_dtoa_r+0x5c0>
 8011bca:	460e      	mov	r6, r1
 8011bcc:	e7f5      	b.n	8011bba <_dtoa_r+0x55a>
 8011bce:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011bd2:	e7d4      	b.n	8011b7e <_dtoa_r+0x51e>
 8011bd4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011bd8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8011bdc:	9e04      	ldr	r6, [sp, #16]
 8011bde:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011be2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011be6:	ee15 3a10 	vmov	r3, s10
 8011bea:	3330      	adds	r3, #48	; 0x30
 8011bec:	f806 3b01 	strb.w	r3, [r6], #1
 8011bf0:	9b04      	ldr	r3, [sp, #16]
 8011bf2:	1af3      	subs	r3, r6, r3
 8011bf4:	4599      	cmp	r9, r3
 8011bf6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011bfa:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011bfe:	d133      	bne.n	8011c68 <_dtoa_r+0x608>
 8011c00:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011c04:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c0c:	dc18      	bgt.n	8011c40 <_dtoa_r+0x5e0>
 8011c0e:	eeb4 7b46 	vcmp.f64	d7, d6
 8011c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c16:	d103      	bne.n	8011c20 <_dtoa_r+0x5c0>
 8011c18:	ee15 3a10 	vmov	r3, s10
 8011c1c:	07db      	lsls	r3, r3, #31
 8011c1e:	d40f      	bmi.n	8011c40 <_dtoa_r+0x5e0>
 8011c20:	9901      	ldr	r1, [sp, #4]
 8011c22:	4620      	mov	r0, r4
 8011c24:	f000 feb0 	bl	8012988 <_Bfree>
 8011c28:	2300      	movs	r3, #0
 8011c2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011c2c:	7033      	strb	r3, [r6, #0]
 8011c2e:	f10b 0301 	add.w	r3, fp, #1
 8011c32:	6013      	str	r3, [r2, #0]
 8011c34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	f43f ad5b 	beq.w	80116f2 <_dtoa_r+0x92>
 8011c3c:	601e      	str	r6, [r3, #0]
 8011c3e:	e558      	b.n	80116f2 <_dtoa_r+0x92>
 8011c40:	465b      	mov	r3, fp
 8011c42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011c46:	2939      	cmp	r1, #57	; 0x39
 8011c48:	f106 32ff 	add.w	r2, r6, #4294967295
 8011c4c:	d106      	bne.n	8011c5c <_dtoa_r+0x5fc>
 8011c4e:	9904      	ldr	r1, [sp, #16]
 8011c50:	4291      	cmp	r1, r2
 8011c52:	d107      	bne.n	8011c64 <_dtoa_r+0x604>
 8011c54:	2230      	movs	r2, #48	; 0x30
 8011c56:	700a      	strb	r2, [r1, #0]
 8011c58:	3301      	adds	r3, #1
 8011c5a:	460a      	mov	r2, r1
 8011c5c:	7811      	ldrb	r1, [r2, #0]
 8011c5e:	3101      	adds	r1, #1
 8011c60:	7011      	strb	r1, [r2, #0]
 8011c62:	e7b0      	b.n	8011bc6 <_dtoa_r+0x566>
 8011c64:	4616      	mov	r6, r2
 8011c66:	e7ec      	b.n	8011c42 <_dtoa_r+0x5e2>
 8011c68:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011c6c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c74:	d1b3      	bne.n	8011bde <_dtoa_r+0x57e>
 8011c76:	e7d3      	b.n	8011c20 <_dtoa_r+0x5c0>
 8011c78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c7a:	2a00      	cmp	r2, #0
 8011c7c:	f000 808d 	beq.w	8011d9a <_dtoa_r+0x73a>
 8011c80:	9a08      	ldr	r2, [sp, #32]
 8011c82:	2a01      	cmp	r2, #1
 8011c84:	dc72      	bgt.n	8011d6c <_dtoa_r+0x70c>
 8011c86:	2f00      	cmp	r7, #0
 8011c88:	d06c      	beq.n	8011d64 <_dtoa_r+0x704>
 8011c8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011c8e:	4645      	mov	r5, r8
 8011c90:	4656      	mov	r6, sl
 8011c92:	9a07      	ldr	r2, [sp, #28]
 8011c94:	2101      	movs	r1, #1
 8011c96:	441a      	add	r2, r3
 8011c98:	4620      	mov	r0, r4
 8011c9a:	449a      	add	sl, r3
 8011c9c:	9207      	str	r2, [sp, #28]
 8011c9e:	f000 ff51 	bl	8012b44 <__i2b>
 8011ca2:	4607      	mov	r7, r0
 8011ca4:	2e00      	cmp	r6, #0
 8011ca6:	dd0b      	ble.n	8011cc0 <_dtoa_r+0x660>
 8011ca8:	9b07      	ldr	r3, [sp, #28]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	dd08      	ble.n	8011cc0 <_dtoa_r+0x660>
 8011cae:	42b3      	cmp	r3, r6
 8011cb0:	9a07      	ldr	r2, [sp, #28]
 8011cb2:	bfa8      	it	ge
 8011cb4:	4633      	movge	r3, r6
 8011cb6:	ebaa 0a03 	sub.w	sl, sl, r3
 8011cba:	1af6      	subs	r6, r6, r3
 8011cbc:	1ad3      	subs	r3, r2, r3
 8011cbe:	9307      	str	r3, [sp, #28]
 8011cc0:	f1b8 0f00 	cmp.w	r8, #0
 8011cc4:	d01d      	beq.n	8011d02 <_dtoa_r+0x6a2>
 8011cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d06a      	beq.n	8011da2 <_dtoa_r+0x742>
 8011ccc:	b18d      	cbz	r5, 8011cf2 <_dtoa_r+0x692>
 8011cce:	4639      	mov	r1, r7
 8011cd0:	462a      	mov	r2, r5
 8011cd2:	4620      	mov	r0, r4
 8011cd4:	f000 ffd6 	bl	8012c84 <__pow5mult>
 8011cd8:	9a01      	ldr	r2, [sp, #4]
 8011cda:	4601      	mov	r1, r0
 8011cdc:	4607      	mov	r7, r0
 8011cde:	4620      	mov	r0, r4
 8011ce0:	f000 ff39 	bl	8012b56 <__multiply>
 8011ce4:	9901      	ldr	r1, [sp, #4]
 8011ce6:	900c      	str	r0, [sp, #48]	; 0x30
 8011ce8:	4620      	mov	r0, r4
 8011cea:	f000 fe4d 	bl	8012988 <_Bfree>
 8011cee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011cf0:	9301      	str	r3, [sp, #4]
 8011cf2:	ebb8 0205 	subs.w	r2, r8, r5
 8011cf6:	d004      	beq.n	8011d02 <_dtoa_r+0x6a2>
 8011cf8:	9901      	ldr	r1, [sp, #4]
 8011cfa:	4620      	mov	r0, r4
 8011cfc:	f000 ffc2 	bl	8012c84 <__pow5mult>
 8011d00:	9001      	str	r0, [sp, #4]
 8011d02:	2101      	movs	r1, #1
 8011d04:	4620      	mov	r0, r4
 8011d06:	f000 ff1d 	bl	8012b44 <__i2b>
 8011d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d0c:	4605      	mov	r5, r0
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	f000 81ca 	beq.w	80120a8 <_dtoa_r+0xa48>
 8011d14:	461a      	mov	r2, r3
 8011d16:	4601      	mov	r1, r0
 8011d18:	4620      	mov	r0, r4
 8011d1a:	f000 ffb3 	bl	8012c84 <__pow5mult>
 8011d1e:	9b08      	ldr	r3, [sp, #32]
 8011d20:	2b01      	cmp	r3, #1
 8011d22:	4605      	mov	r5, r0
 8011d24:	dc44      	bgt.n	8011db0 <_dtoa_r+0x750>
 8011d26:	9b02      	ldr	r3, [sp, #8]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d13c      	bne.n	8011da6 <_dtoa_r+0x746>
 8011d2c:	9b03      	ldr	r3, [sp, #12]
 8011d2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d137      	bne.n	8011da6 <_dtoa_r+0x746>
 8011d36:	9b03      	ldr	r3, [sp, #12]
 8011d38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011d3c:	0d1b      	lsrs	r3, r3, #20
 8011d3e:	051b      	lsls	r3, r3, #20
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d033      	beq.n	8011dac <_dtoa_r+0x74c>
 8011d44:	9b07      	ldr	r3, [sp, #28]
 8011d46:	3301      	adds	r3, #1
 8011d48:	f10a 0a01 	add.w	sl, sl, #1
 8011d4c:	9307      	str	r3, [sp, #28]
 8011d4e:	f04f 0801 	mov.w	r8, #1
 8011d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d54:	bb73      	cbnz	r3, 8011db4 <_dtoa_r+0x754>
 8011d56:	2001      	movs	r0, #1
 8011d58:	e034      	b.n	8011dc4 <_dtoa_r+0x764>
 8011d5a:	bf00      	nop
 8011d5c:	080144d8 	.word	0x080144d8
 8011d60:	080144b0 	.word	0x080144b0
 8011d64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011d66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011d6a:	e790      	b.n	8011c8e <_dtoa_r+0x62e>
 8011d6c:	f109 35ff 	add.w	r5, r9, #4294967295
 8011d70:	45a8      	cmp	r8, r5
 8011d72:	bfbf      	itttt	lt
 8011d74:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8011d76:	eba5 0808 	sublt.w	r8, r5, r8
 8011d7a:	4443      	addlt	r3, r8
 8011d7c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8011d7e:	bfb6      	itet	lt
 8011d80:	46a8      	movlt	r8, r5
 8011d82:	eba8 0505 	subge.w	r5, r8, r5
 8011d86:	2500      	movlt	r5, #0
 8011d88:	f1b9 0f00 	cmp.w	r9, #0
 8011d8c:	bfb9      	ittee	lt
 8011d8e:	ebaa 0609 	sublt.w	r6, sl, r9
 8011d92:	2300      	movlt	r3, #0
 8011d94:	4656      	movge	r6, sl
 8011d96:	464b      	movge	r3, r9
 8011d98:	e77b      	b.n	8011c92 <_dtoa_r+0x632>
 8011d9a:	4645      	mov	r5, r8
 8011d9c:	4656      	mov	r6, sl
 8011d9e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011da0:	e780      	b.n	8011ca4 <_dtoa_r+0x644>
 8011da2:	4642      	mov	r2, r8
 8011da4:	e7a8      	b.n	8011cf8 <_dtoa_r+0x698>
 8011da6:	f04f 0800 	mov.w	r8, #0
 8011daa:	e7d2      	b.n	8011d52 <_dtoa_r+0x6f2>
 8011dac:	4698      	mov	r8, r3
 8011dae:	e7d0      	b.n	8011d52 <_dtoa_r+0x6f2>
 8011db0:	f04f 0800 	mov.w	r8, #0
 8011db4:	692b      	ldr	r3, [r5, #16]
 8011db6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011dba:	6918      	ldr	r0, [r3, #16]
 8011dbc:	f000 fe74 	bl	8012aa8 <__hi0bits>
 8011dc0:	f1c0 0020 	rsb	r0, r0, #32
 8011dc4:	9b07      	ldr	r3, [sp, #28]
 8011dc6:	4418      	add	r0, r3
 8011dc8:	f010 001f 	ands.w	r0, r0, #31
 8011dcc:	d047      	beq.n	8011e5e <_dtoa_r+0x7fe>
 8011dce:	f1c0 0320 	rsb	r3, r0, #32
 8011dd2:	2b04      	cmp	r3, #4
 8011dd4:	dd3b      	ble.n	8011e4e <_dtoa_r+0x7ee>
 8011dd6:	9b07      	ldr	r3, [sp, #28]
 8011dd8:	f1c0 001c 	rsb	r0, r0, #28
 8011ddc:	4482      	add	sl, r0
 8011dde:	4406      	add	r6, r0
 8011de0:	4403      	add	r3, r0
 8011de2:	9307      	str	r3, [sp, #28]
 8011de4:	f1ba 0f00 	cmp.w	sl, #0
 8011de8:	dd05      	ble.n	8011df6 <_dtoa_r+0x796>
 8011dea:	4652      	mov	r2, sl
 8011dec:	9901      	ldr	r1, [sp, #4]
 8011dee:	4620      	mov	r0, r4
 8011df0:	f000 ff96 	bl	8012d20 <__lshift>
 8011df4:	9001      	str	r0, [sp, #4]
 8011df6:	9b07      	ldr	r3, [sp, #28]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	dd05      	ble.n	8011e08 <_dtoa_r+0x7a8>
 8011dfc:	4629      	mov	r1, r5
 8011dfe:	461a      	mov	r2, r3
 8011e00:	4620      	mov	r0, r4
 8011e02:	f000 ff8d 	bl	8012d20 <__lshift>
 8011e06:	4605      	mov	r5, r0
 8011e08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011e0a:	b353      	cbz	r3, 8011e62 <_dtoa_r+0x802>
 8011e0c:	4629      	mov	r1, r5
 8011e0e:	9801      	ldr	r0, [sp, #4]
 8011e10:	f000 ffda 	bl	8012dc8 <__mcmp>
 8011e14:	2800      	cmp	r0, #0
 8011e16:	da24      	bge.n	8011e62 <_dtoa_r+0x802>
 8011e18:	2300      	movs	r3, #0
 8011e1a:	220a      	movs	r2, #10
 8011e1c:	9901      	ldr	r1, [sp, #4]
 8011e1e:	4620      	mov	r0, r4
 8011e20:	f000 fdc9 	bl	80129b6 <__multadd>
 8011e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e26:	9001      	str	r0, [sp, #4]
 8011e28:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	f000 8142 	beq.w	80120b6 <_dtoa_r+0xa56>
 8011e32:	2300      	movs	r3, #0
 8011e34:	4639      	mov	r1, r7
 8011e36:	220a      	movs	r2, #10
 8011e38:	4620      	mov	r0, r4
 8011e3a:	f000 fdbc 	bl	80129b6 <__multadd>
 8011e3e:	9b06      	ldr	r3, [sp, #24]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	4607      	mov	r7, r0
 8011e44:	dc4b      	bgt.n	8011ede <_dtoa_r+0x87e>
 8011e46:	9b08      	ldr	r3, [sp, #32]
 8011e48:	2b02      	cmp	r3, #2
 8011e4a:	dd48      	ble.n	8011ede <_dtoa_r+0x87e>
 8011e4c:	e011      	b.n	8011e72 <_dtoa_r+0x812>
 8011e4e:	d0c9      	beq.n	8011de4 <_dtoa_r+0x784>
 8011e50:	9a07      	ldr	r2, [sp, #28]
 8011e52:	331c      	adds	r3, #28
 8011e54:	441a      	add	r2, r3
 8011e56:	449a      	add	sl, r3
 8011e58:	441e      	add	r6, r3
 8011e5a:	4613      	mov	r3, r2
 8011e5c:	e7c1      	b.n	8011de2 <_dtoa_r+0x782>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	e7f6      	b.n	8011e50 <_dtoa_r+0x7f0>
 8011e62:	f1b9 0f00 	cmp.w	r9, #0
 8011e66:	dc34      	bgt.n	8011ed2 <_dtoa_r+0x872>
 8011e68:	9b08      	ldr	r3, [sp, #32]
 8011e6a:	2b02      	cmp	r3, #2
 8011e6c:	dd31      	ble.n	8011ed2 <_dtoa_r+0x872>
 8011e6e:	f8cd 9018 	str.w	r9, [sp, #24]
 8011e72:	9b06      	ldr	r3, [sp, #24]
 8011e74:	b963      	cbnz	r3, 8011e90 <_dtoa_r+0x830>
 8011e76:	4629      	mov	r1, r5
 8011e78:	2205      	movs	r2, #5
 8011e7a:	4620      	mov	r0, r4
 8011e7c:	f000 fd9b 	bl	80129b6 <__multadd>
 8011e80:	4601      	mov	r1, r0
 8011e82:	4605      	mov	r5, r0
 8011e84:	9801      	ldr	r0, [sp, #4]
 8011e86:	f000 ff9f 	bl	8012dc8 <__mcmp>
 8011e8a:	2800      	cmp	r0, #0
 8011e8c:	f73f adfc 	bgt.w	8011a88 <_dtoa_r+0x428>
 8011e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e92:	9e04      	ldr	r6, [sp, #16]
 8011e94:	ea6f 0b03 	mvn.w	fp, r3
 8011e98:	f04f 0900 	mov.w	r9, #0
 8011e9c:	4629      	mov	r1, r5
 8011e9e:	4620      	mov	r0, r4
 8011ea0:	f000 fd72 	bl	8012988 <_Bfree>
 8011ea4:	2f00      	cmp	r7, #0
 8011ea6:	f43f aebb 	beq.w	8011c20 <_dtoa_r+0x5c0>
 8011eaa:	f1b9 0f00 	cmp.w	r9, #0
 8011eae:	d005      	beq.n	8011ebc <_dtoa_r+0x85c>
 8011eb0:	45b9      	cmp	r9, r7
 8011eb2:	d003      	beq.n	8011ebc <_dtoa_r+0x85c>
 8011eb4:	4649      	mov	r1, r9
 8011eb6:	4620      	mov	r0, r4
 8011eb8:	f000 fd66 	bl	8012988 <_Bfree>
 8011ebc:	4639      	mov	r1, r7
 8011ebe:	4620      	mov	r0, r4
 8011ec0:	f000 fd62 	bl	8012988 <_Bfree>
 8011ec4:	e6ac      	b.n	8011c20 <_dtoa_r+0x5c0>
 8011ec6:	2500      	movs	r5, #0
 8011ec8:	462f      	mov	r7, r5
 8011eca:	e7e1      	b.n	8011e90 <_dtoa_r+0x830>
 8011ecc:	469b      	mov	fp, r3
 8011ece:	462f      	mov	r7, r5
 8011ed0:	e5da      	b.n	8011a88 <_dtoa_r+0x428>
 8011ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ed4:	f8cd 9018 	str.w	r9, [sp, #24]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	f000 80f3 	beq.w	80120c4 <_dtoa_r+0xa64>
 8011ede:	2e00      	cmp	r6, #0
 8011ee0:	dd05      	ble.n	8011eee <_dtoa_r+0x88e>
 8011ee2:	4639      	mov	r1, r7
 8011ee4:	4632      	mov	r2, r6
 8011ee6:	4620      	mov	r0, r4
 8011ee8:	f000 ff1a 	bl	8012d20 <__lshift>
 8011eec:	4607      	mov	r7, r0
 8011eee:	f1b8 0f00 	cmp.w	r8, #0
 8011ef2:	d04c      	beq.n	8011f8e <_dtoa_r+0x92e>
 8011ef4:	6879      	ldr	r1, [r7, #4]
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	f000 fd12 	bl	8012920 <_Balloc>
 8011efc:	693a      	ldr	r2, [r7, #16]
 8011efe:	3202      	adds	r2, #2
 8011f00:	4606      	mov	r6, r0
 8011f02:	0092      	lsls	r2, r2, #2
 8011f04:	f107 010c 	add.w	r1, r7, #12
 8011f08:	300c      	adds	r0, #12
 8011f0a:	f7fd ffe5 	bl	800fed8 <memcpy>
 8011f0e:	2201      	movs	r2, #1
 8011f10:	4631      	mov	r1, r6
 8011f12:	4620      	mov	r0, r4
 8011f14:	f000 ff04 	bl	8012d20 <__lshift>
 8011f18:	9b02      	ldr	r3, [sp, #8]
 8011f1a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8011f1e:	f003 0301 	and.w	r3, r3, #1
 8011f22:	46b9      	mov	r9, r7
 8011f24:	9307      	str	r3, [sp, #28]
 8011f26:	4607      	mov	r7, r0
 8011f28:	4629      	mov	r1, r5
 8011f2a:	9801      	ldr	r0, [sp, #4]
 8011f2c:	f7ff fb0c 	bl	8011548 <quorem>
 8011f30:	4649      	mov	r1, r9
 8011f32:	4606      	mov	r6, r0
 8011f34:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011f38:	9801      	ldr	r0, [sp, #4]
 8011f3a:	f000 ff45 	bl	8012dc8 <__mcmp>
 8011f3e:	463a      	mov	r2, r7
 8011f40:	9002      	str	r0, [sp, #8]
 8011f42:	4629      	mov	r1, r5
 8011f44:	4620      	mov	r0, r4
 8011f46:	f000 ff59 	bl	8012dfc <__mdiff>
 8011f4a:	68c3      	ldr	r3, [r0, #12]
 8011f4c:	4602      	mov	r2, r0
 8011f4e:	bb03      	cbnz	r3, 8011f92 <_dtoa_r+0x932>
 8011f50:	4601      	mov	r1, r0
 8011f52:	9009      	str	r0, [sp, #36]	; 0x24
 8011f54:	9801      	ldr	r0, [sp, #4]
 8011f56:	f000 ff37 	bl	8012dc8 <__mcmp>
 8011f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	4611      	mov	r1, r2
 8011f60:	4620      	mov	r0, r4
 8011f62:	9309      	str	r3, [sp, #36]	; 0x24
 8011f64:	f000 fd10 	bl	8012988 <_Bfree>
 8011f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f6a:	b9a3      	cbnz	r3, 8011f96 <_dtoa_r+0x936>
 8011f6c:	9a08      	ldr	r2, [sp, #32]
 8011f6e:	b992      	cbnz	r2, 8011f96 <_dtoa_r+0x936>
 8011f70:	9a07      	ldr	r2, [sp, #28]
 8011f72:	b982      	cbnz	r2, 8011f96 <_dtoa_r+0x936>
 8011f74:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011f78:	d029      	beq.n	8011fce <_dtoa_r+0x96e>
 8011f7a:	9b02      	ldr	r3, [sp, #8]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	dd01      	ble.n	8011f84 <_dtoa_r+0x924>
 8011f80:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8011f84:	f10a 0601 	add.w	r6, sl, #1
 8011f88:	f88a 8000 	strb.w	r8, [sl]
 8011f8c:	e786      	b.n	8011e9c <_dtoa_r+0x83c>
 8011f8e:	4638      	mov	r0, r7
 8011f90:	e7c2      	b.n	8011f18 <_dtoa_r+0x8b8>
 8011f92:	2301      	movs	r3, #1
 8011f94:	e7e3      	b.n	8011f5e <_dtoa_r+0x8fe>
 8011f96:	9a02      	ldr	r2, [sp, #8]
 8011f98:	2a00      	cmp	r2, #0
 8011f9a:	db04      	blt.n	8011fa6 <_dtoa_r+0x946>
 8011f9c:	d124      	bne.n	8011fe8 <_dtoa_r+0x988>
 8011f9e:	9a08      	ldr	r2, [sp, #32]
 8011fa0:	bb12      	cbnz	r2, 8011fe8 <_dtoa_r+0x988>
 8011fa2:	9a07      	ldr	r2, [sp, #28]
 8011fa4:	bb02      	cbnz	r2, 8011fe8 <_dtoa_r+0x988>
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	ddec      	ble.n	8011f84 <_dtoa_r+0x924>
 8011faa:	2201      	movs	r2, #1
 8011fac:	9901      	ldr	r1, [sp, #4]
 8011fae:	4620      	mov	r0, r4
 8011fb0:	f000 feb6 	bl	8012d20 <__lshift>
 8011fb4:	4629      	mov	r1, r5
 8011fb6:	9001      	str	r0, [sp, #4]
 8011fb8:	f000 ff06 	bl	8012dc8 <__mcmp>
 8011fbc:	2800      	cmp	r0, #0
 8011fbe:	dc03      	bgt.n	8011fc8 <_dtoa_r+0x968>
 8011fc0:	d1e0      	bne.n	8011f84 <_dtoa_r+0x924>
 8011fc2:	f018 0f01 	tst.w	r8, #1
 8011fc6:	d0dd      	beq.n	8011f84 <_dtoa_r+0x924>
 8011fc8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011fcc:	d1d8      	bne.n	8011f80 <_dtoa_r+0x920>
 8011fce:	2339      	movs	r3, #57	; 0x39
 8011fd0:	f10a 0601 	add.w	r6, sl, #1
 8011fd4:	f88a 3000 	strb.w	r3, [sl]
 8011fd8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011fdc:	2b39      	cmp	r3, #57	; 0x39
 8011fde:	f106 32ff 	add.w	r2, r6, #4294967295
 8011fe2:	d04c      	beq.n	801207e <_dtoa_r+0xa1e>
 8011fe4:	3301      	adds	r3, #1
 8011fe6:	e051      	b.n	801208c <_dtoa_r+0xa2c>
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	f10a 0601 	add.w	r6, sl, #1
 8011fee:	dd05      	ble.n	8011ffc <_dtoa_r+0x99c>
 8011ff0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011ff4:	d0eb      	beq.n	8011fce <_dtoa_r+0x96e>
 8011ff6:	f108 0801 	add.w	r8, r8, #1
 8011ffa:	e7c5      	b.n	8011f88 <_dtoa_r+0x928>
 8011ffc:	9b04      	ldr	r3, [sp, #16]
 8011ffe:	9a06      	ldr	r2, [sp, #24]
 8012000:	f806 8c01 	strb.w	r8, [r6, #-1]
 8012004:	1af3      	subs	r3, r6, r3
 8012006:	4293      	cmp	r3, r2
 8012008:	d021      	beq.n	801204e <_dtoa_r+0x9ee>
 801200a:	2300      	movs	r3, #0
 801200c:	220a      	movs	r2, #10
 801200e:	9901      	ldr	r1, [sp, #4]
 8012010:	4620      	mov	r0, r4
 8012012:	f000 fcd0 	bl	80129b6 <__multadd>
 8012016:	45b9      	cmp	r9, r7
 8012018:	9001      	str	r0, [sp, #4]
 801201a:	f04f 0300 	mov.w	r3, #0
 801201e:	f04f 020a 	mov.w	r2, #10
 8012022:	4649      	mov	r1, r9
 8012024:	4620      	mov	r0, r4
 8012026:	d105      	bne.n	8012034 <_dtoa_r+0x9d4>
 8012028:	f000 fcc5 	bl	80129b6 <__multadd>
 801202c:	4681      	mov	r9, r0
 801202e:	4607      	mov	r7, r0
 8012030:	46b2      	mov	sl, r6
 8012032:	e779      	b.n	8011f28 <_dtoa_r+0x8c8>
 8012034:	f000 fcbf 	bl	80129b6 <__multadd>
 8012038:	4639      	mov	r1, r7
 801203a:	4681      	mov	r9, r0
 801203c:	2300      	movs	r3, #0
 801203e:	220a      	movs	r2, #10
 8012040:	4620      	mov	r0, r4
 8012042:	f000 fcb8 	bl	80129b6 <__multadd>
 8012046:	4607      	mov	r7, r0
 8012048:	e7f2      	b.n	8012030 <_dtoa_r+0x9d0>
 801204a:	f04f 0900 	mov.w	r9, #0
 801204e:	2201      	movs	r2, #1
 8012050:	9901      	ldr	r1, [sp, #4]
 8012052:	4620      	mov	r0, r4
 8012054:	f000 fe64 	bl	8012d20 <__lshift>
 8012058:	4629      	mov	r1, r5
 801205a:	9001      	str	r0, [sp, #4]
 801205c:	f000 feb4 	bl	8012dc8 <__mcmp>
 8012060:	2800      	cmp	r0, #0
 8012062:	dcb9      	bgt.n	8011fd8 <_dtoa_r+0x978>
 8012064:	d102      	bne.n	801206c <_dtoa_r+0xa0c>
 8012066:	f018 0f01 	tst.w	r8, #1
 801206a:	d1b5      	bne.n	8011fd8 <_dtoa_r+0x978>
 801206c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012070:	2b30      	cmp	r3, #48	; 0x30
 8012072:	f106 32ff 	add.w	r2, r6, #4294967295
 8012076:	f47f af11 	bne.w	8011e9c <_dtoa_r+0x83c>
 801207a:	4616      	mov	r6, r2
 801207c:	e7f6      	b.n	801206c <_dtoa_r+0xa0c>
 801207e:	9b04      	ldr	r3, [sp, #16]
 8012080:	4293      	cmp	r3, r2
 8012082:	d105      	bne.n	8012090 <_dtoa_r+0xa30>
 8012084:	9a04      	ldr	r2, [sp, #16]
 8012086:	f10b 0b01 	add.w	fp, fp, #1
 801208a:	2331      	movs	r3, #49	; 0x31
 801208c:	7013      	strb	r3, [r2, #0]
 801208e:	e705      	b.n	8011e9c <_dtoa_r+0x83c>
 8012090:	4616      	mov	r6, r2
 8012092:	e7a1      	b.n	8011fd8 <_dtoa_r+0x978>
 8012094:	4b16      	ldr	r3, [pc, #88]	; (80120f0 <_dtoa_r+0xa90>)
 8012096:	f7ff bb48 	b.w	801172a <_dtoa_r+0xca>
 801209a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801209c:	2b00      	cmp	r3, #0
 801209e:	f47f ab23 	bne.w	80116e8 <_dtoa_r+0x88>
 80120a2:	4b14      	ldr	r3, [pc, #80]	; (80120f4 <_dtoa_r+0xa94>)
 80120a4:	f7ff bb41 	b.w	801172a <_dtoa_r+0xca>
 80120a8:	9b08      	ldr	r3, [sp, #32]
 80120aa:	2b01      	cmp	r3, #1
 80120ac:	f77f ae3b 	ble.w	8011d26 <_dtoa_r+0x6c6>
 80120b0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80120b4:	e64f      	b.n	8011d56 <_dtoa_r+0x6f6>
 80120b6:	9b06      	ldr	r3, [sp, #24]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	dc03      	bgt.n	80120c4 <_dtoa_r+0xa64>
 80120bc:	9b08      	ldr	r3, [sp, #32]
 80120be:	2b02      	cmp	r3, #2
 80120c0:	f73f aed7 	bgt.w	8011e72 <_dtoa_r+0x812>
 80120c4:	9e04      	ldr	r6, [sp, #16]
 80120c6:	9801      	ldr	r0, [sp, #4]
 80120c8:	4629      	mov	r1, r5
 80120ca:	f7ff fa3d 	bl	8011548 <quorem>
 80120ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80120d2:	f806 8b01 	strb.w	r8, [r6], #1
 80120d6:	9b04      	ldr	r3, [sp, #16]
 80120d8:	9a06      	ldr	r2, [sp, #24]
 80120da:	1af3      	subs	r3, r6, r3
 80120dc:	429a      	cmp	r2, r3
 80120de:	ddb4      	ble.n	801204a <_dtoa_r+0x9ea>
 80120e0:	2300      	movs	r3, #0
 80120e2:	220a      	movs	r2, #10
 80120e4:	9901      	ldr	r1, [sp, #4]
 80120e6:	4620      	mov	r0, r4
 80120e8:	f000 fc65 	bl	80129b6 <__multadd>
 80120ec:	9001      	str	r0, [sp, #4]
 80120ee:	e7ea      	b.n	80120c6 <_dtoa_r+0xa66>
 80120f0:	080143b8 	.word	0x080143b8
 80120f4:	08014430 	.word	0x08014430

080120f8 <std>:
 80120f8:	2300      	movs	r3, #0
 80120fa:	b510      	push	{r4, lr}
 80120fc:	4604      	mov	r4, r0
 80120fe:	e9c0 3300 	strd	r3, r3, [r0]
 8012102:	6083      	str	r3, [r0, #8]
 8012104:	8181      	strh	r1, [r0, #12]
 8012106:	6643      	str	r3, [r0, #100]	; 0x64
 8012108:	81c2      	strh	r2, [r0, #14]
 801210a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801210e:	6183      	str	r3, [r0, #24]
 8012110:	4619      	mov	r1, r3
 8012112:	2208      	movs	r2, #8
 8012114:	305c      	adds	r0, #92	; 0x5c
 8012116:	f7fd feea 	bl	800feee <memset>
 801211a:	4b05      	ldr	r3, [pc, #20]	; (8012130 <std+0x38>)
 801211c:	6263      	str	r3, [r4, #36]	; 0x24
 801211e:	4b05      	ldr	r3, [pc, #20]	; (8012134 <std+0x3c>)
 8012120:	62a3      	str	r3, [r4, #40]	; 0x28
 8012122:	4b05      	ldr	r3, [pc, #20]	; (8012138 <std+0x40>)
 8012124:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012126:	4b05      	ldr	r3, [pc, #20]	; (801213c <std+0x44>)
 8012128:	6224      	str	r4, [r4, #32]
 801212a:	6323      	str	r3, [r4, #48]	; 0x30
 801212c:	bd10      	pop	{r4, pc}
 801212e:	bf00      	nop
 8012130:	080136ad 	.word	0x080136ad
 8012134:	080136cf 	.word	0x080136cf
 8012138:	08013707 	.word	0x08013707
 801213c:	0801372b 	.word	0x0801372b

08012140 <_cleanup_r>:
 8012140:	4901      	ldr	r1, [pc, #4]	; (8012148 <_cleanup_r+0x8>)
 8012142:	f000 b885 	b.w	8012250 <_fwalk_reent>
 8012146:	bf00      	nop
 8012148:	08013a45 	.word	0x08013a45

0801214c <__sfmoreglue>:
 801214c:	b570      	push	{r4, r5, r6, lr}
 801214e:	1e4a      	subs	r2, r1, #1
 8012150:	2568      	movs	r5, #104	; 0x68
 8012152:	4355      	muls	r5, r2
 8012154:	460e      	mov	r6, r1
 8012156:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801215a:	f7fd ff1f 	bl	800ff9c <_malloc_r>
 801215e:	4604      	mov	r4, r0
 8012160:	b140      	cbz	r0, 8012174 <__sfmoreglue+0x28>
 8012162:	2100      	movs	r1, #0
 8012164:	e9c0 1600 	strd	r1, r6, [r0]
 8012168:	300c      	adds	r0, #12
 801216a:	60a0      	str	r0, [r4, #8]
 801216c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012170:	f7fd febd 	bl	800feee <memset>
 8012174:	4620      	mov	r0, r4
 8012176:	bd70      	pop	{r4, r5, r6, pc}

08012178 <__sinit>:
 8012178:	6983      	ldr	r3, [r0, #24]
 801217a:	b510      	push	{r4, lr}
 801217c:	4604      	mov	r4, r0
 801217e:	bb33      	cbnz	r3, 80121ce <__sinit+0x56>
 8012180:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012184:	6503      	str	r3, [r0, #80]	; 0x50
 8012186:	4b12      	ldr	r3, [pc, #72]	; (80121d0 <__sinit+0x58>)
 8012188:	4a12      	ldr	r2, [pc, #72]	; (80121d4 <__sinit+0x5c>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	6282      	str	r2, [r0, #40]	; 0x28
 801218e:	4298      	cmp	r0, r3
 8012190:	bf04      	itt	eq
 8012192:	2301      	moveq	r3, #1
 8012194:	6183      	streq	r3, [r0, #24]
 8012196:	f000 f81f 	bl	80121d8 <__sfp>
 801219a:	6060      	str	r0, [r4, #4]
 801219c:	4620      	mov	r0, r4
 801219e:	f000 f81b 	bl	80121d8 <__sfp>
 80121a2:	60a0      	str	r0, [r4, #8]
 80121a4:	4620      	mov	r0, r4
 80121a6:	f000 f817 	bl	80121d8 <__sfp>
 80121aa:	2200      	movs	r2, #0
 80121ac:	60e0      	str	r0, [r4, #12]
 80121ae:	2104      	movs	r1, #4
 80121b0:	6860      	ldr	r0, [r4, #4]
 80121b2:	f7ff ffa1 	bl	80120f8 <std>
 80121b6:	2201      	movs	r2, #1
 80121b8:	2109      	movs	r1, #9
 80121ba:	68a0      	ldr	r0, [r4, #8]
 80121bc:	f7ff ff9c 	bl	80120f8 <std>
 80121c0:	2202      	movs	r2, #2
 80121c2:	2112      	movs	r1, #18
 80121c4:	68e0      	ldr	r0, [r4, #12]
 80121c6:	f7ff ff97 	bl	80120f8 <std>
 80121ca:	2301      	movs	r3, #1
 80121cc:	61a3      	str	r3, [r4, #24]
 80121ce:	bd10      	pop	{r4, pc}
 80121d0:	080143a4 	.word	0x080143a4
 80121d4:	08012141 	.word	0x08012141

080121d8 <__sfp>:
 80121d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121da:	4b1b      	ldr	r3, [pc, #108]	; (8012248 <__sfp+0x70>)
 80121dc:	681e      	ldr	r6, [r3, #0]
 80121de:	69b3      	ldr	r3, [r6, #24]
 80121e0:	4607      	mov	r7, r0
 80121e2:	b913      	cbnz	r3, 80121ea <__sfp+0x12>
 80121e4:	4630      	mov	r0, r6
 80121e6:	f7ff ffc7 	bl	8012178 <__sinit>
 80121ea:	3648      	adds	r6, #72	; 0x48
 80121ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80121f0:	3b01      	subs	r3, #1
 80121f2:	d503      	bpl.n	80121fc <__sfp+0x24>
 80121f4:	6833      	ldr	r3, [r6, #0]
 80121f6:	b133      	cbz	r3, 8012206 <__sfp+0x2e>
 80121f8:	6836      	ldr	r6, [r6, #0]
 80121fa:	e7f7      	b.n	80121ec <__sfp+0x14>
 80121fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012200:	b16d      	cbz	r5, 801221e <__sfp+0x46>
 8012202:	3468      	adds	r4, #104	; 0x68
 8012204:	e7f4      	b.n	80121f0 <__sfp+0x18>
 8012206:	2104      	movs	r1, #4
 8012208:	4638      	mov	r0, r7
 801220a:	f7ff ff9f 	bl	801214c <__sfmoreglue>
 801220e:	6030      	str	r0, [r6, #0]
 8012210:	2800      	cmp	r0, #0
 8012212:	d1f1      	bne.n	80121f8 <__sfp+0x20>
 8012214:	230c      	movs	r3, #12
 8012216:	603b      	str	r3, [r7, #0]
 8012218:	4604      	mov	r4, r0
 801221a:	4620      	mov	r0, r4
 801221c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801221e:	4b0b      	ldr	r3, [pc, #44]	; (801224c <__sfp+0x74>)
 8012220:	6665      	str	r5, [r4, #100]	; 0x64
 8012222:	e9c4 5500 	strd	r5, r5, [r4]
 8012226:	60a5      	str	r5, [r4, #8]
 8012228:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801222c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012230:	2208      	movs	r2, #8
 8012232:	4629      	mov	r1, r5
 8012234:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012238:	f7fd fe59 	bl	800feee <memset>
 801223c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012240:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012244:	e7e9      	b.n	801221a <__sfp+0x42>
 8012246:	bf00      	nop
 8012248:	080143a4 	.word	0x080143a4
 801224c:	ffff0001 	.word	0xffff0001

08012250 <_fwalk_reent>:
 8012250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012254:	4680      	mov	r8, r0
 8012256:	4689      	mov	r9, r1
 8012258:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801225c:	2600      	movs	r6, #0
 801225e:	b914      	cbnz	r4, 8012266 <_fwalk_reent+0x16>
 8012260:	4630      	mov	r0, r6
 8012262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012266:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801226a:	3f01      	subs	r7, #1
 801226c:	d501      	bpl.n	8012272 <_fwalk_reent+0x22>
 801226e:	6824      	ldr	r4, [r4, #0]
 8012270:	e7f5      	b.n	801225e <_fwalk_reent+0xe>
 8012272:	89ab      	ldrh	r3, [r5, #12]
 8012274:	2b01      	cmp	r3, #1
 8012276:	d907      	bls.n	8012288 <_fwalk_reent+0x38>
 8012278:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801227c:	3301      	adds	r3, #1
 801227e:	d003      	beq.n	8012288 <_fwalk_reent+0x38>
 8012280:	4629      	mov	r1, r5
 8012282:	4640      	mov	r0, r8
 8012284:	47c8      	blx	r9
 8012286:	4306      	orrs	r6, r0
 8012288:	3568      	adds	r5, #104	; 0x68
 801228a:	e7ee      	b.n	801226a <_fwalk_reent+0x1a>

0801228c <rshift>:
 801228c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801228e:	6906      	ldr	r6, [r0, #16]
 8012290:	114b      	asrs	r3, r1, #5
 8012292:	429e      	cmp	r6, r3
 8012294:	f100 0414 	add.w	r4, r0, #20
 8012298:	dd30      	ble.n	80122fc <rshift+0x70>
 801229a:	f011 011f 	ands.w	r1, r1, #31
 801229e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80122a2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80122a6:	d108      	bne.n	80122ba <rshift+0x2e>
 80122a8:	4621      	mov	r1, r4
 80122aa:	42b2      	cmp	r2, r6
 80122ac:	460b      	mov	r3, r1
 80122ae:	d211      	bcs.n	80122d4 <rshift+0x48>
 80122b0:	f852 3b04 	ldr.w	r3, [r2], #4
 80122b4:	f841 3b04 	str.w	r3, [r1], #4
 80122b8:	e7f7      	b.n	80122aa <rshift+0x1e>
 80122ba:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80122be:	f1c1 0c20 	rsb	ip, r1, #32
 80122c2:	40cd      	lsrs	r5, r1
 80122c4:	3204      	adds	r2, #4
 80122c6:	4623      	mov	r3, r4
 80122c8:	42b2      	cmp	r2, r6
 80122ca:	4617      	mov	r7, r2
 80122cc:	d30c      	bcc.n	80122e8 <rshift+0x5c>
 80122ce:	601d      	str	r5, [r3, #0]
 80122d0:	b105      	cbz	r5, 80122d4 <rshift+0x48>
 80122d2:	3304      	adds	r3, #4
 80122d4:	1b1a      	subs	r2, r3, r4
 80122d6:	42a3      	cmp	r3, r4
 80122d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80122dc:	bf08      	it	eq
 80122de:	2300      	moveq	r3, #0
 80122e0:	6102      	str	r2, [r0, #16]
 80122e2:	bf08      	it	eq
 80122e4:	6143      	streq	r3, [r0, #20]
 80122e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122e8:	683f      	ldr	r7, [r7, #0]
 80122ea:	fa07 f70c 	lsl.w	r7, r7, ip
 80122ee:	433d      	orrs	r5, r7
 80122f0:	f843 5b04 	str.w	r5, [r3], #4
 80122f4:	f852 5b04 	ldr.w	r5, [r2], #4
 80122f8:	40cd      	lsrs	r5, r1
 80122fa:	e7e5      	b.n	80122c8 <rshift+0x3c>
 80122fc:	4623      	mov	r3, r4
 80122fe:	e7e9      	b.n	80122d4 <rshift+0x48>

08012300 <__hexdig_fun>:
 8012300:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012304:	2b09      	cmp	r3, #9
 8012306:	d802      	bhi.n	801230e <__hexdig_fun+0xe>
 8012308:	3820      	subs	r0, #32
 801230a:	b2c0      	uxtb	r0, r0
 801230c:	4770      	bx	lr
 801230e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012312:	2b05      	cmp	r3, #5
 8012314:	d801      	bhi.n	801231a <__hexdig_fun+0x1a>
 8012316:	3847      	subs	r0, #71	; 0x47
 8012318:	e7f7      	b.n	801230a <__hexdig_fun+0xa>
 801231a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801231e:	2b05      	cmp	r3, #5
 8012320:	d801      	bhi.n	8012326 <__hexdig_fun+0x26>
 8012322:	3827      	subs	r0, #39	; 0x27
 8012324:	e7f1      	b.n	801230a <__hexdig_fun+0xa>
 8012326:	2000      	movs	r0, #0
 8012328:	4770      	bx	lr

0801232a <__gethex>:
 801232a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801232e:	b08b      	sub	sp, #44	; 0x2c
 8012330:	468a      	mov	sl, r1
 8012332:	9002      	str	r0, [sp, #8]
 8012334:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012336:	9306      	str	r3, [sp, #24]
 8012338:	4690      	mov	r8, r2
 801233a:	f000 facd 	bl	80128d8 <__localeconv_l>
 801233e:	6803      	ldr	r3, [r0, #0]
 8012340:	9303      	str	r3, [sp, #12]
 8012342:	4618      	mov	r0, r3
 8012344:	f7ed ffcc 	bl	80002e0 <strlen>
 8012348:	9b03      	ldr	r3, [sp, #12]
 801234a:	9001      	str	r0, [sp, #4]
 801234c:	4403      	add	r3, r0
 801234e:	f04f 0b00 	mov.w	fp, #0
 8012352:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012356:	9307      	str	r3, [sp, #28]
 8012358:	f8da 3000 	ldr.w	r3, [sl]
 801235c:	3302      	adds	r3, #2
 801235e:	461f      	mov	r7, r3
 8012360:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012364:	2830      	cmp	r0, #48	; 0x30
 8012366:	d06c      	beq.n	8012442 <__gethex+0x118>
 8012368:	f7ff ffca 	bl	8012300 <__hexdig_fun>
 801236c:	4604      	mov	r4, r0
 801236e:	2800      	cmp	r0, #0
 8012370:	d16a      	bne.n	8012448 <__gethex+0x11e>
 8012372:	9a01      	ldr	r2, [sp, #4]
 8012374:	9903      	ldr	r1, [sp, #12]
 8012376:	4638      	mov	r0, r7
 8012378:	f001 f9db 	bl	8013732 <strncmp>
 801237c:	2800      	cmp	r0, #0
 801237e:	d166      	bne.n	801244e <__gethex+0x124>
 8012380:	9b01      	ldr	r3, [sp, #4]
 8012382:	5cf8      	ldrb	r0, [r7, r3]
 8012384:	18fe      	adds	r6, r7, r3
 8012386:	f7ff ffbb 	bl	8012300 <__hexdig_fun>
 801238a:	2800      	cmp	r0, #0
 801238c:	d062      	beq.n	8012454 <__gethex+0x12a>
 801238e:	4633      	mov	r3, r6
 8012390:	7818      	ldrb	r0, [r3, #0]
 8012392:	2830      	cmp	r0, #48	; 0x30
 8012394:	461f      	mov	r7, r3
 8012396:	f103 0301 	add.w	r3, r3, #1
 801239a:	d0f9      	beq.n	8012390 <__gethex+0x66>
 801239c:	f7ff ffb0 	bl	8012300 <__hexdig_fun>
 80123a0:	fab0 f580 	clz	r5, r0
 80123a4:	096d      	lsrs	r5, r5, #5
 80123a6:	4634      	mov	r4, r6
 80123a8:	f04f 0b01 	mov.w	fp, #1
 80123ac:	463a      	mov	r2, r7
 80123ae:	4616      	mov	r6, r2
 80123b0:	3201      	adds	r2, #1
 80123b2:	7830      	ldrb	r0, [r6, #0]
 80123b4:	f7ff ffa4 	bl	8012300 <__hexdig_fun>
 80123b8:	2800      	cmp	r0, #0
 80123ba:	d1f8      	bne.n	80123ae <__gethex+0x84>
 80123bc:	9a01      	ldr	r2, [sp, #4]
 80123be:	9903      	ldr	r1, [sp, #12]
 80123c0:	4630      	mov	r0, r6
 80123c2:	f001 f9b6 	bl	8013732 <strncmp>
 80123c6:	b950      	cbnz	r0, 80123de <__gethex+0xb4>
 80123c8:	b954      	cbnz	r4, 80123e0 <__gethex+0xb6>
 80123ca:	9b01      	ldr	r3, [sp, #4]
 80123cc:	18f4      	adds	r4, r6, r3
 80123ce:	4622      	mov	r2, r4
 80123d0:	4616      	mov	r6, r2
 80123d2:	3201      	adds	r2, #1
 80123d4:	7830      	ldrb	r0, [r6, #0]
 80123d6:	f7ff ff93 	bl	8012300 <__hexdig_fun>
 80123da:	2800      	cmp	r0, #0
 80123dc:	d1f8      	bne.n	80123d0 <__gethex+0xa6>
 80123de:	b10c      	cbz	r4, 80123e4 <__gethex+0xba>
 80123e0:	1ba4      	subs	r4, r4, r6
 80123e2:	00a4      	lsls	r4, r4, #2
 80123e4:	7833      	ldrb	r3, [r6, #0]
 80123e6:	2b50      	cmp	r3, #80	; 0x50
 80123e8:	d001      	beq.n	80123ee <__gethex+0xc4>
 80123ea:	2b70      	cmp	r3, #112	; 0x70
 80123ec:	d140      	bne.n	8012470 <__gethex+0x146>
 80123ee:	7873      	ldrb	r3, [r6, #1]
 80123f0:	2b2b      	cmp	r3, #43	; 0x2b
 80123f2:	d031      	beq.n	8012458 <__gethex+0x12e>
 80123f4:	2b2d      	cmp	r3, #45	; 0x2d
 80123f6:	d033      	beq.n	8012460 <__gethex+0x136>
 80123f8:	1c71      	adds	r1, r6, #1
 80123fa:	f04f 0900 	mov.w	r9, #0
 80123fe:	7808      	ldrb	r0, [r1, #0]
 8012400:	f7ff ff7e 	bl	8012300 <__hexdig_fun>
 8012404:	1e43      	subs	r3, r0, #1
 8012406:	b2db      	uxtb	r3, r3
 8012408:	2b18      	cmp	r3, #24
 801240a:	d831      	bhi.n	8012470 <__gethex+0x146>
 801240c:	f1a0 0210 	sub.w	r2, r0, #16
 8012410:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012414:	f7ff ff74 	bl	8012300 <__hexdig_fun>
 8012418:	1e43      	subs	r3, r0, #1
 801241a:	b2db      	uxtb	r3, r3
 801241c:	2b18      	cmp	r3, #24
 801241e:	d922      	bls.n	8012466 <__gethex+0x13c>
 8012420:	f1b9 0f00 	cmp.w	r9, #0
 8012424:	d000      	beq.n	8012428 <__gethex+0xfe>
 8012426:	4252      	negs	r2, r2
 8012428:	4414      	add	r4, r2
 801242a:	f8ca 1000 	str.w	r1, [sl]
 801242e:	b30d      	cbz	r5, 8012474 <__gethex+0x14a>
 8012430:	f1bb 0f00 	cmp.w	fp, #0
 8012434:	bf0c      	ite	eq
 8012436:	2706      	moveq	r7, #6
 8012438:	2700      	movne	r7, #0
 801243a:	4638      	mov	r0, r7
 801243c:	b00b      	add	sp, #44	; 0x2c
 801243e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012442:	f10b 0b01 	add.w	fp, fp, #1
 8012446:	e78a      	b.n	801235e <__gethex+0x34>
 8012448:	2500      	movs	r5, #0
 801244a:	462c      	mov	r4, r5
 801244c:	e7ae      	b.n	80123ac <__gethex+0x82>
 801244e:	463e      	mov	r6, r7
 8012450:	2501      	movs	r5, #1
 8012452:	e7c7      	b.n	80123e4 <__gethex+0xba>
 8012454:	4604      	mov	r4, r0
 8012456:	e7fb      	b.n	8012450 <__gethex+0x126>
 8012458:	f04f 0900 	mov.w	r9, #0
 801245c:	1cb1      	adds	r1, r6, #2
 801245e:	e7ce      	b.n	80123fe <__gethex+0xd4>
 8012460:	f04f 0901 	mov.w	r9, #1
 8012464:	e7fa      	b.n	801245c <__gethex+0x132>
 8012466:	230a      	movs	r3, #10
 8012468:	fb03 0202 	mla	r2, r3, r2, r0
 801246c:	3a10      	subs	r2, #16
 801246e:	e7cf      	b.n	8012410 <__gethex+0xe6>
 8012470:	4631      	mov	r1, r6
 8012472:	e7da      	b.n	801242a <__gethex+0x100>
 8012474:	1bf3      	subs	r3, r6, r7
 8012476:	3b01      	subs	r3, #1
 8012478:	4629      	mov	r1, r5
 801247a:	2b07      	cmp	r3, #7
 801247c:	dc49      	bgt.n	8012512 <__gethex+0x1e8>
 801247e:	9802      	ldr	r0, [sp, #8]
 8012480:	f000 fa4e 	bl	8012920 <_Balloc>
 8012484:	9b01      	ldr	r3, [sp, #4]
 8012486:	f100 0914 	add.w	r9, r0, #20
 801248a:	f04f 0b00 	mov.w	fp, #0
 801248e:	f1c3 0301 	rsb	r3, r3, #1
 8012492:	4605      	mov	r5, r0
 8012494:	f8cd 9010 	str.w	r9, [sp, #16]
 8012498:	46da      	mov	sl, fp
 801249a:	9308      	str	r3, [sp, #32]
 801249c:	42b7      	cmp	r7, r6
 801249e:	d33b      	bcc.n	8012518 <__gethex+0x1ee>
 80124a0:	9804      	ldr	r0, [sp, #16]
 80124a2:	f840 ab04 	str.w	sl, [r0], #4
 80124a6:	eba0 0009 	sub.w	r0, r0, r9
 80124aa:	1080      	asrs	r0, r0, #2
 80124ac:	6128      	str	r0, [r5, #16]
 80124ae:	0147      	lsls	r7, r0, #5
 80124b0:	4650      	mov	r0, sl
 80124b2:	f000 faf9 	bl	8012aa8 <__hi0bits>
 80124b6:	f8d8 6000 	ldr.w	r6, [r8]
 80124ba:	1a3f      	subs	r7, r7, r0
 80124bc:	42b7      	cmp	r7, r6
 80124be:	dd64      	ble.n	801258a <__gethex+0x260>
 80124c0:	1bbf      	subs	r7, r7, r6
 80124c2:	4639      	mov	r1, r7
 80124c4:	4628      	mov	r0, r5
 80124c6:	f000 fe0a 	bl	80130de <__any_on>
 80124ca:	4682      	mov	sl, r0
 80124cc:	b178      	cbz	r0, 80124ee <__gethex+0x1c4>
 80124ce:	1e7b      	subs	r3, r7, #1
 80124d0:	1159      	asrs	r1, r3, #5
 80124d2:	f003 021f 	and.w	r2, r3, #31
 80124d6:	f04f 0a01 	mov.w	sl, #1
 80124da:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80124de:	fa0a f202 	lsl.w	r2, sl, r2
 80124e2:	420a      	tst	r2, r1
 80124e4:	d003      	beq.n	80124ee <__gethex+0x1c4>
 80124e6:	4553      	cmp	r3, sl
 80124e8:	dc46      	bgt.n	8012578 <__gethex+0x24e>
 80124ea:	f04f 0a02 	mov.w	sl, #2
 80124ee:	4639      	mov	r1, r7
 80124f0:	4628      	mov	r0, r5
 80124f2:	f7ff fecb 	bl	801228c <rshift>
 80124f6:	443c      	add	r4, r7
 80124f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80124fc:	42a3      	cmp	r3, r4
 80124fe:	da52      	bge.n	80125a6 <__gethex+0x27c>
 8012500:	4629      	mov	r1, r5
 8012502:	9802      	ldr	r0, [sp, #8]
 8012504:	f000 fa40 	bl	8012988 <_Bfree>
 8012508:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801250a:	2300      	movs	r3, #0
 801250c:	6013      	str	r3, [r2, #0]
 801250e:	27a3      	movs	r7, #163	; 0xa3
 8012510:	e793      	b.n	801243a <__gethex+0x110>
 8012512:	3101      	adds	r1, #1
 8012514:	105b      	asrs	r3, r3, #1
 8012516:	e7b0      	b.n	801247a <__gethex+0x150>
 8012518:	1e73      	subs	r3, r6, #1
 801251a:	9305      	str	r3, [sp, #20]
 801251c:	9a07      	ldr	r2, [sp, #28]
 801251e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012522:	4293      	cmp	r3, r2
 8012524:	d018      	beq.n	8012558 <__gethex+0x22e>
 8012526:	f1bb 0f20 	cmp.w	fp, #32
 801252a:	d107      	bne.n	801253c <__gethex+0x212>
 801252c:	9b04      	ldr	r3, [sp, #16]
 801252e:	f8c3 a000 	str.w	sl, [r3]
 8012532:	3304      	adds	r3, #4
 8012534:	f04f 0a00 	mov.w	sl, #0
 8012538:	9304      	str	r3, [sp, #16]
 801253a:	46d3      	mov	fp, sl
 801253c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012540:	f7ff fede 	bl	8012300 <__hexdig_fun>
 8012544:	f000 000f 	and.w	r0, r0, #15
 8012548:	fa00 f00b 	lsl.w	r0, r0, fp
 801254c:	ea4a 0a00 	orr.w	sl, sl, r0
 8012550:	f10b 0b04 	add.w	fp, fp, #4
 8012554:	9b05      	ldr	r3, [sp, #20]
 8012556:	e00d      	b.n	8012574 <__gethex+0x24a>
 8012558:	9b05      	ldr	r3, [sp, #20]
 801255a:	9a08      	ldr	r2, [sp, #32]
 801255c:	4413      	add	r3, r2
 801255e:	42bb      	cmp	r3, r7
 8012560:	d3e1      	bcc.n	8012526 <__gethex+0x1fc>
 8012562:	4618      	mov	r0, r3
 8012564:	9a01      	ldr	r2, [sp, #4]
 8012566:	9903      	ldr	r1, [sp, #12]
 8012568:	9309      	str	r3, [sp, #36]	; 0x24
 801256a:	f001 f8e2 	bl	8013732 <strncmp>
 801256e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012570:	2800      	cmp	r0, #0
 8012572:	d1d8      	bne.n	8012526 <__gethex+0x1fc>
 8012574:	461e      	mov	r6, r3
 8012576:	e791      	b.n	801249c <__gethex+0x172>
 8012578:	1eb9      	subs	r1, r7, #2
 801257a:	4628      	mov	r0, r5
 801257c:	f000 fdaf 	bl	80130de <__any_on>
 8012580:	2800      	cmp	r0, #0
 8012582:	d0b2      	beq.n	80124ea <__gethex+0x1c0>
 8012584:	f04f 0a03 	mov.w	sl, #3
 8012588:	e7b1      	b.n	80124ee <__gethex+0x1c4>
 801258a:	da09      	bge.n	80125a0 <__gethex+0x276>
 801258c:	1bf7      	subs	r7, r6, r7
 801258e:	4629      	mov	r1, r5
 8012590:	463a      	mov	r2, r7
 8012592:	9802      	ldr	r0, [sp, #8]
 8012594:	f000 fbc4 	bl	8012d20 <__lshift>
 8012598:	1be4      	subs	r4, r4, r7
 801259a:	4605      	mov	r5, r0
 801259c:	f100 0914 	add.w	r9, r0, #20
 80125a0:	f04f 0a00 	mov.w	sl, #0
 80125a4:	e7a8      	b.n	80124f8 <__gethex+0x1ce>
 80125a6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80125aa:	42a0      	cmp	r0, r4
 80125ac:	dd6a      	ble.n	8012684 <__gethex+0x35a>
 80125ae:	1b04      	subs	r4, r0, r4
 80125b0:	42a6      	cmp	r6, r4
 80125b2:	dc2e      	bgt.n	8012612 <__gethex+0x2e8>
 80125b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80125b8:	2b02      	cmp	r3, #2
 80125ba:	d022      	beq.n	8012602 <__gethex+0x2d8>
 80125bc:	2b03      	cmp	r3, #3
 80125be:	d024      	beq.n	801260a <__gethex+0x2e0>
 80125c0:	2b01      	cmp	r3, #1
 80125c2:	d115      	bne.n	80125f0 <__gethex+0x2c6>
 80125c4:	42a6      	cmp	r6, r4
 80125c6:	d113      	bne.n	80125f0 <__gethex+0x2c6>
 80125c8:	2e01      	cmp	r6, #1
 80125ca:	dc0b      	bgt.n	80125e4 <__gethex+0x2ba>
 80125cc:	9a06      	ldr	r2, [sp, #24]
 80125ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80125d2:	6013      	str	r3, [r2, #0]
 80125d4:	2301      	movs	r3, #1
 80125d6:	612b      	str	r3, [r5, #16]
 80125d8:	f8c9 3000 	str.w	r3, [r9]
 80125dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80125de:	2762      	movs	r7, #98	; 0x62
 80125e0:	601d      	str	r5, [r3, #0]
 80125e2:	e72a      	b.n	801243a <__gethex+0x110>
 80125e4:	1e71      	subs	r1, r6, #1
 80125e6:	4628      	mov	r0, r5
 80125e8:	f000 fd79 	bl	80130de <__any_on>
 80125ec:	2800      	cmp	r0, #0
 80125ee:	d1ed      	bne.n	80125cc <__gethex+0x2a2>
 80125f0:	4629      	mov	r1, r5
 80125f2:	9802      	ldr	r0, [sp, #8]
 80125f4:	f000 f9c8 	bl	8012988 <_Bfree>
 80125f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80125fa:	2300      	movs	r3, #0
 80125fc:	6013      	str	r3, [r2, #0]
 80125fe:	2750      	movs	r7, #80	; 0x50
 8012600:	e71b      	b.n	801243a <__gethex+0x110>
 8012602:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012604:	2b00      	cmp	r3, #0
 8012606:	d0e1      	beq.n	80125cc <__gethex+0x2a2>
 8012608:	e7f2      	b.n	80125f0 <__gethex+0x2c6>
 801260a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801260c:	2b00      	cmp	r3, #0
 801260e:	d1dd      	bne.n	80125cc <__gethex+0x2a2>
 8012610:	e7ee      	b.n	80125f0 <__gethex+0x2c6>
 8012612:	1e67      	subs	r7, r4, #1
 8012614:	f1ba 0f00 	cmp.w	sl, #0
 8012618:	d131      	bne.n	801267e <__gethex+0x354>
 801261a:	b127      	cbz	r7, 8012626 <__gethex+0x2fc>
 801261c:	4639      	mov	r1, r7
 801261e:	4628      	mov	r0, r5
 8012620:	f000 fd5d 	bl	80130de <__any_on>
 8012624:	4682      	mov	sl, r0
 8012626:	117a      	asrs	r2, r7, #5
 8012628:	2301      	movs	r3, #1
 801262a:	f007 071f 	and.w	r7, r7, #31
 801262e:	fa03 f707 	lsl.w	r7, r3, r7
 8012632:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8012636:	4621      	mov	r1, r4
 8012638:	421f      	tst	r7, r3
 801263a:	4628      	mov	r0, r5
 801263c:	bf18      	it	ne
 801263e:	f04a 0a02 	orrne.w	sl, sl, #2
 8012642:	1b36      	subs	r6, r6, r4
 8012644:	f7ff fe22 	bl	801228c <rshift>
 8012648:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801264c:	2702      	movs	r7, #2
 801264e:	f1ba 0f00 	cmp.w	sl, #0
 8012652:	d048      	beq.n	80126e6 <__gethex+0x3bc>
 8012654:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012658:	2b02      	cmp	r3, #2
 801265a:	d015      	beq.n	8012688 <__gethex+0x35e>
 801265c:	2b03      	cmp	r3, #3
 801265e:	d017      	beq.n	8012690 <__gethex+0x366>
 8012660:	2b01      	cmp	r3, #1
 8012662:	d109      	bne.n	8012678 <__gethex+0x34e>
 8012664:	f01a 0f02 	tst.w	sl, #2
 8012668:	d006      	beq.n	8012678 <__gethex+0x34e>
 801266a:	f8d9 3000 	ldr.w	r3, [r9]
 801266e:	ea4a 0a03 	orr.w	sl, sl, r3
 8012672:	f01a 0f01 	tst.w	sl, #1
 8012676:	d10e      	bne.n	8012696 <__gethex+0x36c>
 8012678:	f047 0710 	orr.w	r7, r7, #16
 801267c:	e033      	b.n	80126e6 <__gethex+0x3bc>
 801267e:	f04f 0a01 	mov.w	sl, #1
 8012682:	e7d0      	b.n	8012626 <__gethex+0x2fc>
 8012684:	2701      	movs	r7, #1
 8012686:	e7e2      	b.n	801264e <__gethex+0x324>
 8012688:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801268a:	f1c3 0301 	rsb	r3, r3, #1
 801268e:	9315      	str	r3, [sp, #84]	; 0x54
 8012690:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012692:	2b00      	cmp	r3, #0
 8012694:	d0f0      	beq.n	8012678 <__gethex+0x34e>
 8012696:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801269a:	f105 0314 	add.w	r3, r5, #20
 801269e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80126a2:	eb03 010a 	add.w	r1, r3, sl
 80126a6:	f04f 0c00 	mov.w	ip, #0
 80126aa:	4618      	mov	r0, r3
 80126ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80126b0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80126b4:	d01c      	beq.n	80126f0 <__gethex+0x3c6>
 80126b6:	3201      	adds	r2, #1
 80126b8:	6002      	str	r2, [r0, #0]
 80126ba:	2f02      	cmp	r7, #2
 80126bc:	f105 0314 	add.w	r3, r5, #20
 80126c0:	d138      	bne.n	8012734 <__gethex+0x40a>
 80126c2:	f8d8 2000 	ldr.w	r2, [r8]
 80126c6:	3a01      	subs	r2, #1
 80126c8:	42b2      	cmp	r2, r6
 80126ca:	d10a      	bne.n	80126e2 <__gethex+0x3b8>
 80126cc:	1171      	asrs	r1, r6, #5
 80126ce:	2201      	movs	r2, #1
 80126d0:	f006 061f 	and.w	r6, r6, #31
 80126d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80126d8:	fa02 f606 	lsl.w	r6, r2, r6
 80126dc:	421e      	tst	r6, r3
 80126de:	bf18      	it	ne
 80126e0:	4617      	movne	r7, r2
 80126e2:	f047 0720 	orr.w	r7, r7, #32
 80126e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80126e8:	601d      	str	r5, [r3, #0]
 80126ea:	9b06      	ldr	r3, [sp, #24]
 80126ec:	601c      	str	r4, [r3, #0]
 80126ee:	e6a4      	b.n	801243a <__gethex+0x110>
 80126f0:	4299      	cmp	r1, r3
 80126f2:	f843 cc04 	str.w	ip, [r3, #-4]
 80126f6:	d8d8      	bhi.n	80126aa <__gethex+0x380>
 80126f8:	68ab      	ldr	r3, [r5, #8]
 80126fa:	4599      	cmp	r9, r3
 80126fc:	db12      	blt.n	8012724 <__gethex+0x3fa>
 80126fe:	6869      	ldr	r1, [r5, #4]
 8012700:	9802      	ldr	r0, [sp, #8]
 8012702:	3101      	adds	r1, #1
 8012704:	f000 f90c 	bl	8012920 <_Balloc>
 8012708:	692a      	ldr	r2, [r5, #16]
 801270a:	3202      	adds	r2, #2
 801270c:	f105 010c 	add.w	r1, r5, #12
 8012710:	4683      	mov	fp, r0
 8012712:	0092      	lsls	r2, r2, #2
 8012714:	300c      	adds	r0, #12
 8012716:	f7fd fbdf 	bl	800fed8 <memcpy>
 801271a:	4629      	mov	r1, r5
 801271c:	9802      	ldr	r0, [sp, #8]
 801271e:	f000 f933 	bl	8012988 <_Bfree>
 8012722:	465d      	mov	r5, fp
 8012724:	692b      	ldr	r3, [r5, #16]
 8012726:	1c5a      	adds	r2, r3, #1
 8012728:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801272c:	612a      	str	r2, [r5, #16]
 801272e:	2201      	movs	r2, #1
 8012730:	615a      	str	r2, [r3, #20]
 8012732:	e7c2      	b.n	80126ba <__gethex+0x390>
 8012734:	692a      	ldr	r2, [r5, #16]
 8012736:	454a      	cmp	r2, r9
 8012738:	dd0b      	ble.n	8012752 <__gethex+0x428>
 801273a:	2101      	movs	r1, #1
 801273c:	4628      	mov	r0, r5
 801273e:	f7ff fda5 	bl	801228c <rshift>
 8012742:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012746:	3401      	adds	r4, #1
 8012748:	42a3      	cmp	r3, r4
 801274a:	f6ff aed9 	blt.w	8012500 <__gethex+0x1d6>
 801274e:	2701      	movs	r7, #1
 8012750:	e7c7      	b.n	80126e2 <__gethex+0x3b8>
 8012752:	f016 061f 	ands.w	r6, r6, #31
 8012756:	d0fa      	beq.n	801274e <__gethex+0x424>
 8012758:	449a      	add	sl, r3
 801275a:	f1c6 0620 	rsb	r6, r6, #32
 801275e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8012762:	f000 f9a1 	bl	8012aa8 <__hi0bits>
 8012766:	42b0      	cmp	r0, r6
 8012768:	dbe7      	blt.n	801273a <__gethex+0x410>
 801276a:	e7f0      	b.n	801274e <__gethex+0x424>

0801276c <L_shift>:
 801276c:	f1c2 0208 	rsb	r2, r2, #8
 8012770:	0092      	lsls	r2, r2, #2
 8012772:	b570      	push	{r4, r5, r6, lr}
 8012774:	f1c2 0620 	rsb	r6, r2, #32
 8012778:	6843      	ldr	r3, [r0, #4]
 801277a:	6804      	ldr	r4, [r0, #0]
 801277c:	fa03 f506 	lsl.w	r5, r3, r6
 8012780:	432c      	orrs	r4, r5
 8012782:	40d3      	lsrs	r3, r2
 8012784:	6004      	str	r4, [r0, #0]
 8012786:	f840 3f04 	str.w	r3, [r0, #4]!
 801278a:	4288      	cmp	r0, r1
 801278c:	d3f4      	bcc.n	8012778 <L_shift+0xc>
 801278e:	bd70      	pop	{r4, r5, r6, pc}

08012790 <__match>:
 8012790:	b530      	push	{r4, r5, lr}
 8012792:	6803      	ldr	r3, [r0, #0]
 8012794:	3301      	adds	r3, #1
 8012796:	f811 4b01 	ldrb.w	r4, [r1], #1
 801279a:	b914      	cbnz	r4, 80127a2 <__match+0x12>
 801279c:	6003      	str	r3, [r0, #0]
 801279e:	2001      	movs	r0, #1
 80127a0:	bd30      	pop	{r4, r5, pc}
 80127a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80127aa:	2d19      	cmp	r5, #25
 80127ac:	bf98      	it	ls
 80127ae:	3220      	addls	r2, #32
 80127b0:	42a2      	cmp	r2, r4
 80127b2:	d0f0      	beq.n	8012796 <__match+0x6>
 80127b4:	2000      	movs	r0, #0
 80127b6:	e7f3      	b.n	80127a0 <__match+0x10>

080127b8 <__hexnan>:
 80127b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127bc:	680b      	ldr	r3, [r1, #0]
 80127be:	6801      	ldr	r1, [r0, #0]
 80127c0:	115f      	asrs	r7, r3, #5
 80127c2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80127c6:	f013 031f 	ands.w	r3, r3, #31
 80127ca:	b087      	sub	sp, #28
 80127cc:	bf18      	it	ne
 80127ce:	3704      	addne	r7, #4
 80127d0:	2500      	movs	r5, #0
 80127d2:	1f3e      	subs	r6, r7, #4
 80127d4:	4682      	mov	sl, r0
 80127d6:	4690      	mov	r8, r2
 80127d8:	9301      	str	r3, [sp, #4]
 80127da:	f847 5c04 	str.w	r5, [r7, #-4]
 80127de:	46b1      	mov	r9, r6
 80127e0:	4634      	mov	r4, r6
 80127e2:	9502      	str	r5, [sp, #8]
 80127e4:	46ab      	mov	fp, r5
 80127e6:	784a      	ldrb	r2, [r1, #1]
 80127e8:	1c4b      	adds	r3, r1, #1
 80127ea:	9303      	str	r3, [sp, #12]
 80127ec:	b342      	cbz	r2, 8012840 <__hexnan+0x88>
 80127ee:	4610      	mov	r0, r2
 80127f0:	9105      	str	r1, [sp, #20]
 80127f2:	9204      	str	r2, [sp, #16]
 80127f4:	f7ff fd84 	bl	8012300 <__hexdig_fun>
 80127f8:	2800      	cmp	r0, #0
 80127fa:	d143      	bne.n	8012884 <__hexnan+0xcc>
 80127fc:	9a04      	ldr	r2, [sp, #16]
 80127fe:	9905      	ldr	r1, [sp, #20]
 8012800:	2a20      	cmp	r2, #32
 8012802:	d818      	bhi.n	8012836 <__hexnan+0x7e>
 8012804:	9b02      	ldr	r3, [sp, #8]
 8012806:	459b      	cmp	fp, r3
 8012808:	dd13      	ble.n	8012832 <__hexnan+0x7a>
 801280a:	454c      	cmp	r4, r9
 801280c:	d206      	bcs.n	801281c <__hexnan+0x64>
 801280e:	2d07      	cmp	r5, #7
 8012810:	dc04      	bgt.n	801281c <__hexnan+0x64>
 8012812:	462a      	mov	r2, r5
 8012814:	4649      	mov	r1, r9
 8012816:	4620      	mov	r0, r4
 8012818:	f7ff ffa8 	bl	801276c <L_shift>
 801281c:	4544      	cmp	r4, r8
 801281e:	d944      	bls.n	80128aa <__hexnan+0xf2>
 8012820:	2300      	movs	r3, #0
 8012822:	f1a4 0904 	sub.w	r9, r4, #4
 8012826:	f844 3c04 	str.w	r3, [r4, #-4]
 801282a:	f8cd b008 	str.w	fp, [sp, #8]
 801282e:	464c      	mov	r4, r9
 8012830:	461d      	mov	r5, r3
 8012832:	9903      	ldr	r1, [sp, #12]
 8012834:	e7d7      	b.n	80127e6 <__hexnan+0x2e>
 8012836:	2a29      	cmp	r2, #41	; 0x29
 8012838:	d14a      	bne.n	80128d0 <__hexnan+0x118>
 801283a:	3102      	adds	r1, #2
 801283c:	f8ca 1000 	str.w	r1, [sl]
 8012840:	f1bb 0f00 	cmp.w	fp, #0
 8012844:	d044      	beq.n	80128d0 <__hexnan+0x118>
 8012846:	454c      	cmp	r4, r9
 8012848:	d206      	bcs.n	8012858 <__hexnan+0xa0>
 801284a:	2d07      	cmp	r5, #7
 801284c:	dc04      	bgt.n	8012858 <__hexnan+0xa0>
 801284e:	462a      	mov	r2, r5
 8012850:	4649      	mov	r1, r9
 8012852:	4620      	mov	r0, r4
 8012854:	f7ff ff8a 	bl	801276c <L_shift>
 8012858:	4544      	cmp	r4, r8
 801285a:	d928      	bls.n	80128ae <__hexnan+0xf6>
 801285c:	4643      	mov	r3, r8
 801285e:	f854 2b04 	ldr.w	r2, [r4], #4
 8012862:	f843 2b04 	str.w	r2, [r3], #4
 8012866:	42a6      	cmp	r6, r4
 8012868:	d2f9      	bcs.n	801285e <__hexnan+0xa6>
 801286a:	2200      	movs	r2, #0
 801286c:	f843 2b04 	str.w	r2, [r3], #4
 8012870:	429e      	cmp	r6, r3
 8012872:	d2fb      	bcs.n	801286c <__hexnan+0xb4>
 8012874:	6833      	ldr	r3, [r6, #0]
 8012876:	b91b      	cbnz	r3, 8012880 <__hexnan+0xc8>
 8012878:	4546      	cmp	r6, r8
 801287a:	d127      	bne.n	80128cc <__hexnan+0x114>
 801287c:	2301      	movs	r3, #1
 801287e:	6033      	str	r3, [r6, #0]
 8012880:	2005      	movs	r0, #5
 8012882:	e026      	b.n	80128d2 <__hexnan+0x11a>
 8012884:	3501      	adds	r5, #1
 8012886:	2d08      	cmp	r5, #8
 8012888:	f10b 0b01 	add.w	fp, fp, #1
 801288c:	dd06      	ble.n	801289c <__hexnan+0xe4>
 801288e:	4544      	cmp	r4, r8
 8012890:	d9cf      	bls.n	8012832 <__hexnan+0x7a>
 8012892:	2300      	movs	r3, #0
 8012894:	f844 3c04 	str.w	r3, [r4, #-4]
 8012898:	2501      	movs	r5, #1
 801289a:	3c04      	subs	r4, #4
 801289c:	6822      	ldr	r2, [r4, #0]
 801289e:	f000 000f 	and.w	r0, r0, #15
 80128a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80128a6:	6020      	str	r0, [r4, #0]
 80128a8:	e7c3      	b.n	8012832 <__hexnan+0x7a>
 80128aa:	2508      	movs	r5, #8
 80128ac:	e7c1      	b.n	8012832 <__hexnan+0x7a>
 80128ae:	9b01      	ldr	r3, [sp, #4]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d0df      	beq.n	8012874 <__hexnan+0xbc>
 80128b4:	f04f 32ff 	mov.w	r2, #4294967295
 80128b8:	f1c3 0320 	rsb	r3, r3, #32
 80128bc:	fa22 f303 	lsr.w	r3, r2, r3
 80128c0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80128c4:	401a      	ands	r2, r3
 80128c6:	f847 2c04 	str.w	r2, [r7, #-4]
 80128ca:	e7d3      	b.n	8012874 <__hexnan+0xbc>
 80128cc:	3e04      	subs	r6, #4
 80128ce:	e7d1      	b.n	8012874 <__hexnan+0xbc>
 80128d0:	2004      	movs	r0, #4
 80128d2:	b007      	add	sp, #28
 80128d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080128d8 <__localeconv_l>:
 80128d8:	30f0      	adds	r0, #240	; 0xf0
 80128da:	4770      	bx	lr

080128dc <_localeconv_r>:
 80128dc:	4b04      	ldr	r3, [pc, #16]	; (80128f0 <_localeconv_r+0x14>)
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	6a18      	ldr	r0, [r3, #32]
 80128e2:	4b04      	ldr	r3, [pc, #16]	; (80128f4 <_localeconv_r+0x18>)
 80128e4:	2800      	cmp	r0, #0
 80128e6:	bf08      	it	eq
 80128e8:	4618      	moveq	r0, r3
 80128ea:	30f0      	adds	r0, #240	; 0xf0
 80128ec:	4770      	bx	lr
 80128ee:	bf00      	nop
 80128f0:	24000608 	.word	0x24000608
 80128f4:	2400066c 	.word	0x2400066c

080128f8 <__ascii_mbtowc>:
 80128f8:	b082      	sub	sp, #8
 80128fa:	b901      	cbnz	r1, 80128fe <__ascii_mbtowc+0x6>
 80128fc:	a901      	add	r1, sp, #4
 80128fe:	b142      	cbz	r2, 8012912 <__ascii_mbtowc+0x1a>
 8012900:	b14b      	cbz	r3, 8012916 <__ascii_mbtowc+0x1e>
 8012902:	7813      	ldrb	r3, [r2, #0]
 8012904:	600b      	str	r3, [r1, #0]
 8012906:	7812      	ldrb	r2, [r2, #0]
 8012908:	1c10      	adds	r0, r2, #0
 801290a:	bf18      	it	ne
 801290c:	2001      	movne	r0, #1
 801290e:	b002      	add	sp, #8
 8012910:	4770      	bx	lr
 8012912:	4610      	mov	r0, r2
 8012914:	e7fb      	b.n	801290e <__ascii_mbtowc+0x16>
 8012916:	f06f 0001 	mvn.w	r0, #1
 801291a:	e7f8      	b.n	801290e <__ascii_mbtowc+0x16>

0801291c <__malloc_lock>:
 801291c:	4770      	bx	lr

0801291e <__malloc_unlock>:
 801291e:	4770      	bx	lr

08012920 <_Balloc>:
 8012920:	b570      	push	{r4, r5, r6, lr}
 8012922:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012924:	4604      	mov	r4, r0
 8012926:	460e      	mov	r6, r1
 8012928:	b93d      	cbnz	r5, 801293a <_Balloc+0x1a>
 801292a:	2010      	movs	r0, #16
 801292c:	f7fd fac4 	bl	800feb8 <malloc>
 8012930:	6260      	str	r0, [r4, #36]	; 0x24
 8012932:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012936:	6005      	str	r5, [r0, #0]
 8012938:	60c5      	str	r5, [r0, #12]
 801293a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801293c:	68eb      	ldr	r3, [r5, #12]
 801293e:	b183      	cbz	r3, 8012962 <_Balloc+0x42>
 8012940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012942:	68db      	ldr	r3, [r3, #12]
 8012944:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012948:	b9b8      	cbnz	r0, 801297a <_Balloc+0x5a>
 801294a:	2101      	movs	r1, #1
 801294c:	fa01 f506 	lsl.w	r5, r1, r6
 8012950:	1d6a      	adds	r2, r5, #5
 8012952:	0092      	lsls	r2, r2, #2
 8012954:	4620      	mov	r0, r4
 8012956:	f000 fbe3 	bl	8013120 <_calloc_r>
 801295a:	b160      	cbz	r0, 8012976 <_Balloc+0x56>
 801295c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8012960:	e00e      	b.n	8012980 <_Balloc+0x60>
 8012962:	2221      	movs	r2, #33	; 0x21
 8012964:	2104      	movs	r1, #4
 8012966:	4620      	mov	r0, r4
 8012968:	f000 fbda 	bl	8013120 <_calloc_r>
 801296c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801296e:	60e8      	str	r0, [r5, #12]
 8012970:	68db      	ldr	r3, [r3, #12]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d1e4      	bne.n	8012940 <_Balloc+0x20>
 8012976:	2000      	movs	r0, #0
 8012978:	bd70      	pop	{r4, r5, r6, pc}
 801297a:	6802      	ldr	r2, [r0, #0]
 801297c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8012980:	2300      	movs	r3, #0
 8012982:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012986:	e7f7      	b.n	8012978 <_Balloc+0x58>

08012988 <_Bfree>:
 8012988:	b570      	push	{r4, r5, r6, lr}
 801298a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801298c:	4606      	mov	r6, r0
 801298e:	460d      	mov	r5, r1
 8012990:	b93c      	cbnz	r4, 80129a2 <_Bfree+0x1a>
 8012992:	2010      	movs	r0, #16
 8012994:	f7fd fa90 	bl	800feb8 <malloc>
 8012998:	6270      	str	r0, [r6, #36]	; 0x24
 801299a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801299e:	6004      	str	r4, [r0, #0]
 80129a0:	60c4      	str	r4, [r0, #12]
 80129a2:	b13d      	cbz	r5, 80129b4 <_Bfree+0x2c>
 80129a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80129a6:	686a      	ldr	r2, [r5, #4]
 80129a8:	68db      	ldr	r3, [r3, #12]
 80129aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80129ae:	6029      	str	r1, [r5, #0]
 80129b0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80129b4:	bd70      	pop	{r4, r5, r6, pc}

080129b6 <__multadd>:
 80129b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129ba:	690d      	ldr	r5, [r1, #16]
 80129bc:	461f      	mov	r7, r3
 80129be:	4606      	mov	r6, r0
 80129c0:	460c      	mov	r4, r1
 80129c2:	f101 0c14 	add.w	ip, r1, #20
 80129c6:	2300      	movs	r3, #0
 80129c8:	f8dc 0000 	ldr.w	r0, [ip]
 80129cc:	b281      	uxth	r1, r0
 80129ce:	fb02 7101 	mla	r1, r2, r1, r7
 80129d2:	0c0f      	lsrs	r7, r1, #16
 80129d4:	0c00      	lsrs	r0, r0, #16
 80129d6:	fb02 7000 	mla	r0, r2, r0, r7
 80129da:	b289      	uxth	r1, r1
 80129dc:	3301      	adds	r3, #1
 80129de:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80129e2:	429d      	cmp	r5, r3
 80129e4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80129e8:	f84c 1b04 	str.w	r1, [ip], #4
 80129ec:	dcec      	bgt.n	80129c8 <__multadd+0x12>
 80129ee:	b1d7      	cbz	r7, 8012a26 <__multadd+0x70>
 80129f0:	68a3      	ldr	r3, [r4, #8]
 80129f2:	42ab      	cmp	r3, r5
 80129f4:	dc12      	bgt.n	8012a1c <__multadd+0x66>
 80129f6:	6861      	ldr	r1, [r4, #4]
 80129f8:	4630      	mov	r0, r6
 80129fa:	3101      	adds	r1, #1
 80129fc:	f7ff ff90 	bl	8012920 <_Balloc>
 8012a00:	6922      	ldr	r2, [r4, #16]
 8012a02:	3202      	adds	r2, #2
 8012a04:	f104 010c 	add.w	r1, r4, #12
 8012a08:	4680      	mov	r8, r0
 8012a0a:	0092      	lsls	r2, r2, #2
 8012a0c:	300c      	adds	r0, #12
 8012a0e:	f7fd fa63 	bl	800fed8 <memcpy>
 8012a12:	4621      	mov	r1, r4
 8012a14:	4630      	mov	r0, r6
 8012a16:	f7ff ffb7 	bl	8012988 <_Bfree>
 8012a1a:	4644      	mov	r4, r8
 8012a1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012a20:	3501      	adds	r5, #1
 8012a22:	615f      	str	r7, [r3, #20]
 8012a24:	6125      	str	r5, [r4, #16]
 8012a26:	4620      	mov	r0, r4
 8012a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a2c <__s2b>:
 8012a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a30:	460c      	mov	r4, r1
 8012a32:	4615      	mov	r5, r2
 8012a34:	461f      	mov	r7, r3
 8012a36:	2209      	movs	r2, #9
 8012a38:	3308      	adds	r3, #8
 8012a3a:	4606      	mov	r6, r0
 8012a3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a40:	2100      	movs	r1, #0
 8012a42:	2201      	movs	r2, #1
 8012a44:	429a      	cmp	r2, r3
 8012a46:	db20      	blt.n	8012a8a <__s2b+0x5e>
 8012a48:	4630      	mov	r0, r6
 8012a4a:	f7ff ff69 	bl	8012920 <_Balloc>
 8012a4e:	9b08      	ldr	r3, [sp, #32]
 8012a50:	6143      	str	r3, [r0, #20]
 8012a52:	2d09      	cmp	r5, #9
 8012a54:	f04f 0301 	mov.w	r3, #1
 8012a58:	6103      	str	r3, [r0, #16]
 8012a5a:	dd19      	ble.n	8012a90 <__s2b+0x64>
 8012a5c:	f104 0809 	add.w	r8, r4, #9
 8012a60:	46c1      	mov	r9, r8
 8012a62:	442c      	add	r4, r5
 8012a64:	f819 3b01 	ldrb.w	r3, [r9], #1
 8012a68:	4601      	mov	r1, r0
 8012a6a:	3b30      	subs	r3, #48	; 0x30
 8012a6c:	220a      	movs	r2, #10
 8012a6e:	4630      	mov	r0, r6
 8012a70:	f7ff ffa1 	bl	80129b6 <__multadd>
 8012a74:	45a1      	cmp	r9, r4
 8012a76:	d1f5      	bne.n	8012a64 <__s2b+0x38>
 8012a78:	eb08 0405 	add.w	r4, r8, r5
 8012a7c:	3c08      	subs	r4, #8
 8012a7e:	1b2d      	subs	r5, r5, r4
 8012a80:	1963      	adds	r3, r4, r5
 8012a82:	42bb      	cmp	r3, r7
 8012a84:	db07      	blt.n	8012a96 <__s2b+0x6a>
 8012a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a8a:	0052      	lsls	r2, r2, #1
 8012a8c:	3101      	adds	r1, #1
 8012a8e:	e7d9      	b.n	8012a44 <__s2b+0x18>
 8012a90:	340a      	adds	r4, #10
 8012a92:	2509      	movs	r5, #9
 8012a94:	e7f3      	b.n	8012a7e <__s2b+0x52>
 8012a96:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012a9a:	4601      	mov	r1, r0
 8012a9c:	3b30      	subs	r3, #48	; 0x30
 8012a9e:	220a      	movs	r2, #10
 8012aa0:	4630      	mov	r0, r6
 8012aa2:	f7ff ff88 	bl	80129b6 <__multadd>
 8012aa6:	e7eb      	b.n	8012a80 <__s2b+0x54>

08012aa8 <__hi0bits>:
 8012aa8:	0c02      	lsrs	r2, r0, #16
 8012aaa:	0412      	lsls	r2, r2, #16
 8012aac:	4603      	mov	r3, r0
 8012aae:	b9b2      	cbnz	r2, 8012ade <__hi0bits+0x36>
 8012ab0:	0403      	lsls	r3, r0, #16
 8012ab2:	2010      	movs	r0, #16
 8012ab4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012ab8:	bf04      	itt	eq
 8012aba:	021b      	lsleq	r3, r3, #8
 8012abc:	3008      	addeq	r0, #8
 8012abe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8012ac2:	bf04      	itt	eq
 8012ac4:	011b      	lsleq	r3, r3, #4
 8012ac6:	3004      	addeq	r0, #4
 8012ac8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012acc:	bf04      	itt	eq
 8012ace:	009b      	lsleq	r3, r3, #2
 8012ad0:	3002      	addeq	r0, #2
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	db06      	blt.n	8012ae4 <__hi0bits+0x3c>
 8012ad6:	005b      	lsls	r3, r3, #1
 8012ad8:	d503      	bpl.n	8012ae2 <__hi0bits+0x3a>
 8012ada:	3001      	adds	r0, #1
 8012adc:	4770      	bx	lr
 8012ade:	2000      	movs	r0, #0
 8012ae0:	e7e8      	b.n	8012ab4 <__hi0bits+0xc>
 8012ae2:	2020      	movs	r0, #32
 8012ae4:	4770      	bx	lr

08012ae6 <__lo0bits>:
 8012ae6:	6803      	ldr	r3, [r0, #0]
 8012ae8:	f013 0207 	ands.w	r2, r3, #7
 8012aec:	4601      	mov	r1, r0
 8012aee:	d00b      	beq.n	8012b08 <__lo0bits+0x22>
 8012af0:	07da      	lsls	r2, r3, #31
 8012af2:	d423      	bmi.n	8012b3c <__lo0bits+0x56>
 8012af4:	0798      	lsls	r0, r3, #30
 8012af6:	bf49      	itett	mi
 8012af8:	085b      	lsrmi	r3, r3, #1
 8012afa:	089b      	lsrpl	r3, r3, #2
 8012afc:	2001      	movmi	r0, #1
 8012afe:	600b      	strmi	r3, [r1, #0]
 8012b00:	bf5c      	itt	pl
 8012b02:	600b      	strpl	r3, [r1, #0]
 8012b04:	2002      	movpl	r0, #2
 8012b06:	4770      	bx	lr
 8012b08:	b298      	uxth	r0, r3
 8012b0a:	b9a8      	cbnz	r0, 8012b38 <__lo0bits+0x52>
 8012b0c:	0c1b      	lsrs	r3, r3, #16
 8012b0e:	2010      	movs	r0, #16
 8012b10:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012b14:	bf04      	itt	eq
 8012b16:	0a1b      	lsreq	r3, r3, #8
 8012b18:	3008      	addeq	r0, #8
 8012b1a:	071a      	lsls	r2, r3, #28
 8012b1c:	bf04      	itt	eq
 8012b1e:	091b      	lsreq	r3, r3, #4
 8012b20:	3004      	addeq	r0, #4
 8012b22:	079a      	lsls	r2, r3, #30
 8012b24:	bf04      	itt	eq
 8012b26:	089b      	lsreq	r3, r3, #2
 8012b28:	3002      	addeq	r0, #2
 8012b2a:	07da      	lsls	r2, r3, #31
 8012b2c:	d402      	bmi.n	8012b34 <__lo0bits+0x4e>
 8012b2e:	085b      	lsrs	r3, r3, #1
 8012b30:	d006      	beq.n	8012b40 <__lo0bits+0x5a>
 8012b32:	3001      	adds	r0, #1
 8012b34:	600b      	str	r3, [r1, #0]
 8012b36:	4770      	bx	lr
 8012b38:	4610      	mov	r0, r2
 8012b3a:	e7e9      	b.n	8012b10 <__lo0bits+0x2a>
 8012b3c:	2000      	movs	r0, #0
 8012b3e:	4770      	bx	lr
 8012b40:	2020      	movs	r0, #32
 8012b42:	4770      	bx	lr

08012b44 <__i2b>:
 8012b44:	b510      	push	{r4, lr}
 8012b46:	460c      	mov	r4, r1
 8012b48:	2101      	movs	r1, #1
 8012b4a:	f7ff fee9 	bl	8012920 <_Balloc>
 8012b4e:	2201      	movs	r2, #1
 8012b50:	6144      	str	r4, [r0, #20]
 8012b52:	6102      	str	r2, [r0, #16]
 8012b54:	bd10      	pop	{r4, pc}

08012b56 <__multiply>:
 8012b56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b5a:	4614      	mov	r4, r2
 8012b5c:	690a      	ldr	r2, [r1, #16]
 8012b5e:	6923      	ldr	r3, [r4, #16]
 8012b60:	429a      	cmp	r2, r3
 8012b62:	bfb8      	it	lt
 8012b64:	460b      	movlt	r3, r1
 8012b66:	4688      	mov	r8, r1
 8012b68:	bfbc      	itt	lt
 8012b6a:	46a0      	movlt	r8, r4
 8012b6c:	461c      	movlt	r4, r3
 8012b6e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012b72:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012b76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012b7a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012b7e:	eb07 0609 	add.w	r6, r7, r9
 8012b82:	42b3      	cmp	r3, r6
 8012b84:	bfb8      	it	lt
 8012b86:	3101      	addlt	r1, #1
 8012b88:	f7ff feca 	bl	8012920 <_Balloc>
 8012b8c:	f100 0514 	add.w	r5, r0, #20
 8012b90:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8012b94:	462b      	mov	r3, r5
 8012b96:	2200      	movs	r2, #0
 8012b98:	4573      	cmp	r3, lr
 8012b9a:	d316      	bcc.n	8012bca <__multiply+0x74>
 8012b9c:	f104 0214 	add.w	r2, r4, #20
 8012ba0:	f108 0114 	add.w	r1, r8, #20
 8012ba4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8012ba8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8012bac:	9300      	str	r3, [sp, #0]
 8012bae:	9b00      	ldr	r3, [sp, #0]
 8012bb0:	9201      	str	r2, [sp, #4]
 8012bb2:	4293      	cmp	r3, r2
 8012bb4:	d80c      	bhi.n	8012bd0 <__multiply+0x7a>
 8012bb6:	2e00      	cmp	r6, #0
 8012bb8:	dd03      	ble.n	8012bc2 <__multiply+0x6c>
 8012bba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d05d      	beq.n	8012c7e <__multiply+0x128>
 8012bc2:	6106      	str	r6, [r0, #16]
 8012bc4:	b003      	add	sp, #12
 8012bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bca:	f843 2b04 	str.w	r2, [r3], #4
 8012bce:	e7e3      	b.n	8012b98 <__multiply+0x42>
 8012bd0:	f8b2 b000 	ldrh.w	fp, [r2]
 8012bd4:	f1bb 0f00 	cmp.w	fp, #0
 8012bd8:	d023      	beq.n	8012c22 <__multiply+0xcc>
 8012bda:	4689      	mov	r9, r1
 8012bdc:	46ac      	mov	ip, r5
 8012bde:	f04f 0800 	mov.w	r8, #0
 8012be2:	f859 4b04 	ldr.w	r4, [r9], #4
 8012be6:	f8dc a000 	ldr.w	sl, [ip]
 8012bea:	b2a3      	uxth	r3, r4
 8012bec:	fa1f fa8a 	uxth.w	sl, sl
 8012bf0:	fb0b a303 	mla	r3, fp, r3, sl
 8012bf4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012bf8:	f8dc 4000 	ldr.w	r4, [ip]
 8012bfc:	4443      	add	r3, r8
 8012bfe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012c02:	fb0b 840a 	mla	r4, fp, sl, r8
 8012c06:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8012c0a:	46e2      	mov	sl, ip
 8012c0c:	b29b      	uxth	r3, r3
 8012c0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012c12:	454f      	cmp	r7, r9
 8012c14:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012c18:	f84a 3b04 	str.w	r3, [sl], #4
 8012c1c:	d82b      	bhi.n	8012c76 <__multiply+0x120>
 8012c1e:	f8cc 8004 	str.w	r8, [ip, #4]
 8012c22:	9b01      	ldr	r3, [sp, #4]
 8012c24:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8012c28:	3204      	adds	r2, #4
 8012c2a:	f1ba 0f00 	cmp.w	sl, #0
 8012c2e:	d020      	beq.n	8012c72 <__multiply+0x11c>
 8012c30:	682b      	ldr	r3, [r5, #0]
 8012c32:	4689      	mov	r9, r1
 8012c34:	46a8      	mov	r8, r5
 8012c36:	f04f 0b00 	mov.w	fp, #0
 8012c3a:	f8b9 c000 	ldrh.w	ip, [r9]
 8012c3e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8012c42:	fb0a 440c 	mla	r4, sl, ip, r4
 8012c46:	445c      	add	r4, fp
 8012c48:	46c4      	mov	ip, r8
 8012c4a:	b29b      	uxth	r3, r3
 8012c4c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012c50:	f84c 3b04 	str.w	r3, [ip], #4
 8012c54:	f859 3b04 	ldr.w	r3, [r9], #4
 8012c58:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8012c5c:	0c1b      	lsrs	r3, r3, #16
 8012c5e:	fb0a b303 	mla	r3, sl, r3, fp
 8012c62:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8012c66:	454f      	cmp	r7, r9
 8012c68:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8012c6c:	d805      	bhi.n	8012c7a <__multiply+0x124>
 8012c6e:	f8c8 3004 	str.w	r3, [r8, #4]
 8012c72:	3504      	adds	r5, #4
 8012c74:	e79b      	b.n	8012bae <__multiply+0x58>
 8012c76:	46d4      	mov	ip, sl
 8012c78:	e7b3      	b.n	8012be2 <__multiply+0x8c>
 8012c7a:	46e0      	mov	r8, ip
 8012c7c:	e7dd      	b.n	8012c3a <__multiply+0xe4>
 8012c7e:	3e01      	subs	r6, #1
 8012c80:	e799      	b.n	8012bb6 <__multiply+0x60>
	...

08012c84 <__pow5mult>:
 8012c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c88:	4615      	mov	r5, r2
 8012c8a:	f012 0203 	ands.w	r2, r2, #3
 8012c8e:	4606      	mov	r6, r0
 8012c90:	460f      	mov	r7, r1
 8012c92:	d007      	beq.n	8012ca4 <__pow5mult+0x20>
 8012c94:	3a01      	subs	r2, #1
 8012c96:	4c21      	ldr	r4, [pc, #132]	; (8012d1c <__pow5mult+0x98>)
 8012c98:	2300      	movs	r3, #0
 8012c9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012c9e:	f7ff fe8a 	bl	80129b6 <__multadd>
 8012ca2:	4607      	mov	r7, r0
 8012ca4:	10ad      	asrs	r5, r5, #2
 8012ca6:	d035      	beq.n	8012d14 <__pow5mult+0x90>
 8012ca8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012caa:	b93c      	cbnz	r4, 8012cbc <__pow5mult+0x38>
 8012cac:	2010      	movs	r0, #16
 8012cae:	f7fd f903 	bl	800feb8 <malloc>
 8012cb2:	6270      	str	r0, [r6, #36]	; 0x24
 8012cb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012cb8:	6004      	str	r4, [r0, #0]
 8012cba:	60c4      	str	r4, [r0, #12]
 8012cbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012cc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012cc4:	b94c      	cbnz	r4, 8012cda <__pow5mult+0x56>
 8012cc6:	f240 2171 	movw	r1, #625	; 0x271
 8012cca:	4630      	mov	r0, r6
 8012ccc:	f7ff ff3a 	bl	8012b44 <__i2b>
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8012cd6:	4604      	mov	r4, r0
 8012cd8:	6003      	str	r3, [r0, #0]
 8012cda:	f04f 0800 	mov.w	r8, #0
 8012cde:	07eb      	lsls	r3, r5, #31
 8012ce0:	d50a      	bpl.n	8012cf8 <__pow5mult+0x74>
 8012ce2:	4639      	mov	r1, r7
 8012ce4:	4622      	mov	r2, r4
 8012ce6:	4630      	mov	r0, r6
 8012ce8:	f7ff ff35 	bl	8012b56 <__multiply>
 8012cec:	4639      	mov	r1, r7
 8012cee:	4681      	mov	r9, r0
 8012cf0:	4630      	mov	r0, r6
 8012cf2:	f7ff fe49 	bl	8012988 <_Bfree>
 8012cf6:	464f      	mov	r7, r9
 8012cf8:	106d      	asrs	r5, r5, #1
 8012cfa:	d00b      	beq.n	8012d14 <__pow5mult+0x90>
 8012cfc:	6820      	ldr	r0, [r4, #0]
 8012cfe:	b938      	cbnz	r0, 8012d10 <__pow5mult+0x8c>
 8012d00:	4622      	mov	r2, r4
 8012d02:	4621      	mov	r1, r4
 8012d04:	4630      	mov	r0, r6
 8012d06:	f7ff ff26 	bl	8012b56 <__multiply>
 8012d0a:	6020      	str	r0, [r4, #0]
 8012d0c:	f8c0 8000 	str.w	r8, [r0]
 8012d10:	4604      	mov	r4, r0
 8012d12:	e7e4      	b.n	8012cde <__pow5mult+0x5a>
 8012d14:	4638      	mov	r0, r7
 8012d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d1a:	bf00      	nop
 8012d1c:	080145a0 	.word	0x080145a0

08012d20 <__lshift>:
 8012d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d24:	460c      	mov	r4, r1
 8012d26:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012d2a:	6923      	ldr	r3, [r4, #16]
 8012d2c:	6849      	ldr	r1, [r1, #4]
 8012d2e:	eb0a 0903 	add.w	r9, sl, r3
 8012d32:	68a3      	ldr	r3, [r4, #8]
 8012d34:	4607      	mov	r7, r0
 8012d36:	4616      	mov	r6, r2
 8012d38:	f109 0501 	add.w	r5, r9, #1
 8012d3c:	42ab      	cmp	r3, r5
 8012d3e:	db32      	blt.n	8012da6 <__lshift+0x86>
 8012d40:	4638      	mov	r0, r7
 8012d42:	f7ff fded 	bl	8012920 <_Balloc>
 8012d46:	2300      	movs	r3, #0
 8012d48:	4680      	mov	r8, r0
 8012d4a:	f100 0114 	add.w	r1, r0, #20
 8012d4e:	461a      	mov	r2, r3
 8012d50:	4553      	cmp	r3, sl
 8012d52:	db2b      	blt.n	8012dac <__lshift+0x8c>
 8012d54:	6920      	ldr	r0, [r4, #16]
 8012d56:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012d5a:	f104 0314 	add.w	r3, r4, #20
 8012d5e:	f016 021f 	ands.w	r2, r6, #31
 8012d62:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012d66:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012d6a:	d025      	beq.n	8012db8 <__lshift+0x98>
 8012d6c:	f1c2 0e20 	rsb	lr, r2, #32
 8012d70:	2000      	movs	r0, #0
 8012d72:	681e      	ldr	r6, [r3, #0]
 8012d74:	468a      	mov	sl, r1
 8012d76:	4096      	lsls	r6, r2
 8012d78:	4330      	orrs	r0, r6
 8012d7a:	f84a 0b04 	str.w	r0, [sl], #4
 8012d7e:	f853 0b04 	ldr.w	r0, [r3], #4
 8012d82:	459c      	cmp	ip, r3
 8012d84:	fa20 f00e 	lsr.w	r0, r0, lr
 8012d88:	d814      	bhi.n	8012db4 <__lshift+0x94>
 8012d8a:	6048      	str	r0, [r1, #4]
 8012d8c:	b108      	cbz	r0, 8012d92 <__lshift+0x72>
 8012d8e:	f109 0502 	add.w	r5, r9, #2
 8012d92:	3d01      	subs	r5, #1
 8012d94:	4638      	mov	r0, r7
 8012d96:	f8c8 5010 	str.w	r5, [r8, #16]
 8012d9a:	4621      	mov	r1, r4
 8012d9c:	f7ff fdf4 	bl	8012988 <_Bfree>
 8012da0:	4640      	mov	r0, r8
 8012da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012da6:	3101      	adds	r1, #1
 8012da8:	005b      	lsls	r3, r3, #1
 8012daa:	e7c7      	b.n	8012d3c <__lshift+0x1c>
 8012dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012db0:	3301      	adds	r3, #1
 8012db2:	e7cd      	b.n	8012d50 <__lshift+0x30>
 8012db4:	4651      	mov	r1, sl
 8012db6:	e7dc      	b.n	8012d72 <__lshift+0x52>
 8012db8:	3904      	subs	r1, #4
 8012dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8012dbe:	f841 2f04 	str.w	r2, [r1, #4]!
 8012dc2:	459c      	cmp	ip, r3
 8012dc4:	d8f9      	bhi.n	8012dba <__lshift+0x9a>
 8012dc6:	e7e4      	b.n	8012d92 <__lshift+0x72>

08012dc8 <__mcmp>:
 8012dc8:	6903      	ldr	r3, [r0, #16]
 8012dca:	690a      	ldr	r2, [r1, #16]
 8012dcc:	1a9b      	subs	r3, r3, r2
 8012dce:	b530      	push	{r4, r5, lr}
 8012dd0:	d10c      	bne.n	8012dec <__mcmp+0x24>
 8012dd2:	0092      	lsls	r2, r2, #2
 8012dd4:	3014      	adds	r0, #20
 8012dd6:	3114      	adds	r1, #20
 8012dd8:	1884      	adds	r4, r0, r2
 8012dda:	4411      	add	r1, r2
 8012ddc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012de0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012de4:	4295      	cmp	r5, r2
 8012de6:	d003      	beq.n	8012df0 <__mcmp+0x28>
 8012de8:	d305      	bcc.n	8012df6 <__mcmp+0x2e>
 8012dea:	2301      	movs	r3, #1
 8012dec:	4618      	mov	r0, r3
 8012dee:	bd30      	pop	{r4, r5, pc}
 8012df0:	42a0      	cmp	r0, r4
 8012df2:	d3f3      	bcc.n	8012ddc <__mcmp+0x14>
 8012df4:	e7fa      	b.n	8012dec <__mcmp+0x24>
 8012df6:	f04f 33ff 	mov.w	r3, #4294967295
 8012dfa:	e7f7      	b.n	8012dec <__mcmp+0x24>

08012dfc <__mdiff>:
 8012dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e00:	460d      	mov	r5, r1
 8012e02:	4607      	mov	r7, r0
 8012e04:	4611      	mov	r1, r2
 8012e06:	4628      	mov	r0, r5
 8012e08:	4614      	mov	r4, r2
 8012e0a:	f7ff ffdd 	bl	8012dc8 <__mcmp>
 8012e0e:	1e06      	subs	r6, r0, #0
 8012e10:	d108      	bne.n	8012e24 <__mdiff+0x28>
 8012e12:	4631      	mov	r1, r6
 8012e14:	4638      	mov	r0, r7
 8012e16:	f7ff fd83 	bl	8012920 <_Balloc>
 8012e1a:	2301      	movs	r3, #1
 8012e1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e24:	bfa4      	itt	ge
 8012e26:	4623      	movge	r3, r4
 8012e28:	462c      	movge	r4, r5
 8012e2a:	4638      	mov	r0, r7
 8012e2c:	6861      	ldr	r1, [r4, #4]
 8012e2e:	bfa6      	itte	ge
 8012e30:	461d      	movge	r5, r3
 8012e32:	2600      	movge	r6, #0
 8012e34:	2601      	movlt	r6, #1
 8012e36:	f7ff fd73 	bl	8012920 <_Balloc>
 8012e3a:	692b      	ldr	r3, [r5, #16]
 8012e3c:	60c6      	str	r6, [r0, #12]
 8012e3e:	6926      	ldr	r6, [r4, #16]
 8012e40:	f105 0914 	add.w	r9, r5, #20
 8012e44:	f104 0214 	add.w	r2, r4, #20
 8012e48:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8012e4c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8012e50:	f100 0514 	add.w	r5, r0, #20
 8012e54:	f04f 0e00 	mov.w	lr, #0
 8012e58:	f852 ab04 	ldr.w	sl, [r2], #4
 8012e5c:	f859 4b04 	ldr.w	r4, [r9], #4
 8012e60:	fa1e f18a 	uxtah	r1, lr, sl
 8012e64:	b2a3      	uxth	r3, r4
 8012e66:	1ac9      	subs	r1, r1, r3
 8012e68:	0c23      	lsrs	r3, r4, #16
 8012e6a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8012e6e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8012e72:	b289      	uxth	r1, r1
 8012e74:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8012e78:	45c8      	cmp	r8, r9
 8012e7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8012e7e:	4694      	mov	ip, r2
 8012e80:	f845 3b04 	str.w	r3, [r5], #4
 8012e84:	d8e8      	bhi.n	8012e58 <__mdiff+0x5c>
 8012e86:	45bc      	cmp	ip, r7
 8012e88:	d304      	bcc.n	8012e94 <__mdiff+0x98>
 8012e8a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8012e8e:	b183      	cbz	r3, 8012eb2 <__mdiff+0xb6>
 8012e90:	6106      	str	r6, [r0, #16]
 8012e92:	e7c5      	b.n	8012e20 <__mdiff+0x24>
 8012e94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012e98:	fa1e f381 	uxtah	r3, lr, r1
 8012e9c:	141a      	asrs	r2, r3, #16
 8012e9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012ea2:	b29b      	uxth	r3, r3
 8012ea4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012ea8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8012eac:	f845 3b04 	str.w	r3, [r5], #4
 8012eb0:	e7e9      	b.n	8012e86 <__mdiff+0x8a>
 8012eb2:	3e01      	subs	r6, #1
 8012eb4:	e7e9      	b.n	8012e8a <__mdiff+0x8e>
	...

08012eb8 <__ulp>:
 8012eb8:	4b12      	ldr	r3, [pc, #72]	; (8012f04 <__ulp+0x4c>)
 8012eba:	ee10 2a90 	vmov	r2, s1
 8012ebe:	401a      	ands	r2, r3
 8012ec0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	dd04      	ble.n	8012ed2 <__ulp+0x1a>
 8012ec8:	2000      	movs	r0, #0
 8012eca:	4619      	mov	r1, r3
 8012ecc:	ec41 0b10 	vmov	d0, r0, r1
 8012ed0:	4770      	bx	lr
 8012ed2:	425b      	negs	r3, r3
 8012ed4:	151b      	asrs	r3, r3, #20
 8012ed6:	2b13      	cmp	r3, #19
 8012ed8:	f04f 0000 	mov.w	r0, #0
 8012edc:	f04f 0100 	mov.w	r1, #0
 8012ee0:	dc04      	bgt.n	8012eec <__ulp+0x34>
 8012ee2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8012ee6:	fa42 f103 	asr.w	r1, r2, r3
 8012eea:	e7ef      	b.n	8012ecc <__ulp+0x14>
 8012eec:	3b14      	subs	r3, #20
 8012eee:	2b1e      	cmp	r3, #30
 8012ef0:	f04f 0201 	mov.w	r2, #1
 8012ef4:	bfda      	itte	le
 8012ef6:	f1c3 031f 	rsble	r3, r3, #31
 8012efa:	fa02 f303 	lslle.w	r3, r2, r3
 8012efe:	4613      	movgt	r3, r2
 8012f00:	4618      	mov	r0, r3
 8012f02:	e7e3      	b.n	8012ecc <__ulp+0x14>
 8012f04:	7ff00000 	.word	0x7ff00000

08012f08 <__b2d>:
 8012f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f0a:	6905      	ldr	r5, [r0, #16]
 8012f0c:	f100 0714 	add.w	r7, r0, #20
 8012f10:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012f14:	1f2e      	subs	r6, r5, #4
 8012f16:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012f1a:	4620      	mov	r0, r4
 8012f1c:	f7ff fdc4 	bl	8012aa8 <__hi0bits>
 8012f20:	f1c0 0320 	rsb	r3, r0, #32
 8012f24:	280a      	cmp	r0, #10
 8012f26:	600b      	str	r3, [r1, #0]
 8012f28:	f8df c074 	ldr.w	ip, [pc, #116]	; 8012fa0 <__b2d+0x98>
 8012f2c:	dc14      	bgt.n	8012f58 <__b2d+0x50>
 8012f2e:	f1c0 0e0b 	rsb	lr, r0, #11
 8012f32:	fa24 f10e 	lsr.w	r1, r4, lr
 8012f36:	42b7      	cmp	r7, r6
 8012f38:	ea41 030c 	orr.w	r3, r1, ip
 8012f3c:	bf34      	ite	cc
 8012f3e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012f42:	2100      	movcs	r1, #0
 8012f44:	3015      	adds	r0, #21
 8012f46:	fa04 f000 	lsl.w	r0, r4, r0
 8012f4a:	fa21 f10e 	lsr.w	r1, r1, lr
 8012f4e:	ea40 0201 	orr.w	r2, r0, r1
 8012f52:	ec43 2b10 	vmov	d0, r2, r3
 8012f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f58:	42b7      	cmp	r7, r6
 8012f5a:	bf3a      	itte	cc
 8012f5c:	f1a5 0608 	subcc.w	r6, r5, #8
 8012f60:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012f64:	2100      	movcs	r1, #0
 8012f66:	380b      	subs	r0, #11
 8012f68:	d015      	beq.n	8012f96 <__b2d+0x8e>
 8012f6a:	4084      	lsls	r4, r0
 8012f6c:	f1c0 0520 	rsb	r5, r0, #32
 8012f70:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8012f74:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8012f78:	42be      	cmp	r6, r7
 8012f7a:	fa21 fc05 	lsr.w	ip, r1, r5
 8012f7e:	ea44 030c 	orr.w	r3, r4, ip
 8012f82:	bf8c      	ite	hi
 8012f84:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012f88:	2400      	movls	r4, #0
 8012f8a:	fa01 f000 	lsl.w	r0, r1, r0
 8012f8e:	40ec      	lsrs	r4, r5
 8012f90:	ea40 0204 	orr.w	r2, r0, r4
 8012f94:	e7dd      	b.n	8012f52 <__b2d+0x4a>
 8012f96:	ea44 030c 	orr.w	r3, r4, ip
 8012f9a:	460a      	mov	r2, r1
 8012f9c:	e7d9      	b.n	8012f52 <__b2d+0x4a>
 8012f9e:	bf00      	nop
 8012fa0:	3ff00000 	.word	0x3ff00000

08012fa4 <__d2b>:
 8012fa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012fa8:	460e      	mov	r6, r1
 8012faa:	2101      	movs	r1, #1
 8012fac:	ec59 8b10 	vmov	r8, r9, d0
 8012fb0:	4615      	mov	r5, r2
 8012fb2:	f7ff fcb5 	bl	8012920 <_Balloc>
 8012fb6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8012fba:	4607      	mov	r7, r0
 8012fbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012fc0:	bb34      	cbnz	r4, 8013010 <__d2b+0x6c>
 8012fc2:	9301      	str	r3, [sp, #4]
 8012fc4:	f1b8 0300 	subs.w	r3, r8, #0
 8012fc8:	d027      	beq.n	801301a <__d2b+0x76>
 8012fca:	a802      	add	r0, sp, #8
 8012fcc:	f840 3d08 	str.w	r3, [r0, #-8]!
 8012fd0:	f7ff fd89 	bl	8012ae6 <__lo0bits>
 8012fd4:	9900      	ldr	r1, [sp, #0]
 8012fd6:	b1f0      	cbz	r0, 8013016 <__d2b+0x72>
 8012fd8:	9a01      	ldr	r2, [sp, #4]
 8012fda:	f1c0 0320 	rsb	r3, r0, #32
 8012fde:	fa02 f303 	lsl.w	r3, r2, r3
 8012fe2:	430b      	orrs	r3, r1
 8012fe4:	40c2      	lsrs	r2, r0
 8012fe6:	617b      	str	r3, [r7, #20]
 8012fe8:	9201      	str	r2, [sp, #4]
 8012fea:	9b01      	ldr	r3, [sp, #4]
 8012fec:	61bb      	str	r3, [r7, #24]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	bf14      	ite	ne
 8012ff2:	2102      	movne	r1, #2
 8012ff4:	2101      	moveq	r1, #1
 8012ff6:	6139      	str	r1, [r7, #16]
 8012ff8:	b1c4      	cbz	r4, 801302c <__d2b+0x88>
 8012ffa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8012ffe:	4404      	add	r4, r0
 8013000:	6034      	str	r4, [r6, #0]
 8013002:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013006:	6028      	str	r0, [r5, #0]
 8013008:	4638      	mov	r0, r7
 801300a:	b003      	add	sp, #12
 801300c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013010:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013014:	e7d5      	b.n	8012fc2 <__d2b+0x1e>
 8013016:	6179      	str	r1, [r7, #20]
 8013018:	e7e7      	b.n	8012fea <__d2b+0x46>
 801301a:	a801      	add	r0, sp, #4
 801301c:	f7ff fd63 	bl	8012ae6 <__lo0bits>
 8013020:	9b01      	ldr	r3, [sp, #4]
 8013022:	617b      	str	r3, [r7, #20]
 8013024:	2101      	movs	r1, #1
 8013026:	6139      	str	r1, [r7, #16]
 8013028:	3020      	adds	r0, #32
 801302a:	e7e5      	b.n	8012ff8 <__d2b+0x54>
 801302c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013030:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013034:	6030      	str	r0, [r6, #0]
 8013036:	6918      	ldr	r0, [r3, #16]
 8013038:	f7ff fd36 	bl	8012aa8 <__hi0bits>
 801303c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013040:	e7e1      	b.n	8013006 <__d2b+0x62>

08013042 <__ratio>:
 8013042:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013046:	4688      	mov	r8, r1
 8013048:	4669      	mov	r1, sp
 801304a:	4681      	mov	r9, r0
 801304c:	f7ff ff5c 	bl	8012f08 <__b2d>
 8013050:	a901      	add	r1, sp, #4
 8013052:	4640      	mov	r0, r8
 8013054:	ec57 6b10 	vmov	r6, r7, d0
 8013058:	ee10 4a10 	vmov	r4, s0
 801305c:	f7ff ff54 	bl	8012f08 <__b2d>
 8013060:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013064:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013068:	eba3 0c02 	sub.w	ip, r3, r2
 801306c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013070:	1a9b      	subs	r3, r3, r2
 8013072:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013076:	ec51 0b10 	vmov	r0, r1, d0
 801307a:	2b00      	cmp	r3, #0
 801307c:	ee10 aa10 	vmov	sl, s0
 8013080:	bfce      	itee	gt
 8013082:	463a      	movgt	r2, r7
 8013084:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013088:	460a      	movle	r2, r1
 801308a:	463d      	mov	r5, r7
 801308c:	468b      	mov	fp, r1
 801308e:	bfcc      	ite	gt
 8013090:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8013094:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013098:	ec45 4b17 	vmov	d7, r4, r5
 801309c:	ec4b ab16 	vmov	d6, sl, fp
 80130a0:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80130a4:	b003      	add	sp, #12
 80130a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080130aa <__copybits>:
 80130aa:	3901      	subs	r1, #1
 80130ac:	b510      	push	{r4, lr}
 80130ae:	1149      	asrs	r1, r1, #5
 80130b0:	6914      	ldr	r4, [r2, #16]
 80130b2:	3101      	adds	r1, #1
 80130b4:	f102 0314 	add.w	r3, r2, #20
 80130b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80130bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80130c0:	42a3      	cmp	r3, r4
 80130c2:	4602      	mov	r2, r0
 80130c4:	d303      	bcc.n	80130ce <__copybits+0x24>
 80130c6:	2300      	movs	r3, #0
 80130c8:	428a      	cmp	r2, r1
 80130ca:	d305      	bcc.n	80130d8 <__copybits+0x2e>
 80130cc:	bd10      	pop	{r4, pc}
 80130ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80130d2:	f840 2b04 	str.w	r2, [r0], #4
 80130d6:	e7f3      	b.n	80130c0 <__copybits+0x16>
 80130d8:	f842 3b04 	str.w	r3, [r2], #4
 80130dc:	e7f4      	b.n	80130c8 <__copybits+0x1e>

080130de <__any_on>:
 80130de:	f100 0214 	add.w	r2, r0, #20
 80130e2:	6900      	ldr	r0, [r0, #16]
 80130e4:	114b      	asrs	r3, r1, #5
 80130e6:	4298      	cmp	r0, r3
 80130e8:	b510      	push	{r4, lr}
 80130ea:	db11      	blt.n	8013110 <__any_on+0x32>
 80130ec:	dd0a      	ble.n	8013104 <__any_on+0x26>
 80130ee:	f011 011f 	ands.w	r1, r1, #31
 80130f2:	d007      	beq.n	8013104 <__any_on+0x26>
 80130f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80130f8:	fa24 f001 	lsr.w	r0, r4, r1
 80130fc:	fa00 f101 	lsl.w	r1, r0, r1
 8013100:	428c      	cmp	r4, r1
 8013102:	d10b      	bne.n	801311c <__any_on+0x3e>
 8013104:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013108:	4293      	cmp	r3, r2
 801310a:	d803      	bhi.n	8013114 <__any_on+0x36>
 801310c:	2000      	movs	r0, #0
 801310e:	bd10      	pop	{r4, pc}
 8013110:	4603      	mov	r3, r0
 8013112:	e7f7      	b.n	8013104 <__any_on+0x26>
 8013114:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013118:	2900      	cmp	r1, #0
 801311a:	d0f5      	beq.n	8013108 <__any_on+0x2a>
 801311c:	2001      	movs	r0, #1
 801311e:	e7f6      	b.n	801310e <__any_on+0x30>

08013120 <_calloc_r>:
 8013120:	b538      	push	{r3, r4, r5, lr}
 8013122:	fb02 f401 	mul.w	r4, r2, r1
 8013126:	4621      	mov	r1, r4
 8013128:	f7fc ff38 	bl	800ff9c <_malloc_r>
 801312c:	4605      	mov	r5, r0
 801312e:	b118      	cbz	r0, 8013138 <_calloc_r+0x18>
 8013130:	4622      	mov	r2, r4
 8013132:	2100      	movs	r1, #0
 8013134:	f7fc fedb 	bl	800feee <memset>
 8013138:	4628      	mov	r0, r5
 801313a:	bd38      	pop	{r3, r4, r5, pc}

0801313c <_realloc_r>:
 801313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801313e:	4607      	mov	r7, r0
 8013140:	4614      	mov	r4, r2
 8013142:	460e      	mov	r6, r1
 8013144:	b921      	cbnz	r1, 8013150 <_realloc_r+0x14>
 8013146:	4611      	mov	r1, r2
 8013148:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801314c:	f7fc bf26 	b.w	800ff9c <_malloc_r>
 8013150:	b922      	cbnz	r2, 801315c <_realloc_r+0x20>
 8013152:	f7fc fed5 	bl	800ff00 <_free_r>
 8013156:	4625      	mov	r5, r4
 8013158:	4628      	mov	r0, r5
 801315a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801315c:	f000 fd2b 	bl	8013bb6 <_malloc_usable_size_r>
 8013160:	42a0      	cmp	r0, r4
 8013162:	d20f      	bcs.n	8013184 <_realloc_r+0x48>
 8013164:	4621      	mov	r1, r4
 8013166:	4638      	mov	r0, r7
 8013168:	f7fc ff18 	bl	800ff9c <_malloc_r>
 801316c:	4605      	mov	r5, r0
 801316e:	2800      	cmp	r0, #0
 8013170:	d0f2      	beq.n	8013158 <_realloc_r+0x1c>
 8013172:	4631      	mov	r1, r6
 8013174:	4622      	mov	r2, r4
 8013176:	f7fc feaf 	bl	800fed8 <memcpy>
 801317a:	4631      	mov	r1, r6
 801317c:	4638      	mov	r0, r7
 801317e:	f7fc febf 	bl	800ff00 <_free_r>
 8013182:	e7e9      	b.n	8013158 <_realloc_r+0x1c>
 8013184:	4635      	mov	r5, r6
 8013186:	e7e7      	b.n	8013158 <_realloc_r+0x1c>

08013188 <__ssputs_r>:
 8013188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801318c:	688e      	ldr	r6, [r1, #8]
 801318e:	429e      	cmp	r6, r3
 8013190:	4682      	mov	sl, r0
 8013192:	460c      	mov	r4, r1
 8013194:	4690      	mov	r8, r2
 8013196:	4699      	mov	r9, r3
 8013198:	d837      	bhi.n	801320a <__ssputs_r+0x82>
 801319a:	898a      	ldrh	r2, [r1, #12]
 801319c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80131a0:	d031      	beq.n	8013206 <__ssputs_r+0x7e>
 80131a2:	6825      	ldr	r5, [r4, #0]
 80131a4:	6909      	ldr	r1, [r1, #16]
 80131a6:	1a6f      	subs	r7, r5, r1
 80131a8:	6965      	ldr	r5, [r4, #20]
 80131aa:	2302      	movs	r3, #2
 80131ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80131b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80131b4:	f109 0301 	add.w	r3, r9, #1
 80131b8:	443b      	add	r3, r7
 80131ba:	429d      	cmp	r5, r3
 80131bc:	bf38      	it	cc
 80131be:	461d      	movcc	r5, r3
 80131c0:	0553      	lsls	r3, r2, #21
 80131c2:	d530      	bpl.n	8013226 <__ssputs_r+0x9e>
 80131c4:	4629      	mov	r1, r5
 80131c6:	f7fc fee9 	bl	800ff9c <_malloc_r>
 80131ca:	4606      	mov	r6, r0
 80131cc:	b950      	cbnz	r0, 80131e4 <__ssputs_r+0x5c>
 80131ce:	230c      	movs	r3, #12
 80131d0:	f8ca 3000 	str.w	r3, [sl]
 80131d4:	89a3      	ldrh	r3, [r4, #12]
 80131d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131da:	81a3      	strh	r3, [r4, #12]
 80131dc:	f04f 30ff 	mov.w	r0, #4294967295
 80131e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131e4:	463a      	mov	r2, r7
 80131e6:	6921      	ldr	r1, [r4, #16]
 80131e8:	f7fc fe76 	bl	800fed8 <memcpy>
 80131ec:	89a3      	ldrh	r3, [r4, #12]
 80131ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80131f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131f6:	81a3      	strh	r3, [r4, #12]
 80131f8:	6126      	str	r6, [r4, #16]
 80131fa:	6165      	str	r5, [r4, #20]
 80131fc:	443e      	add	r6, r7
 80131fe:	1bed      	subs	r5, r5, r7
 8013200:	6026      	str	r6, [r4, #0]
 8013202:	60a5      	str	r5, [r4, #8]
 8013204:	464e      	mov	r6, r9
 8013206:	454e      	cmp	r6, r9
 8013208:	d900      	bls.n	801320c <__ssputs_r+0x84>
 801320a:	464e      	mov	r6, r9
 801320c:	4632      	mov	r2, r6
 801320e:	4641      	mov	r1, r8
 8013210:	6820      	ldr	r0, [r4, #0]
 8013212:	f000 fcb7 	bl	8013b84 <memmove>
 8013216:	68a3      	ldr	r3, [r4, #8]
 8013218:	1b9b      	subs	r3, r3, r6
 801321a:	60a3      	str	r3, [r4, #8]
 801321c:	6823      	ldr	r3, [r4, #0]
 801321e:	441e      	add	r6, r3
 8013220:	6026      	str	r6, [r4, #0]
 8013222:	2000      	movs	r0, #0
 8013224:	e7dc      	b.n	80131e0 <__ssputs_r+0x58>
 8013226:	462a      	mov	r2, r5
 8013228:	f7ff ff88 	bl	801313c <_realloc_r>
 801322c:	4606      	mov	r6, r0
 801322e:	2800      	cmp	r0, #0
 8013230:	d1e2      	bne.n	80131f8 <__ssputs_r+0x70>
 8013232:	6921      	ldr	r1, [r4, #16]
 8013234:	4650      	mov	r0, sl
 8013236:	f7fc fe63 	bl	800ff00 <_free_r>
 801323a:	e7c8      	b.n	80131ce <__ssputs_r+0x46>

0801323c <_svfiprintf_r>:
 801323c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013240:	461d      	mov	r5, r3
 8013242:	898b      	ldrh	r3, [r1, #12]
 8013244:	061f      	lsls	r7, r3, #24
 8013246:	b09d      	sub	sp, #116	; 0x74
 8013248:	4680      	mov	r8, r0
 801324a:	460c      	mov	r4, r1
 801324c:	4616      	mov	r6, r2
 801324e:	d50f      	bpl.n	8013270 <_svfiprintf_r+0x34>
 8013250:	690b      	ldr	r3, [r1, #16]
 8013252:	b96b      	cbnz	r3, 8013270 <_svfiprintf_r+0x34>
 8013254:	2140      	movs	r1, #64	; 0x40
 8013256:	f7fc fea1 	bl	800ff9c <_malloc_r>
 801325a:	6020      	str	r0, [r4, #0]
 801325c:	6120      	str	r0, [r4, #16]
 801325e:	b928      	cbnz	r0, 801326c <_svfiprintf_r+0x30>
 8013260:	230c      	movs	r3, #12
 8013262:	f8c8 3000 	str.w	r3, [r8]
 8013266:	f04f 30ff 	mov.w	r0, #4294967295
 801326a:	e0c8      	b.n	80133fe <_svfiprintf_r+0x1c2>
 801326c:	2340      	movs	r3, #64	; 0x40
 801326e:	6163      	str	r3, [r4, #20]
 8013270:	2300      	movs	r3, #0
 8013272:	9309      	str	r3, [sp, #36]	; 0x24
 8013274:	2320      	movs	r3, #32
 8013276:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801327a:	2330      	movs	r3, #48	; 0x30
 801327c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013280:	9503      	str	r5, [sp, #12]
 8013282:	f04f 0b01 	mov.w	fp, #1
 8013286:	4637      	mov	r7, r6
 8013288:	463d      	mov	r5, r7
 801328a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801328e:	b10b      	cbz	r3, 8013294 <_svfiprintf_r+0x58>
 8013290:	2b25      	cmp	r3, #37	; 0x25
 8013292:	d13e      	bne.n	8013312 <_svfiprintf_r+0xd6>
 8013294:	ebb7 0a06 	subs.w	sl, r7, r6
 8013298:	d00b      	beq.n	80132b2 <_svfiprintf_r+0x76>
 801329a:	4653      	mov	r3, sl
 801329c:	4632      	mov	r2, r6
 801329e:	4621      	mov	r1, r4
 80132a0:	4640      	mov	r0, r8
 80132a2:	f7ff ff71 	bl	8013188 <__ssputs_r>
 80132a6:	3001      	adds	r0, #1
 80132a8:	f000 80a4 	beq.w	80133f4 <_svfiprintf_r+0x1b8>
 80132ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132ae:	4453      	add	r3, sl
 80132b0:	9309      	str	r3, [sp, #36]	; 0x24
 80132b2:	783b      	ldrb	r3, [r7, #0]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	f000 809d 	beq.w	80133f4 <_svfiprintf_r+0x1b8>
 80132ba:	2300      	movs	r3, #0
 80132bc:	f04f 32ff 	mov.w	r2, #4294967295
 80132c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80132c4:	9304      	str	r3, [sp, #16]
 80132c6:	9307      	str	r3, [sp, #28]
 80132c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80132cc:	931a      	str	r3, [sp, #104]	; 0x68
 80132ce:	462f      	mov	r7, r5
 80132d0:	2205      	movs	r2, #5
 80132d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80132d6:	4850      	ldr	r0, [pc, #320]	; (8013418 <_svfiprintf_r+0x1dc>)
 80132d8:	f7ed f80a 	bl	80002f0 <memchr>
 80132dc:	9b04      	ldr	r3, [sp, #16]
 80132de:	b9d0      	cbnz	r0, 8013316 <_svfiprintf_r+0xda>
 80132e0:	06d9      	lsls	r1, r3, #27
 80132e2:	bf44      	itt	mi
 80132e4:	2220      	movmi	r2, #32
 80132e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80132ea:	071a      	lsls	r2, r3, #28
 80132ec:	bf44      	itt	mi
 80132ee:	222b      	movmi	r2, #43	; 0x2b
 80132f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80132f4:	782a      	ldrb	r2, [r5, #0]
 80132f6:	2a2a      	cmp	r2, #42	; 0x2a
 80132f8:	d015      	beq.n	8013326 <_svfiprintf_r+0xea>
 80132fa:	9a07      	ldr	r2, [sp, #28]
 80132fc:	462f      	mov	r7, r5
 80132fe:	2000      	movs	r0, #0
 8013300:	250a      	movs	r5, #10
 8013302:	4639      	mov	r1, r7
 8013304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013308:	3b30      	subs	r3, #48	; 0x30
 801330a:	2b09      	cmp	r3, #9
 801330c:	d94d      	bls.n	80133aa <_svfiprintf_r+0x16e>
 801330e:	b1b8      	cbz	r0, 8013340 <_svfiprintf_r+0x104>
 8013310:	e00f      	b.n	8013332 <_svfiprintf_r+0xf6>
 8013312:	462f      	mov	r7, r5
 8013314:	e7b8      	b.n	8013288 <_svfiprintf_r+0x4c>
 8013316:	4a40      	ldr	r2, [pc, #256]	; (8013418 <_svfiprintf_r+0x1dc>)
 8013318:	1a80      	subs	r0, r0, r2
 801331a:	fa0b f000 	lsl.w	r0, fp, r0
 801331e:	4318      	orrs	r0, r3
 8013320:	9004      	str	r0, [sp, #16]
 8013322:	463d      	mov	r5, r7
 8013324:	e7d3      	b.n	80132ce <_svfiprintf_r+0x92>
 8013326:	9a03      	ldr	r2, [sp, #12]
 8013328:	1d11      	adds	r1, r2, #4
 801332a:	6812      	ldr	r2, [r2, #0]
 801332c:	9103      	str	r1, [sp, #12]
 801332e:	2a00      	cmp	r2, #0
 8013330:	db01      	blt.n	8013336 <_svfiprintf_r+0xfa>
 8013332:	9207      	str	r2, [sp, #28]
 8013334:	e004      	b.n	8013340 <_svfiprintf_r+0x104>
 8013336:	4252      	negs	r2, r2
 8013338:	f043 0302 	orr.w	r3, r3, #2
 801333c:	9207      	str	r2, [sp, #28]
 801333e:	9304      	str	r3, [sp, #16]
 8013340:	783b      	ldrb	r3, [r7, #0]
 8013342:	2b2e      	cmp	r3, #46	; 0x2e
 8013344:	d10c      	bne.n	8013360 <_svfiprintf_r+0x124>
 8013346:	787b      	ldrb	r3, [r7, #1]
 8013348:	2b2a      	cmp	r3, #42	; 0x2a
 801334a:	d133      	bne.n	80133b4 <_svfiprintf_r+0x178>
 801334c:	9b03      	ldr	r3, [sp, #12]
 801334e:	1d1a      	adds	r2, r3, #4
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	9203      	str	r2, [sp, #12]
 8013354:	2b00      	cmp	r3, #0
 8013356:	bfb8      	it	lt
 8013358:	f04f 33ff 	movlt.w	r3, #4294967295
 801335c:	3702      	adds	r7, #2
 801335e:	9305      	str	r3, [sp, #20]
 8013360:	4d2e      	ldr	r5, [pc, #184]	; (801341c <_svfiprintf_r+0x1e0>)
 8013362:	7839      	ldrb	r1, [r7, #0]
 8013364:	2203      	movs	r2, #3
 8013366:	4628      	mov	r0, r5
 8013368:	f7ec ffc2 	bl	80002f0 <memchr>
 801336c:	b138      	cbz	r0, 801337e <_svfiprintf_r+0x142>
 801336e:	2340      	movs	r3, #64	; 0x40
 8013370:	1b40      	subs	r0, r0, r5
 8013372:	fa03 f000 	lsl.w	r0, r3, r0
 8013376:	9b04      	ldr	r3, [sp, #16]
 8013378:	4303      	orrs	r3, r0
 801337a:	3701      	adds	r7, #1
 801337c:	9304      	str	r3, [sp, #16]
 801337e:	7839      	ldrb	r1, [r7, #0]
 8013380:	4827      	ldr	r0, [pc, #156]	; (8013420 <_svfiprintf_r+0x1e4>)
 8013382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013386:	2206      	movs	r2, #6
 8013388:	1c7e      	adds	r6, r7, #1
 801338a:	f7ec ffb1 	bl	80002f0 <memchr>
 801338e:	2800      	cmp	r0, #0
 8013390:	d038      	beq.n	8013404 <_svfiprintf_r+0x1c8>
 8013392:	4b24      	ldr	r3, [pc, #144]	; (8013424 <_svfiprintf_r+0x1e8>)
 8013394:	bb13      	cbnz	r3, 80133dc <_svfiprintf_r+0x1a0>
 8013396:	9b03      	ldr	r3, [sp, #12]
 8013398:	3307      	adds	r3, #7
 801339a:	f023 0307 	bic.w	r3, r3, #7
 801339e:	3308      	adds	r3, #8
 80133a0:	9303      	str	r3, [sp, #12]
 80133a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133a4:	444b      	add	r3, r9
 80133a6:	9309      	str	r3, [sp, #36]	; 0x24
 80133a8:	e76d      	b.n	8013286 <_svfiprintf_r+0x4a>
 80133aa:	fb05 3202 	mla	r2, r5, r2, r3
 80133ae:	2001      	movs	r0, #1
 80133b0:	460f      	mov	r7, r1
 80133b2:	e7a6      	b.n	8013302 <_svfiprintf_r+0xc6>
 80133b4:	2300      	movs	r3, #0
 80133b6:	3701      	adds	r7, #1
 80133b8:	9305      	str	r3, [sp, #20]
 80133ba:	4619      	mov	r1, r3
 80133bc:	250a      	movs	r5, #10
 80133be:	4638      	mov	r0, r7
 80133c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80133c4:	3a30      	subs	r2, #48	; 0x30
 80133c6:	2a09      	cmp	r2, #9
 80133c8:	d903      	bls.n	80133d2 <_svfiprintf_r+0x196>
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d0c8      	beq.n	8013360 <_svfiprintf_r+0x124>
 80133ce:	9105      	str	r1, [sp, #20]
 80133d0:	e7c6      	b.n	8013360 <_svfiprintf_r+0x124>
 80133d2:	fb05 2101 	mla	r1, r5, r1, r2
 80133d6:	2301      	movs	r3, #1
 80133d8:	4607      	mov	r7, r0
 80133da:	e7f0      	b.n	80133be <_svfiprintf_r+0x182>
 80133dc:	ab03      	add	r3, sp, #12
 80133de:	9300      	str	r3, [sp, #0]
 80133e0:	4622      	mov	r2, r4
 80133e2:	4b11      	ldr	r3, [pc, #68]	; (8013428 <_svfiprintf_r+0x1ec>)
 80133e4:	a904      	add	r1, sp, #16
 80133e6:	4640      	mov	r0, r8
 80133e8:	f7fc feba 	bl	8010160 <_printf_float>
 80133ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80133f0:	4681      	mov	r9, r0
 80133f2:	d1d6      	bne.n	80133a2 <_svfiprintf_r+0x166>
 80133f4:	89a3      	ldrh	r3, [r4, #12]
 80133f6:	065b      	lsls	r3, r3, #25
 80133f8:	f53f af35 	bmi.w	8013266 <_svfiprintf_r+0x2a>
 80133fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80133fe:	b01d      	add	sp, #116	; 0x74
 8013400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013404:	ab03      	add	r3, sp, #12
 8013406:	9300      	str	r3, [sp, #0]
 8013408:	4622      	mov	r2, r4
 801340a:	4b07      	ldr	r3, [pc, #28]	; (8013428 <_svfiprintf_r+0x1ec>)
 801340c:	a904      	add	r1, sp, #16
 801340e:	4640      	mov	r0, r8
 8013410:	f7fd f948 	bl	80106a4 <_printf_i>
 8013414:	e7ea      	b.n	80133ec <_svfiprintf_r+0x1b0>
 8013416:	bf00      	nop
 8013418:	080145ac 	.word	0x080145ac
 801341c:	080145b2 	.word	0x080145b2
 8013420:	080145b6 	.word	0x080145b6
 8013424:	08010161 	.word	0x08010161
 8013428:	08013189 	.word	0x08013189

0801342c <__sfputc_r>:
 801342c:	6893      	ldr	r3, [r2, #8]
 801342e:	3b01      	subs	r3, #1
 8013430:	2b00      	cmp	r3, #0
 8013432:	b410      	push	{r4}
 8013434:	6093      	str	r3, [r2, #8]
 8013436:	da08      	bge.n	801344a <__sfputc_r+0x1e>
 8013438:	6994      	ldr	r4, [r2, #24]
 801343a:	42a3      	cmp	r3, r4
 801343c:	db01      	blt.n	8013442 <__sfputc_r+0x16>
 801343e:	290a      	cmp	r1, #10
 8013440:	d103      	bne.n	801344a <__sfputc_r+0x1e>
 8013442:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013446:	f000 b987 	b.w	8013758 <__swbuf_r>
 801344a:	6813      	ldr	r3, [r2, #0]
 801344c:	1c58      	adds	r0, r3, #1
 801344e:	6010      	str	r0, [r2, #0]
 8013450:	7019      	strb	r1, [r3, #0]
 8013452:	4608      	mov	r0, r1
 8013454:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013458:	4770      	bx	lr

0801345a <__sfputs_r>:
 801345a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801345c:	4606      	mov	r6, r0
 801345e:	460f      	mov	r7, r1
 8013460:	4614      	mov	r4, r2
 8013462:	18d5      	adds	r5, r2, r3
 8013464:	42ac      	cmp	r4, r5
 8013466:	d101      	bne.n	801346c <__sfputs_r+0x12>
 8013468:	2000      	movs	r0, #0
 801346a:	e007      	b.n	801347c <__sfputs_r+0x22>
 801346c:	463a      	mov	r2, r7
 801346e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013472:	4630      	mov	r0, r6
 8013474:	f7ff ffda 	bl	801342c <__sfputc_r>
 8013478:	1c43      	adds	r3, r0, #1
 801347a:	d1f3      	bne.n	8013464 <__sfputs_r+0xa>
 801347c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013480 <_vfiprintf_r>:
 8013480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013484:	460c      	mov	r4, r1
 8013486:	b09d      	sub	sp, #116	; 0x74
 8013488:	4617      	mov	r7, r2
 801348a:	461d      	mov	r5, r3
 801348c:	4606      	mov	r6, r0
 801348e:	b118      	cbz	r0, 8013498 <_vfiprintf_r+0x18>
 8013490:	6983      	ldr	r3, [r0, #24]
 8013492:	b90b      	cbnz	r3, 8013498 <_vfiprintf_r+0x18>
 8013494:	f7fe fe70 	bl	8012178 <__sinit>
 8013498:	4b7c      	ldr	r3, [pc, #496]	; (801368c <_vfiprintf_r+0x20c>)
 801349a:	429c      	cmp	r4, r3
 801349c:	d158      	bne.n	8013550 <_vfiprintf_r+0xd0>
 801349e:	6874      	ldr	r4, [r6, #4]
 80134a0:	89a3      	ldrh	r3, [r4, #12]
 80134a2:	0718      	lsls	r0, r3, #28
 80134a4:	d55e      	bpl.n	8013564 <_vfiprintf_r+0xe4>
 80134a6:	6923      	ldr	r3, [r4, #16]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d05b      	beq.n	8013564 <_vfiprintf_r+0xe4>
 80134ac:	2300      	movs	r3, #0
 80134ae:	9309      	str	r3, [sp, #36]	; 0x24
 80134b0:	2320      	movs	r3, #32
 80134b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80134b6:	2330      	movs	r3, #48	; 0x30
 80134b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80134bc:	9503      	str	r5, [sp, #12]
 80134be:	f04f 0b01 	mov.w	fp, #1
 80134c2:	46b8      	mov	r8, r7
 80134c4:	4645      	mov	r5, r8
 80134c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80134ca:	b10b      	cbz	r3, 80134d0 <_vfiprintf_r+0x50>
 80134cc:	2b25      	cmp	r3, #37	; 0x25
 80134ce:	d154      	bne.n	801357a <_vfiprintf_r+0xfa>
 80134d0:	ebb8 0a07 	subs.w	sl, r8, r7
 80134d4:	d00b      	beq.n	80134ee <_vfiprintf_r+0x6e>
 80134d6:	4653      	mov	r3, sl
 80134d8:	463a      	mov	r2, r7
 80134da:	4621      	mov	r1, r4
 80134dc:	4630      	mov	r0, r6
 80134de:	f7ff ffbc 	bl	801345a <__sfputs_r>
 80134e2:	3001      	adds	r0, #1
 80134e4:	f000 80c2 	beq.w	801366c <_vfiprintf_r+0x1ec>
 80134e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134ea:	4453      	add	r3, sl
 80134ec:	9309      	str	r3, [sp, #36]	; 0x24
 80134ee:	f898 3000 	ldrb.w	r3, [r8]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	f000 80ba 	beq.w	801366c <_vfiprintf_r+0x1ec>
 80134f8:	2300      	movs	r3, #0
 80134fa:	f04f 32ff 	mov.w	r2, #4294967295
 80134fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013502:	9304      	str	r3, [sp, #16]
 8013504:	9307      	str	r3, [sp, #28]
 8013506:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801350a:	931a      	str	r3, [sp, #104]	; 0x68
 801350c:	46a8      	mov	r8, r5
 801350e:	2205      	movs	r2, #5
 8013510:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013514:	485e      	ldr	r0, [pc, #376]	; (8013690 <_vfiprintf_r+0x210>)
 8013516:	f7ec feeb 	bl	80002f0 <memchr>
 801351a:	9b04      	ldr	r3, [sp, #16]
 801351c:	bb78      	cbnz	r0, 801357e <_vfiprintf_r+0xfe>
 801351e:	06d9      	lsls	r1, r3, #27
 8013520:	bf44      	itt	mi
 8013522:	2220      	movmi	r2, #32
 8013524:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013528:	071a      	lsls	r2, r3, #28
 801352a:	bf44      	itt	mi
 801352c:	222b      	movmi	r2, #43	; 0x2b
 801352e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013532:	782a      	ldrb	r2, [r5, #0]
 8013534:	2a2a      	cmp	r2, #42	; 0x2a
 8013536:	d02a      	beq.n	801358e <_vfiprintf_r+0x10e>
 8013538:	9a07      	ldr	r2, [sp, #28]
 801353a:	46a8      	mov	r8, r5
 801353c:	2000      	movs	r0, #0
 801353e:	250a      	movs	r5, #10
 8013540:	4641      	mov	r1, r8
 8013542:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013546:	3b30      	subs	r3, #48	; 0x30
 8013548:	2b09      	cmp	r3, #9
 801354a:	d969      	bls.n	8013620 <_vfiprintf_r+0x1a0>
 801354c:	b360      	cbz	r0, 80135a8 <_vfiprintf_r+0x128>
 801354e:	e024      	b.n	801359a <_vfiprintf_r+0x11a>
 8013550:	4b50      	ldr	r3, [pc, #320]	; (8013694 <_vfiprintf_r+0x214>)
 8013552:	429c      	cmp	r4, r3
 8013554:	d101      	bne.n	801355a <_vfiprintf_r+0xda>
 8013556:	68b4      	ldr	r4, [r6, #8]
 8013558:	e7a2      	b.n	80134a0 <_vfiprintf_r+0x20>
 801355a:	4b4f      	ldr	r3, [pc, #316]	; (8013698 <_vfiprintf_r+0x218>)
 801355c:	429c      	cmp	r4, r3
 801355e:	bf08      	it	eq
 8013560:	68f4      	ldreq	r4, [r6, #12]
 8013562:	e79d      	b.n	80134a0 <_vfiprintf_r+0x20>
 8013564:	4621      	mov	r1, r4
 8013566:	4630      	mov	r0, r6
 8013568:	f000 f968 	bl	801383c <__swsetup_r>
 801356c:	2800      	cmp	r0, #0
 801356e:	d09d      	beq.n	80134ac <_vfiprintf_r+0x2c>
 8013570:	f04f 30ff 	mov.w	r0, #4294967295
 8013574:	b01d      	add	sp, #116	; 0x74
 8013576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801357a:	46a8      	mov	r8, r5
 801357c:	e7a2      	b.n	80134c4 <_vfiprintf_r+0x44>
 801357e:	4a44      	ldr	r2, [pc, #272]	; (8013690 <_vfiprintf_r+0x210>)
 8013580:	1a80      	subs	r0, r0, r2
 8013582:	fa0b f000 	lsl.w	r0, fp, r0
 8013586:	4318      	orrs	r0, r3
 8013588:	9004      	str	r0, [sp, #16]
 801358a:	4645      	mov	r5, r8
 801358c:	e7be      	b.n	801350c <_vfiprintf_r+0x8c>
 801358e:	9a03      	ldr	r2, [sp, #12]
 8013590:	1d11      	adds	r1, r2, #4
 8013592:	6812      	ldr	r2, [r2, #0]
 8013594:	9103      	str	r1, [sp, #12]
 8013596:	2a00      	cmp	r2, #0
 8013598:	db01      	blt.n	801359e <_vfiprintf_r+0x11e>
 801359a:	9207      	str	r2, [sp, #28]
 801359c:	e004      	b.n	80135a8 <_vfiprintf_r+0x128>
 801359e:	4252      	negs	r2, r2
 80135a0:	f043 0302 	orr.w	r3, r3, #2
 80135a4:	9207      	str	r2, [sp, #28]
 80135a6:	9304      	str	r3, [sp, #16]
 80135a8:	f898 3000 	ldrb.w	r3, [r8]
 80135ac:	2b2e      	cmp	r3, #46	; 0x2e
 80135ae:	d10e      	bne.n	80135ce <_vfiprintf_r+0x14e>
 80135b0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80135b4:	2b2a      	cmp	r3, #42	; 0x2a
 80135b6:	d138      	bne.n	801362a <_vfiprintf_r+0x1aa>
 80135b8:	9b03      	ldr	r3, [sp, #12]
 80135ba:	1d1a      	adds	r2, r3, #4
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	9203      	str	r2, [sp, #12]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	bfb8      	it	lt
 80135c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80135c8:	f108 0802 	add.w	r8, r8, #2
 80135cc:	9305      	str	r3, [sp, #20]
 80135ce:	4d33      	ldr	r5, [pc, #204]	; (801369c <_vfiprintf_r+0x21c>)
 80135d0:	f898 1000 	ldrb.w	r1, [r8]
 80135d4:	2203      	movs	r2, #3
 80135d6:	4628      	mov	r0, r5
 80135d8:	f7ec fe8a 	bl	80002f0 <memchr>
 80135dc:	b140      	cbz	r0, 80135f0 <_vfiprintf_r+0x170>
 80135de:	2340      	movs	r3, #64	; 0x40
 80135e0:	1b40      	subs	r0, r0, r5
 80135e2:	fa03 f000 	lsl.w	r0, r3, r0
 80135e6:	9b04      	ldr	r3, [sp, #16]
 80135e8:	4303      	orrs	r3, r0
 80135ea:	f108 0801 	add.w	r8, r8, #1
 80135ee:	9304      	str	r3, [sp, #16]
 80135f0:	f898 1000 	ldrb.w	r1, [r8]
 80135f4:	482a      	ldr	r0, [pc, #168]	; (80136a0 <_vfiprintf_r+0x220>)
 80135f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80135fa:	2206      	movs	r2, #6
 80135fc:	f108 0701 	add.w	r7, r8, #1
 8013600:	f7ec fe76 	bl	80002f0 <memchr>
 8013604:	2800      	cmp	r0, #0
 8013606:	d037      	beq.n	8013678 <_vfiprintf_r+0x1f8>
 8013608:	4b26      	ldr	r3, [pc, #152]	; (80136a4 <_vfiprintf_r+0x224>)
 801360a:	bb1b      	cbnz	r3, 8013654 <_vfiprintf_r+0x1d4>
 801360c:	9b03      	ldr	r3, [sp, #12]
 801360e:	3307      	adds	r3, #7
 8013610:	f023 0307 	bic.w	r3, r3, #7
 8013614:	3308      	adds	r3, #8
 8013616:	9303      	str	r3, [sp, #12]
 8013618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801361a:	444b      	add	r3, r9
 801361c:	9309      	str	r3, [sp, #36]	; 0x24
 801361e:	e750      	b.n	80134c2 <_vfiprintf_r+0x42>
 8013620:	fb05 3202 	mla	r2, r5, r2, r3
 8013624:	2001      	movs	r0, #1
 8013626:	4688      	mov	r8, r1
 8013628:	e78a      	b.n	8013540 <_vfiprintf_r+0xc0>
 801362a:	2300      	movs	r3, #0
 801362c:	f108 0801 	add.w	r8, r8, #1
 8013630:	9305      	str	r3, [sp, #20]
 8013632:	4619      	mov	r1, r3
 8013634:	250a      	movs	r5, #10
 8013636:	4640      	mov	r0, r8
 8013638:	f810 2b01 	ldrb.w	r2, [r0], #1
 801363c:	3a30      	subs	r2, #48	; 0x30
 801363e:	2a09      	cmp	r2, #9
 8013640:	d903      	bls.n	801364a <_vfiprintf_r+0x1ca>
 8013642:	2b00      	cmp	r3, #0
 8013644:	d0c3      	beq.n	80135ce <_vfiprintf_r+0x14e>
 8013646:	9105      	str	r1, [sp, #20]
 8013648:	e7c1      	b.n	80135ce <_vfiprintf_r+0x14e>
 801364a:	fb05 2101 	mla	r1, r5, r1, r2
 801364e:	2301      	movs	r3, #1
 8013650:	4680      	mov	r8, r0
 8013652:	e7f0      	b.n	8013636 <_vfiprintf_r+0x1b6>
 8013654:	ab03      	add	r3, sp, #12
 8013656:	9300      	str	r3, [sp, #0]
 8013658:	4622      	mov	r2, r4
 801365a:	4b13      	ldr	r3, [pc, #76]	; (80136a8 <_vfiprintf_r+0x228>)
 801365c:	a904      	add	r1, sp, #16
 801365e:	4630      	mov	r0, r6
 8013660:	f7fc fd7e 	bl	8010160 <_printf_float>
 8013664:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013668:	4681      	mov	r9, r0
 801366a:	d1d5      	bne.n	8013618 <_vfiprintf_r+0x198>
 801366c:	89a3      	ldrh	r3, [r4, #12]
 801366e:	065b      	lsls	r3, r3, #25
 8013670:	f53f af7e 	bmi.w	8013570 <_vfiprintf_r+0xf0>
 8013674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013676:	e77d      	b.n	8013574 <_vfiprintf_r+0xf4>
 8013678:	ab03      	add	r3, sp, #12
 801367a:	9300      	str	r3, [sp, #0]
 801367c:	4622      	mov	r2, r4
 801367e:	4b0a      	ldr	r3, [pc, #40]	; (80136a8 <_vfiprintf_r+0x228>)
 8013680:	a904      	add	r1, sp, #16
 8013682:	4630      	mov	r0, r6
 8013684:	f7fd f80e 	bl	80106a4 <_printf_i>
 8013688:	e7ec      	b.n	8013664 <_vfiprintf_r+0x1e4>
 801368a:	bf00      	nop
 801368c:	08014460 	.word	0x08014460
 8013690:	080145ac 	.word	0x080145ac
 8013694:	08014480 	.word	0x08014480
 8013698:	08014440 	.word	0x08014440
 801369c:	080145b2 	.word	0x080145b2
 80136a0:	080145b6 	.word	0x080145b6
 80136a4:	08010161 	.word	0x08010161
 80136a8:	0801345b 	.word	0x0801345b

080136ac <__sread>:
 80136ac:	b510      	push	{r4, lr}
 80136ae:	460c      	mov	r4, r1
 80136b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136b4:	f000 fa88 	bl	8013bc8 <_read_r>
 80136b8:	2800      	cmp	r0, #0
 80136ba:	bfab      	itete	ge
 80136bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80136be:	89a3      	ldrhlt	r3, [r4, #12]
 80136c0:	181b      	addge	r3, r3, r0
 80136c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80136c6:	bfac      	ite	ge
 80136c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80136ca:	81a3      	strhlt	r3, [r4, #12]
 80136cc:	bd10      	pop	{r4, pc}

080136ce <__swrite>:
 80136ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136d2:	461f      	mov	r7, r3
 80136d4:	898b      	ldrh	r3, [r1, #12]
 80136d6:	05db      	lsls	r3, r3, #23
 80136d8:	4605      	mov	r5, r0
 80136da:	460c      	mov	r4, r1
 80136dc:	4616      	mov	r6, r2
 80136de:	d505      	bpl.n	80136ec <__swrite+0x1e>
 80136e0:	2302      	movs	r3, #2
 80136e2:	2200      	movs	r2, #0
 80136e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136e8:	f000 f9d6 	bl	8013a98 <_lseek_r>
 80136ec:	89a3      	ldrh	r3, [r4, #12]
 80136ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80136f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80136f6:	81a3      	strh	r3, [r4, #12]
 80136f8:	4632      	mov	r2, r6
 80136fa:	463b      	mov	r3, r7
 80136fc:	4628      	mov	r0, r5
 80136fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013702:	f000 b889 	b.w	8013818 <_write_r>

08013706 <__sseek>:
 8013706:	b510      	push	{r4, lr}
 8013708:	460c      	mov	r4, r1
 801370a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801370e:	f000 f9c3 	bl	8013a98 <_lseek_r>
 8013712:	1c43      	adds	r3, r0, #1
 8013714:	89a3      	ldrh	r3, [r4, #12]
 8013716:	bf15      	itete	ne
 8013718:	6560      	strne	r0, [r4, #84]	; 0x54
 801371a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801371e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013722:	81a3      	strheq	r3, [r4, #12]
 8013724:	bf18      	it	ne
 8013726:	81a3      	strhne	r3, [r4, #12]
 8013728:	bd10      	pop	{r4, pc}

0801372a <__sclose>:
 801372a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801372e:	f000 b8f3 	b.w	8013918 <_close_r>

08013732 <strncmp>:
 8013732:	b510      	push	{r4, lr}
 8013734:	b16a      	cbz	r2, 8013752 <strncmp+0x20>
 8013736:	3901      	subs	r1, #1
 8013738:	1884      	adds	r4, r0, r2
 801373a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801373e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013742:	4293      	cmp	r3, r2
 8013744:	d103      	bne.n	801374e <strncmp+0x1c>
 8013746:	42a0      	cmp	r0, r4
 8013748:	d001      	beq.n	801374e <strncmp+0x1c>
 801374a:	2b00      	cmp	r3, #0
 801374c:	d1f5      	bne.n	801373a <strncmp+0x8>
 801374e:	1a98      	subs	r0, r3, r2
 8013750:	bd10      	pop	{r4, pc}
 8013752:	4610      	mov	r0, r2
 8013754:	e7fc      	b.n	8013750 <strncmp+0x1e>
	...

08013758 <__swbuf_r>:
 8013758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801375a:	460e      	mov	r6, r1
 801375c:	4614      	mov	r4, r2
 801375e:	4605      	mov	r5, r0
 8013760:	b118      	cbz	r0, 801376a <__swbuf_r+0x12>
 8013762:	6983      	ldr	r3, [r0, #24]
 8013764:	b90b      	cbnz	r3, 801376a <__swbuf_r+0x12>
 8013766:	f7fe fd07 	bl	8012178 <__sinit>
 801376a:	4b21      	ldr	r3, [pc, #132]	; (80137f0 <__swbuf_r+0x98>)
 801376c:	429c      	cmp	r4, r3
 801376e:	d12a      	bne.n	80137c6 <__swbuf_r+0x6e>
 8013770:	686c      	ldr	r4, [r5, #4]
 8013772:	69a3      	ldr	r3, [r4, #24]
 8013774:	60a3      	str	r3, [r4, #8]
 8013776:	89a3      	ldrh	r3, [r4, #12]
 8013778:	071a      	lsls	r2, r3, #28
 801377a:	d52e      	bpl.n	80137da <__swbuf_r+0x82>
 801377c:	6923      	ldr	r3, [r4, #16]
 801377e:	b363      	cbz	r3, 80137da <__swbuf_r+0x82>
 8013780:	6923      	ldr	r3, [r4, #16]
 8013782:	6820      	ldr	r0, [r4, #0]
 8013784:	1ac0      	subs	r0, r0, r3
 8013786:	6963      	ldr	r3, [r4, #20]
 8013788:	b2f6      	uxtb	r6, r6
 801378a:	4283      	cmp	r3, r0
 801378c:	4637      	mov	r7, r6
 801378e:	dc04      	bgt.n	801379a <__swbuf_r+0x42>
 8013790:	4621      	mov	r1, r4
 8013792:	4628      	mov	r0, r5
 8013794:	f000 f956 	bl	8013a44 <_fflush_r>
 8013798:	bb28      	cbnz	r0, 80137e6 <__swbuf_r+0x8e>
 801379a:	68a3      	ldr	r3, [r4, #8]
 801379c:	3b01      	subs	r3, #1
 801379e:	60a3      	str	r3, [r4, #8]
 80137a0:	6823      	ldr	r3, [r4, #0]
 80137a2:	1c5a      	adds	r2, r3, #1
 80137a4:	6022      	str	r2, [r4, #0]
 80137a6:	701e      	strb	r6, [r3, #0]
 80137a8:	6963      	ldr	r3, [r4, #20]
 80137aa:	3001      	adds	r0, #1
 80137ac:	4283      	cmp	r3, r0
 80137ae:	d004      	beq.n	80137ba <__swbuf_r+0x62>
 80137b0:	89a3      	ldrh	r3, [r4, #12]
 80137b2:	07db      	lsls	r3, r3, #31
 80137b4:	d519      	bpl.n	80137ea <__swbuf_r+0x92>
 80137b6:	2e0a      	cmp	r6, #10
 80137b8:	d117      	bne.n	80137ea <__swbuf_r+0x92>
 80137ba:	4621      	mov	r1, r4
 80137bc:	4628      	mov	r0, r5
 80137be:	f000 f941 	bl	8013a44 <_fflush_r>
 80137c2:	b190      	cbz	r0, 80137ea <__swbuf_r+0x92>
 80137c4:	e00f      	b.n	80137e6 <__swbuf_r+0x8e>
 80137c6:	4b0b      	ldr	r3, [pc, #44]	; (80137f4 <__swbuf_r+0x9c>)
 80137c8:	429c      	cmp	r4, r3
 80137ca:	d101      	bne.n	80137d0 <__swbuf_r+0x78>
 80137cc:	68ac      	ldr	r4, [r5, #8]
 80137ce:	e7d0      	b.n	8013772 <__swbuf_r+0x1a>
 80137d0:	4b09      	ldr	r3, [pc, #36]	; (80137f8 <__swbuf_r+0xa0>)
 80137d2:	429c      	cmp	r4, r3
 80137d4:	bf08      	it	eq
 80137d6:	68ec      	ldreq	r4, [r5, #12]
 80137d8:	e7cb      	b.n	8013772 <__swbuf_r+0x1a>
 80137da:	4621      	mov	r1, r4
 80137dc:	4628      	mov	r0, r5
 80137de:	f000 f82d 	bl	801383c <__swsetup_r>
 80137e2:	2800      	cmp	r0, #0
 80137e4:	d0cc      	beq.n	8013780 <__swbuf_r+0x28>
 80137e6:	f04f 37ff 	mov.w	r7, #4294967295
 80137ea:	4638      	mov	r0, r7
 80137ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137ee:	bf00      	nop
 80137f0:	08014460 	.word	0x08014460
 80137f4:	08014480 	.word	0x08014480
 80137f8:	08014440 	.word	0x08014440

080137fc <__ascii_wctomb>:
 80137fc:	b149      	cbz	r1, 8013812 <__ascii_wctomb+0x16>
 80137fe:	2aff      	cmp	r2, #255	; 0xff
 8013800:	bf85      	ittet	hi
 8013802:	238a      	movhi	r3, #138	; 0x8a
 8013804:	6003      	strhi	r3, [r0, #0]
 8013806:	700a      	strbls	r2, [r1, #0]
 8013808:	f04f 30ff 	movhi.w	r0, #4294967295
 801380c:	bf98      	it	ls
 801380e:	2001      	movls	r0, #1
 8013810:	4770      	bx	lr
 8013812:	4608      	mov	r0, r1
 8013814:	4770      	bx	lr
	...

08013818 <_write_r>:
 8013818:	b538      	push	{r3, r4, r5, lr}
 801381a:	4c07      	ldr	r4, [pc, #28]	; (8013838 <_write_r+0x20>)
 801381c:	4605      	mov	r5, r0
 801381e:	4608      	mov	r0, r1
 8013820:	4611      	mov	r1, r2
 8013822:	2200      	movs	r2, #0
 8013824:	6022      	str	r2, [r4, #0]
 8013826:	461a      	mov	r2, r3
 8013828:	f7ed fc08 	bl	800103c <_write>
 801382c:	1c43      	adds	r3, r0, #1
 801382e:	d102      	bne.n	8013836 <_write_r+0x1e>
 8013830:	6823      	ldr	r3, [r4, #0]
 8013832:	b103      	cbz	r3, 8013836 <_write_r+0x1e>
 8013834:	602b      	str	r3, [r5, #0]
 8013836:	bd38      	pop	{r3, r4, r5, pc}
 8013838:	24001b18 	.word	0x24001b18

0801383c <__swsetup_r>:
 801383c:	4b32      	ldr	r3, [pc, #200]	; (8013908 <__swsetup_r+0xcc>)
 801383e:	b570      	push	{r4, r5, r6, lr}
 8013840:	681d      	ldr	r5, [r3, #0]
 8013842:	4606      	mov	r6, r0
 8013844:	460c      	mov	r4, r1
 8013846:	b125      	cbz	r5, 8013852 <__swsetup_r+0x16>
 8013848:	69ab      	ldr	r3, [r5, #24]
 801384a:	b913      	cbnz	r3, 8013852 <__swsetup_r+0x16>
 801384c:	4628      	mov	r0, r5
 801384e:	f7fe fc93 	bl	8012178 <__sinit>
 8013852:	4b2e      	ldr	r3, [pc, #184]	; (801390c <__swsetup_r+0xd0>)
 8013854:	429c      	cmp	r4, r3
 8013856:	d10f      	bne.n	8013878 <__swsetup_r+0x3c>
 8013858:	686c      	ldr	r4, [r5, #4]
 801385a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801385e:	b29a      	uxth	r2, r3
 8013860:	0715      	lsls	r5, r2, #28
 8013862:	d42c      	bmi.n	80138be <__swsetup_r+0x82>
 8013864:	06d0      	lsls	r0, r2, #27
 8013866:	d411      	bmi.n	801388c <__swsetup_r+0x50>
 8013868:	2209      	movs	r2, #9
 801386a:	6032      	str	r2, [r6, #0]
 801386c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013870:	81a3      	strh	r3, [r4, #12]
 8013872:	f04f 30ff 	mov.w	r0, #4294967295
 8013876:	e03e      	b.n	80138f6 <__swsetup_r+0xba>
 8013878:	4b25      	ldr	r3, [pc, #148]	; (8013910 <__swsetup_r+0xd4>)
 801387a:	429c      	cmp	r4, r3
 801387c:	d101      	bne.n	8013882 <__swsetup_r+0x46>
 801387e:	68ac      	ldr	r4, [r5, #8]
 8013880:	e7eb      	b.n	801385a <__swsetup_r+0x1e>
 8013882:	4b24      	ldr	r3, [pc, #144]	; (8013914 <__swsetup_r+0xd8>)
 8013884:	429c      	cmp	r4, r3
 8013886:	bf08      	it	eq
 8013888:	68ec      	ldreq	r4, [r5, #12]
 801388a:	e7e6      	b.n	801385a <__swsetup_r+0x1e>
 801388c:	0751      	lsls	r1, r2, #29
 801388e:	d512      	bpl.n	80138b6 <__swsetup_r+0x7a>
 8013890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013892:	b141      	cbz	r1, 80138a6 <__swsetup_r+0x6a>
 8013894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013898:	4299      	cmp	r1, r3
 801389a:	d002      	beq.n	80138a2 <__swsetup_r+0x66>
 801389c:	4630      	mov	r0, r6
 801389e:	f7fc fb2f 	bl	800ff00 <_free_r>
 80138a2:	2300      	movs	r3, #0
 80138a4:	6363      	str	r3, [r4, #52]	; 0x34
 80138a6:	89a3      	ldrh	r3, [r4, #12]
 80138a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80138ac:	81a3      	strh	r3, [r4, #12]
 80138ae:	2300      	movs	r3, #0
 80138b0:	6063      	str	r3, [r4, #4]
 80138b2:	6923      	ldr	r3, [r4, #16]
 80138b4:	6023      	str	r3, [r4, #0]
 80138b6:	89a3      	ldrh	r3, [r4, #12]
 80138b8:	f043 0308 	orr.w	r3, r3, #8
 80138bc:	81a3      	strh	r3, [r4, #12]
 80138be:	6923      	ldr	r3, [r4, #16]
 80138c0:	b94b      	cbnz	r3, 80138d6 <__swsetup_r+0x9a>
 80138c2:	89a3      	ldrh	r3, [r4, #12]
 80138c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80138c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80138cc:	d003      	beq.n	80138d6 <__swsetup_r+0x9a>
 80138ce:	4621      	mov	r1, r4
 80138d0:	4630      	mov	r0, r6
 80138d2:	f000 f917 	bl	8013b04 <__smakebuf_r>
 80138d6:	89a2      	ldrh	r2, [r4, #12]
 80138d8:	f012 0301 	ands.w	r3, r2, #1
 80138dc:	d00c      	beq.n	80138f8 <__swsetup_r+0xbc>
 80138de:	2300      	movs	r3, #0
 80138e0:	60a3      	str	r3, [r4, #8]
 80138e2:	6963      	ldr	r3, [r4, #20]
 80138e4:	425b      	negs	r3, r3
 80138e6:	61a3      	str	r3, [r4, #24]
 80138e8:	6923      	ldr	r3, [r4, #16]
 80138ea:	b953      	cbnz	r3, 8013902 <__swsetup_r+0xc6>
 80138ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80138f4:	d1ba      	bne.n	801386c <__swsetup_r+0x30>
 80138f6:	bd70      	pop	{r4, r5, r6, pc}
 80138f8:	0792      	lsls	r2, r2, #30
 80138fa:	bf58      	it	pl
 80138fc:	6963      	ldrpl	r3, [r4, #20]
 80138fe:	60a3      	str	r3, [r4, #8]
 8013900:	e7f2      	b.n	80138e8 <__swsetup_r+0xac>
 8013902:	2000      	movs	r0, #0
 8013904:	e7f7      	b.n	80138f6 <__swsetup_r+0xba>
 8013906:	bf00      	nop
 8013908:	24000608 	.word	0x24000608
 801390c:	08014460 	.word	0x08014460
 8013910:	08014480 	.word	0x08014480
 8013914:	08014440 	.word	0x08014440

08013918 <_close_r>:
 8013918:	b538      	push	{r3, r4, r5, lr}
 801391a:	4c06      	ldr	r4, [pc, #24]	; (8013934 <_close_r+0x1c>)
 801391c:	2300      	movs	r3, #0
 801391e:	4605      	mov	r5, r0
 8013920:	4608      	mov	r0, r1
 8013922:	6023      	str	r3, [r4, #0]
 8013924:	f7ed fd7f 	bl	8001426 <_close>
 8013928:	1c43      	adds	r3, r0, #1
 801392a:	d102      	bne.n	8013932 <_close_r+0x1a>
 801392c:	6823      	ldr	r3, [r4, #0]
 801392e:	b103      	cbz	r3, 8013932 <_close_r+0x1a>
 8013930:	602b      	str	r3, [r5, #0]
 8013932:	bd38      	pop	{r3, r4, r5, pc}
 8013934:	24001b18 	.word	0x24001b18

08013938 <__sflush_r>:
 8013938:	898a      	ldrh	r2, [r1, #12]
 801393a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801393e:	4605      	mov	r5, r0
 8013940:	0710      	lsls	r0, r2, #28
 8013942:	460c      	mov	r4, r1
 8013944:	d458      	bmi.n	80139f8 <__sflush_r+0xc0>
 8013946:	684b      	ldr	r3, [r1, #4]
 8013948:	2b00      	cmp	r3, #0
 801394a:	dc05      	bgt.n	8013958 <__sflush_r+0x20>
 801394c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801394e:	2b00      	cmp	r3, #0
 8013950:	dc02      	bgt.n	8013958 <__sflush_r+0x20>
 8013952:	2000      	movs	r0, #0
 8013954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801395a:	2e00      	cmp	r6, #0
 801395c:	d0f9      	beq.n	8013952 <__sflush_r+0x1a>
 801395e:	2300      	movs	r3, #0
 8013960:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013964:	682f      	ldr	r7, [r5, #0]
 8013966:	6a21      	ldr	r1, [r4, #32]
 8013968:	602b      	str	r3, [r5, #0]
 801396a:	d032      	beq.n	80139d2 <__sflush_r+0x9a>
 801396c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801396e:	89a3      	ldrh	r3, [r4, #12]
 8013970:	075a      	lsls	r2, r3, #29
 8013972:	d505      	bpl.n	8013980 <__sflush_r+0x48>
 8013974:	6863      	ldr	r3, [r4, #4]
 8013976:	1ac0      	subs	r0, r0, r3
 8013978:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801397a:	b10b      	cbz	r3, 8013980 <__sflush_r+0x48>
 801397c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801397e:	1ac0      	subs	r0, r0, r3
 8013980:	2300      	movs	r3, #0
 8013982:	4602      	mov	r2, r0
 8013984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013986:	6a21      	ldr	r1, [r4, #32]
 8013988:	4628      	mov	r0, r5
 801398a:	47b0      	blx	r6
 801398c:	1c43      	adds	r3, r0, #1
 801398e:	89a3      	ldrh	r3, [r4, #12]
 8013990:	d106      	bne.n	80139a0 <__sflush_r+0x68>
 8013992:	6829      	ldr	r1, [r5, #0]
 8013994:	291d      	cmp	r1, #29
 8013996:	d848      	bhi.n	8013a2a <__sflush_r+0xf2>
 8013998:	4a29      	ldr	r2, [pc, #164]	; (8013a40 <__sflush_r+0x108>)
 801399a:	40ca      	lsrs	r2, r1
 801399c:	07d6      	lsls	r6, r2, #31
 801399e:	d544      	bpl.n	8013a2a <__sflush_r+0xf2>
 80139a0:	2200      	movs	r2, #0
 80139a2:	6062      	str	r2, [r4, #4]
 80139a4:	04d9      	lsls	r1, r3, #19
 80139a6:	6922      	ldr	r2, [r4, #16]
 80139a8:	6022      	str	r2, [r4, #0]
 80139aa:	d504      	bpl.n	80139b6 <__sflush_r+0x7e>
 80139ac:	1c42      	adds	r2, r0, #1
 80139ae:	d101      	bne.n	80139b4 <__sflush_r+0x7c>
 80139b0:	682b      	ldr	r3, [r5, #0]
 80139b2:	b903      	cbnz	r3, 80139b6 <__sflush_r+0x7e>
 80139b4:	6560      	str	r0, [r4, #84]	; 0x54
 80139b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80139b8:	602f      	str	r7, [r5, #0]
 80139ba:	2900      	cmp	r1, #0
 80139bc:	d0c9      	beq.n	8013952 <__sflush_r+0x1a>
 80139be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80139c2:	4299      	cmp	r1, r3
 80139c4:	d002      	beq.n	80139cc <__sflush_r+0x94>
 80139c6:	4628      	mov	r0, r5
 80139c8:	f7fc fa9a 	bl	800ff00 <_free_r>
 80139cc:	2000      	movs	r0, #0
 80139ce:	6360      	str	r0, [r4, #52]	; 0x34
 80139d0:	e7c0      	b.n	8013954 <__sflush_r+0x1c>
 80139d2:	2301      	movs	r3, #1
 80139d4:	4628      	mov	r0, r5
 80139d6:	47b0      	blx	r6
 80139d8:	1c41      	adds	r1, r0, #1
 80139da:	d1c8      	bne.n	801396e <__sflush_r+0x36>
 80139dc:	682b      	ldr	r3, [r5, #0]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d0c5      	beq.n	801396e <__sflush_r+0x36>
 80139e2:	2b1d      	cmp	r3, #29
 80139e4:	d001      	beq.n	80139ea <__sflush_r+0xb2>
 80139e6:	2b16      	cmp	r3, #22
 80139e8:	d101      	bne.n	80139ee <__sflush_r+0xb6>
 80139ea:	602f      	str	r7, [r5, #0]
 80139ec:	e7b1      	b.n	8013952 <__sflush_r+0x1a>
 80139ee:	89a3      	ldrh	r3, [r4, #12]
 80139f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139f4:	81a3      	strh	r3, [r4, #12]
 80139f6:	e7ad      	b.n	8013954 <__sflush_r+0x1c>
 80139f8:	690f      	ldr	r7, [r1, #16]
 80139fa:	2f00      	cmp	r7, #0
 80139fc:	d0a9      	beq.n	8013952 <__sflush_r+0x1a>
 80139fe:	0793      	lsls	r3, r2, #30
 8013a00:	680e      	ldr	r6, [r1, #0]
 8013a02:	bf08      	it	eq
 8013a04:	694b      	ldreq	r3, [r1, #20]
 8013a06:	600f      	str	r7, [r1, #0]
 8013a08:	bf18      	it	ne
 8013a0a:	2300      	movne	r3, #0
 8013a0c:	eba6 0807 	sub.w	r8, r6, r7
 8013a10:	608b      	str	r3, [r1, #8]
 8013a12:	f1b8 0f00 	cmp.w	r8, #0
 8013a16:	dd9c      	ble.n	8013952 <__sflush_r+0x1a>
 8013a18:	4643      	mov	r3, r8
 8013a1a:	463a      	mov	r2, r7
 8013a1c:	6a21      	ldr	r1, [r4, #32]
 8013a1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013a20:	4628      	mov	r0, r5
 8013a22:	47b0      	blx	r6
 8013a24:	2800      	cmp	r0, #0
 8013a26:	dc06      	bgt.n	8013a36 <__sflush_r+0xfe>
 8013a28:	89a3      	ldrh	r3, [r4, #12]
 8013a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a2e:	81a3      	strh	r3, [r4, #12]
 8013a30:	f04f 30ff 	mov.w	r0, #4294967295
 8013a34:	e78e      	b.n	8013954 <__sflush_r+0x1c>
 8013a36:	4407      	add	r7, r0
 8013a38:	eba8 0800 	sub.w	r8, r8, r0
 8013a3c:	e7e9      	b.n	8013a12 <__sflush_r+0xda>
 8013a3e:	bf00      	nop
 8013a40:	20400001 	.word	0x20400001

08013a44 <_fflush_r>:
 8013a44:	b538      	push	{r3, r4, r5, lr}
 8013a46:	690b      	ldr	r3, [r1, #16]
 8013a48:	4605      	mov	r5, r0
 8013a4a:	460c      	mov	r4, r1
 8013a4c:	b1db      	cbz	r3, 8013a86 <_fflush_r+0x42>
 8013a4e:	b118      	cbz	r0, 8013a58 <_fflush_r+0x14>
 8013a50:	6983      	ldr	r3, [r0, #24]
 8013a52:	b90b      	cbnz	r3, 8013a58 <_fflush_r+0x14>
 8013a54:	f7fe fb90 	bl	8012178 <__sinit>
 8013a58:	4b0c      	ldr	r3, [pc, #48]	; (8013a8c <_fflush_r+0x48>)
 8013a5a:	429c      	cmp	r4, r3
 8013a5c:	d109      	bne.n	8013a72 <_fflush_r+0x2e>
 8013a5e:	686c      	ldr	r4, [r5, #4]
 8013a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a64:	b17b      	cbz	r3, 8013a86 <_fflush_r+0x42>
 8013a66:	4621      	mov	r1, r4
 8013a68:	4628      	mov	r0, r5
 8013a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a6e:	f7ff bf63 	b.w	8013938 <__sflush_r>
 8013a72:	4b07      	ldr	r3, [pc, #28]	; (8013a90 <_fflush_r+0x4c>)
 8013a74:	429c      	cmp	r4, r3
 8013a76:	d101      	bne.n	8013a7c <_fflush_r+0x38>
 8013a78:	68ac      	ldr	r4, [r5, #8]
 8013a7a:	e7f1      	b.n	8013a60 <_fflush_r+0x1c>
 8013a7c:	4b05      	ldr	r3, [pc, #20]	; (8013a94 <_fflush_r+0x50>)
 8013a7e:	429c      	cmp	r4, r3
 8013a80:	bf08      	it	eq
 8013a82:	68ec      	ldreq	r4, [r5, #12]
 8013a84:	e7ec      	b.n	8013a60 <_fflush_r+0x1c>
 8013a86:	2000      	movs	r0, #0
 8013a88:	bd38      	pop	{r3, r4, r5, pc}
 8013a8a:	bf00      	nop
 8013a8c:	08014460 	.word	0x08014460
 8013a90:	08014480 	.word	0x08014480
 8013a94:	08014440 	.word	0x08014440

08013a98 <_lseek_r>:
 8013a98:	b538      	push	{r3, r4, r5, lr}
 8013a9a:	4c07      	ldr	r4, [pc, #28]	; (8013ab8 <_lseek_r+0x20>)
 8013a9c:	4605      	mov	r5, r0
 8013a9e:	4608      	mov	r0, r1
 8013aa0:	4611      	mov	r1, r2
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	6022      	str	r2, [r4, #0]
 8013aa6:	461a      	mov	r2, r3
 8013aa8:	f7ed fce4 	bl	8001474 <_lseek>
 8013aac:	1c43      	adds	r3, r0, #1
 8013aae:	d102      	bne.n	8013ab6 <_lseek_r+0x1e>
 8013ab0:	6823      	ldr	r3, [r4, #0]
 8013ab2:	b103      	cbz	r3, 8013ab6 <_lseek_r+0x1e>
 8013ab4:	602b      	str	r3, [r5, #0]
 8013ab6:	bd38      	pop	{r3, r4, r5, pc}
 8013ab8:	24001b18 	.word	0x24001b18

08013abc <__swhatbuf_r>:
 8013abc:	b570      	push	{r4, r5, r6, lr}
 8013abe:	460e      	mov	r6, r1
 8013ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ac4:	2900      	cmp	r1, #0
 8013ac6:	b096      	sub	sp, #88	; 0x58
 8013ac8:	4614      	mov	r4, r2
 8013aca:	461d      	mov	r5, r3
 8013acc:	da07      	bge.n	8013ade <__swhatbuf_r+0x22>
 8013ace:	2300      	movs	r3, #0
 8013ad0:	602b      	str	r3, [r5, #0]
 8013ad2:	89b3      	ldrh	r3, [r6, #12]
 8013ad4:	061a      	lsls	r2, r3, #24
 8013ad6:	d410      	bmi.n	8013afa <__swhatbuf_r+0x3e>
 8013ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013adc:	e00e      	b.n	8013afc <__swhatbuf_r+0x40>
 8013ade:	466a      	mov	r2, sp
 8013ae0:	f000 f884 	bl	8013bec <_fstat_r>
 8013ae4:	2800      	cmp	r0, #0
 8013ae6:	dbf2      	blt.n	8013ace <__swhatbuf_r+0x12>
 8013ae8:	9a01      	ldr	r2, [sp, #4]
 8013aea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013aee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013af2:	425a      	negs	r2, r3
 8013af4:	415a      	adcs	r2, r3
 8013af6:	602a      	str	r2, [r5, #0]
 8013af8:	e7ee      	b.n	8013ad8 <__swhatbuf_r+0x1c>
 8013afa:	2340      	movs	r3, #64	; 0x40
 8013afc:	2000      	movs	r0, #0
 8013afe:	6023      	str	r3, [r4, #0]
 8013b00:	b016      	add	sp, #88	; 0x58
 8013b02:	bd70      	pop	{r4, r5, r6, pc}

08013b04 <__smakebuf_r>:
 8013b04:	898b      	ldrh	r3, [r1, #12]
 8013b06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013b08:	079d      	lsls	r5, r3, #30
 8013b0a:	4606      	mov	r6, r0
 8013b0c:	460c      	mov	r4, r1
 8013b0e:	d507      	bpl.n	8013b20 <__smakebuf_r+0x1c>
 8013b10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013b14:	6023      	str	r3, [r4, #0]
 8013b16:	6123      	str	r3, [r4, #16]
 8013b18:	2301      	movs	r3, #1
 8013b1a:	6163      	str	r3, [r4, #20]
 8013b1c:	b002      	add	sp, #8
 8013b1e:	bd70      	pop	{r4, r5, r6, pc}
 8013b20:	ab01      	add	r3, sp, #4
 8013b22:	466a      	mov	r2, sp
 8013b24:	f7ff ffca 	bl	8013abc <__swhatbuf_r>
 8013b28:	9900      	ldr	r1, [sp, #0]
 8013b2a:	4605      	mov	r5, r0
 8013b2c:	4630      	mov	r0, r6
 8013b2e:	f7fc fa35 	bl	800ff9c <_malloc_r>
 8013b32:	b948      	cbnz	r0, 8013b48 <__smakebuf_r+0x44>
 8013b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b38:	059a      	lsls	r2, r3, #22
 8013b3a:	d4ef      	bmi.n	8013b1c <__smakebuf_r+0x18>
 8013b3c:	f023 0303 	bic.w	r3, r3, #3
 8013b40:	f043 0302 	orr.w	r3, r3, #2
 8013b44:	81a3      	strh	r3, [r4, #12]
 8013b46:	e7e3      	b.n	8013b10 <__smakebuf_r+0xc>
 8013b48:	4b0d      	ldr	r3, [pc, #52]	; (8013b80 <__smakebuf_r+0x7c>)
 8013b4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8013b4c:	89a3      	ldrh	r3, [r4, #12]
 8013b4e:	6020      	str	r0, [r4, #0]
 8013b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b54:	81a3      	strh	r3, [r4, #12]
 8013b56:	9b00      	ldr	r3, [sp, #0]
 8013b58:	6163      	str	r3, [r4, #20]
 8013b5a:	9b01      	ldr	r3, [sp, #4]
 8013b5c:	6120      	str	r0, [r4, #16]
 8013b5e:	b15b      	cbz	r3, 8013b78 <__smakebuf_r+0x74>
 8013b60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b64:	4630      	mov	r0, r6
 8013b66:	f000 f853 	bl	8013c10 <_isatty_r>
 8013b6a:	b128      	cbz	r0, 8013b78 <__smakebuf_r+0x74>
 8013b6c:	89a3      	ldrh	r3, [r4, #12]
 8013b6e:	f023 0303 	bic.w	r3, r3, #3
 8013b72:	f043 0301 	orr.w	r3, r3, #1
 8013b76:	81a3      	strh	r3, [r4, #12]
 8013b78:	89a3      	ldrh	r3, [r4, #12]
 8013b7a:	431d      	orrs	r5, r3
 8013b7c:	81a5      	strh	r5, [r4, #12]
 8013b7e:	e7cd      	b.n	8013b1c <__smakebuf_r+0x18>
 8013b80:	08012141 	.word	0x08012141

08013b84 <memmove>:
 8013b84:	4288      	cmp	r0, r1
 8013b86:	b510      	push	{r4, lr}
 8013b88:	eb01 0302 	add.w	r3, r1, r2
 8013b8c:	d807      	bhi.n	8013b9e <memmove+0x1a>
 8013b8e:	1e42      	subs	r2, r0, #1
 8013b90:	4299      	cmp	r1, r3
 8013b92:	d00a      	beq.n	8013baa <memmove+0x26>
 8013b94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b98:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013b9c:	e7f8      	b.n	8013b90 <memmove+0xc>
 8013b9e:	4283      	cmp	r3, r0
 8013ba0:	d9f5      	bls.n	8013b8e <memmove+0xa>
 8013ba2:	1881      	adds	r1, r0, r2
 8013ba4:	1ad2      	subs	r2, r2, r3
 8013ba6:	42d3      	cmn	r3, r2
 8013ba8:	d100      	bne.n	8013bac <memmove+0x28>
 8013baa:	bd10      	pop	{r4, pc}
 8013bac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013bb0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013bb4:	e7f7      	b.n	8013ba6 <memmove+0x22>

08013bb6 <_malloc_usable_size_r>:
 8013bb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013bba:	1f18      	subs	r0, r3, #4
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	bfbc      	itt	lt
 8013bc0:	580b      	ldrlt	r3, [r1, r0]
 8013bc2:	18c0      	addlt	r0, r0, r3
 8013bc4:	4770      	bx	lr
	...

08013bc8 <_read_r>:
 8013bc8:	b538      	push	{r3, r4, r5, lr}
 8013bca:	4c07      	ldr	r4, [pc, #28]	; (8013be8 <_read_r+0x20>)
 8013bcc:	4605      	mov	r5, r0
 8013bce:	4608      	mov	r0, r1
 8013bd0:	4611      	mov	r1, r2
 8013bd2:	2200      	movs	r2, #0
 8013bd4:	6022      	str	r2, [r4, #0]
 8013bd6:	461a      	mov	r2, r3
 8013bd8:	f7ed fc08 	bl	80013ec <_read>
 8013bdc:	1c43      	adds	r3, r0, #1
 8013bde:	d102      	bne.n	8013be6 <_read_r+0x1e>
 8013be0:	6823      	ldr	r3, [r4, #0]
 8013be2:	b103      	cbz	r3, 8013be6 <_read_r+0x1e>
 8013be4:	602b      	str	r3, [r5, #0]
 8013be6:	bd38      	pop	{r3, r4, r5, pc}
 8013be8:	24001b18 	.word	0x24001b18

08013bec <_fstat_r>:
 8013bec:	b538      	push	{r3, r4, r5, lr}
 8013bee:	4c07      	ldr	r4, [pc, #28]	; (8013c0c <_fstat_r+0x20>)
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	4605      	mov	r5, r0
 8013bf4:	4608      	mov	r0, r1
 8013bf6:	4611      	mov	r1, r2
 8013bf8:	6023      	str	r3, [r4, #0]
 8013bfa:	f7ed fc20 	bl	800143e <_fstat>
 8013bfe:	1c43      	adds	r3, r0, #1
 8013c00:	d102      	bne.n	8013c08 <_fstat_r+0x1c>
 8013c02:	6823      	ldr	r3, [r4, #0]
 8013c04:	b103      	cbz	r3, 8013c08 <_fstat_r+0x1c>
 8013c06:	602b      	str	r3, [r5, #0]
 8013c08:	bd38      	pop	{r3, r4, r5, pc}
 8013c0a:	bf00      	nop
 8013c0c:	24001b18 	.word	0x24001b18

08013c10 <_isatty_r>:
 8013c10:	b538      	push	{r3, r4, r5, lr}
 8013c12:	4c06      	ldr	r4, [pc, #24]	; (8013c2c <_isatty_r+0x1c>)
 8013c14:	2300      	movs	r3, #0
 8013c16:	4605      	mov	r5, r0
 8013c18:	4608      	mov	r0, r1
 8013c1a:	6023      	str	r3, [r4, #0]
 8013c1c:	f7ed fc1f 	bl	800145e <_isatty>
 8013c20:	1c43      	adds	r3, r0, #1
 8013c22:	d102      	bne.n	8013c2a <_isatty_r+0x1a>
 8013c24:	6823      	ldr	r3, [r4, #0]
 8013c26:	b103      	cbz	r3, 8013c2a <_isatty_r+0x1a>
 8013c28:	602b      	str	r3, [r5, #0]
 8013c2a:	bd38      	pop	{r3, r4, r5, pc}
 8013c2c:	24001b18 	.word	0x24001b18

08013c30 <_init>:
 8013c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c32:	bf00      	nop
 8013c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c36:	bc08      	pop	{r3}
 8013c38:	469e      	mov	lr, r3
 8013c3a:	4770      	bx	lr

08013c3c <_fini>:
 8013c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c3e:	bf00      	nop
 8013c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c42:	bc08      	pop	{r3}
 8013c44:	469e      	mov	lr, r3
 8013c46:	4770      	bx	lr
